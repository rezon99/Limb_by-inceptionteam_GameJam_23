import type { ServerComponents, IUwsHttpServerOptions } from "./types";
import { WebSocketCallback } from "./ws";
import * as uwslib from "uWebSockets.js";
import { FullHttpServerComponent } from "./server";
import { IHttpServerComponent } from "@well-known-components/interfaces";
import { Emitter } from "mitt";
export type WsEvents = {
    open: any;
    message: ArrayBuffer;
    close: any;
    error: Error;
};
export type WsUserData = uwslib.WebSocket & Emitter<WsEvents> & {
    aborted: boolean;
    websocketConnect: WebSocketCallback;
    readyState: number;
    /** The connection is not yet open. */
    readonly CONNECTING: 0;
    /** The connection is open and ready to communicate. */
    readonly OPEN: 1;
    /** The connection is in the process of closing. */
    readonly CLOSING: 2;
    /** The connection is closed. */
    readonly CLOSED: 3;
};
/**
 * Creates a http-server component
 * @public
 */
export declare function createUwsHttpServer<Context extends object>(components: ServerComponents, options: Partial<IUwsHttpServerOptions>): Promise<FullHttpServerComponent<Context>>;
export declare function getRequestFromÂµws(request: uwslib.HttpRequest, response: uwslib.HttpResponse, host: string): IHttpServerComponent.IRequest;
