import { IBaseComponent, IConfigComponent, IHttpServerComponent, IMetricsComponent } from "@well-known-components/interfaces";
import { HttpMetrics, getDefaultHttpMetrics } from "./http";
import { createTestMetricsComponent } from "./base";
export { createTestMetricsComponent, getDefaultHttpMetrics };
/**
 * Metrics configuration prefix.
 * @public
 */
export declare const CONFIG_PREFIX: "WKC_METRICS";
/**
 * @internal
 */
export declare function _configKey(key: Uppercase<string>): string;
/**
 * @public
 */
export declare function createMetricsComponent<K extends string, V extends object = {}>(metricsDefinition: IMetricsComponent.MetricsRecordDefinition<K>, components: {
    config: IConfigComponent;
}): Promise<IMetricsComponent<K> & IBaseComponent>;
/**
 * Instruments an HTTP server with a IMetricsComponent created by this library
 *
 * @public
 */
export declare function instrumentHttpServerWithMetrics<K extends string>(components: {
    metrics: IMetricsComponent<K | HttpMetrics>;
    server: IHttpServerComponent<any>;
    config: IConfigComponent;
}): Promise<void>;
/**
 * This function only validates the types.
 * In the future it may perform real runtime assertions.
 *
 * @public
 */
export declare function validateMetricsDeclaration<T extends string>(metricsDefinition: IMetricsComponent.MetricsRecordDefinition<T>): IMetricsComponent.MetricsRecordDefinition<T>;
