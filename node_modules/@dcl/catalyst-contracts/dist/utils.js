"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllCatalystFromProvider = exports.catalystRegistryForProvider = exports.poiListForProvider = exports.nameDenylistForProvider = void 0;
const eth_connect_1 = __importStar(require("eth-connect"));
const CatalystAbi_1 = require("./CatalystAbi");
const ListAbi_1 = require("./ListAbi");
// eslint-disable-next-line
async function nameDenylistForProvider(ethereumProvider) {
    const rm = new eth_connect_1.default(ethereumProvider);
    const networkId = (await rm.net_version()).toString();
    if (!(networkId in ListAbi_1.denylistNamesDeployments))
        throw new Error(`There is no deployed NameDenylist contract for networkId=${networkId}`);
    const contractAddress = ListAbi_1.denylistNamesDeployments[networkId];
    return (await new eth_connect_1.ContractFactory(rm, ListAbi_1.listAbiItems).at(contractAddress));
}
exports.nameDenylistForProvider = nameDenylistForProvider;
// eslint-disable-next-line
async function poiListForProvider(ethereumProvider) {
    const rm = new eth_connect_1.default(ethereumProvider);
    const networkId = (await rm.net_version()).toString();
    if (!(networkId in ListAbi_1.poiDeployments))
        throw new Error(`There is no deployed PoiDenylist contract for networkId=${networkId}`);
    const contractAddress = ListAbi_1.poiDeployments[networkId];
    return (await new eth_connect_1.ContractFactory(rm, ListAbi_1.listAbiItems).at(contractAddress));
}
exports.poiListForProvider = poiListForProvider;
// eslint-disable-next-line
async function catalystRegistryForProvider(ethereumProvider) {
    const rm = new eth_connect_1.default(ethereumProvider);
    const networkId = (await rm.net_version()).toString();
    if (!(networkId in CatalystAbi_1.catalystDeployments))
        throw new Error(`There is no deployed CatalystProxy contract for networkId=${networkId}`);
    const contractAddress = CatalystAbi_1.catalystDeployments[networkId];
    return (await new eth_connect_1.ContractFactory(rm, CatalystAbi_1.catalystAbiItems).at(contractAddress));
}
exports.catalystRegistryForProvider = catalystRegistryForProvider;
/** Returns the catalyst list for a specified Ethereum Provider. */
async function getAllCatalystFromProvider(
// eslint-disable-next-line
etherumProvider) {
    const contract = await catalystRegistryForProvider(etherumProvider);
    const count = (await contract.catalystCount()).toNumber();
    const nodes = [];
    // Create an array with values from 0 to count - 1
    const indices = new Array(count).fill(0).map((_, i) => i);
    const dataPromises = indices.map((index) => contract.catalystIds(index).then((id) => contract.catalystById(id)));
    const data = await Promise.all(dataPromises);
    for (const node of data) {
        if (node.domain.startsWith('http://')) {
            console.warn(`Catalyst node domain using http protocol, skipping ${JSON.stringify(node)}`);
            continue;
        }
        if (!node.domain.startsWith('https://')) {
            node.domain = 'https://' + node.domain;
        }
        // trim url in case it starts/ends with a blank
        node.domain = node.domain.trim();
        nodes.push(node);
    }
    return nodes;
}
exports.getAllCatalystFromProvider = getAllCatalystFromProvider;
//# sourceMappingURL=utils.js.map