{"version":3,"sources":["modules/signature/actions.ts","modules/signature/reducer.ts","modules/authorization/actions.ts","modules/authorization/reducer.ts","modules/server/actions.ts","modules/server/reducer.ts","modules/acl/actions.ts","modules/acl/reducer.ts","reducer.ts","config/index.ts","modules/wallet/sagas.ts","modules/server/utils.ts","modules/signature/sagas.ts","modules/server/selectors.ts","contracts.ts","modules/authorization/utils.ts","modules/authorization/sagas.ts","modules/server/sagas.ts","modules/translation/sagas.ts","modules/nps/sagas.ts","modules/acl/utils.ts","modules/acl/sagas.ts","modules/signature/selectors.ts","components/Error.tsx","components/RenderWalletData/RenderWalletData.tsx","modules/land/utils.ts","components/IdentityPage/IdentityPage.container.tsx","components/Files/Files.tsx","components/IdentityPage/index.ts","components/IdentityPage/IdentityPage.tsx","modules/authorization/selectors.ts","components/Files/Files.container.tsx","components/Files/index.ts","components/Map/index.tsx","components/DeploySuccess/DeploySuccess.container.tsx","components/LinkerPage/LinkerPage.tsx","components/DeploySuccess/DeploySuccess.tsx","components/LinkerPage/LinkerPage.container.tsx","components/WorldACLPage/ACLStatus/types.ts","components/LinkerPage/index.ts","components/Root.tsx","modules/acl/selectors.ts","components/WorldACLPage/ACLStatus/ACLStatus.container.tsx","components/WorldACLPage/ACLStatus/index.ts","components/WorldACLPage/ACLStatus/ACLStatus.tsx","components/WorldACLPage/WorldACLPage.container.tsx","components/WorldACLPage/index.ts","components/WorldACLPage/WorldACLPage.tsx","index.tsx","store.ts","sagas.ts"],"names":["SIGN_CONTENT_REQUEST","SIGN_CONTENT_SUCCESS","SIGN_CONTENT_FAILURE","signContentFailure","error","action","CREATE_IDENTITY_REQUEST","CREATE_IDENTITY_SUCCESS","CREATE_IDENTITY_FAILURE","createIdentitySuccess","identity","createIdentityFailure","SIGN_WORLD_ACL_REQUEST","SIGN_WORLD_ACL_SUCCESS","SIGN_WORLD_ACL_FAILURE","INITIAL_STATE","data","loading","FETCH_AUTHORIZATIONS_REQUEST","FETCH_AUTHORIZATIONS_SUCCESS","FETCH_AUTHORIZATIONS_FAILURE","fetchAuthorizationsSuccess","authorizations","fetchAuthorizationsFailure","FETCH_FILES_REQUEST","FETCH_FILES_SUCCESS","FETCH_FILES_FAILURE","FETCH_INFO_REQUEST","FETCH_INFO_SUCCESS","FETCH_INFO_FAILURE","FETCH_CATALYST_REQUEST","FETCH_CATALYST_SUCCESS","FETCH_CATALYST_FAILURE","fetchFilesSuccess","files","fetchInfoSuccess","info","fetchCatalystRequest","undefined","catalyst","parseCoords","query","map","c","split","x","y","parseInt","FETCH_WORLD_ACL_REQUEST","FETCH_WORLD_ACL_SUCCESS","FETCH_WORLD_ACL_FAILURE","UPDATE_WORLD_ACL_REQUEST","UPDATE_WORLD_ACL_SUCCESS","UPDATE_WORLD_ACL_FAILURE","fetchWorldACLSuccess","acl","updateWorldACLRequest","signature","rootReducer","storageReducerWrapper","combineReducers","storage","wallet","transaction","translation","state","type","loadingReducer","payload","authorization","api","catalysts","length","baseParcel","parcels","rootCID","config","createConfig","dev","prod","walletSaga","fullWalletSaga","handleWallet","handleConnectWalletSuccess","baseWalletSaga","createWalletSaga","CHAIN_ID","get","ChainId","ETHEREUM_MAINNET","toString","all","takeEvery","CHANGE_NETWORK","CHANGE_ACCOUNT","CONNECT_WALLET_SUCCESS","call","window","location","reload","select","getAddress","address","put","owner","closeServer","ok","message","fetch","JSON","stringify","postDeploy","method","headers","body","getFilesRequest","json","getInfoRequest","getCatalystsPointer","signatureSaga","sign","handleSignContentRequest","handleSignContentSuccess","handleCreateIdentityRequest","handleCreateIdentitySuccess","handleSignWorldACLRequest","handleSignWorldACLSuccess","takeLatest","dataToSign","toUtf8Bytes","getConnectedProvider","provider","web3provider","Web3Provider","signer","getSigner","addr","send","hexlify","toLowerCase","signedMessage","getChainId","chainId","_action","createIdentity","responseType","ContractName","getFiles","getInfo","contractsByChainId","LANDRegistry","abi","ETHEREUM_GOERLI","EstateRegistry","getProvider","Error","getContract","name","contract","getContractByName","getNetwork","getLandContract","landRegistry","Contract","getEstateContract","estateRegistry","isAuthorized","unlockRegeneratorRuntime","land","encodeTokenId","landTokenId","isUpdateAuthorized","estate","getLandEstateId","estateTokenId","m","n","authorizationSaga","handleFetchAuthorizationsRequest","take","qs","URLSearchParams","document","search","promises","parcel","Promise","apiSaga","handleFetchFilesRequest","handleFetchInfoRequest","handleFetchCatalystRequest","value","translationSaga","createTranslationSaga","translations","npsSaga","windowWithNps","delightedNps4","survey","getWorldACL","targetContent","worldName","updateWorldACL","aclSaga","handleFetchWorldACLRequest","handleUpdateWorldACLRequest","getState","getData","createSelector","isLoading","React","memo","children","style","color","RenderWalletData","isConnected","isConnecting","onConnectWallet","scale","seed","tooltip","strong","filter","a","coordsToString","join","primary","onClick","disabled","Filter","IdentityPage","connect","getWallet","signed","getSignature","isSigning","isSigningTx","dispatch","providerType","enableWalletRequest","onRequestIdentity","props","useState","isModalOpen","setIsModalOpen","useEffect","className","e","preventDefault","open","onClose","onConnect","every","Files","Size","setFilter","useMemo","sort","b","size","basic","Header","Row","HeaderCell","text","direction","Menu","Object","values","f","Item","Body","index","Cell","Number","toFixed","LinkScenePage","find","coords","s","height","isDraggable","layers","Tab","status","onFetchCatalyst","entityIds","Set","entityId","deployedToAll","interval","setInterval","clearInterval","Color","SUNISH","url","timestamp","Date","toLocaleString","ACLStatus","LinkerPage","getAuthorizations","isAuthorizationLoading","onSignContent","cid","signContentRequest","onFetchFiles","onFetchInfo","Map","tab","setTab","isTestNet","deployUrl","leftMenu","Left","textAlign","title","description","focus","SUMMER_RED","SHADOWS","Right","ToastType","ERROR","isFullscreen","t","active","Root","has","getACLStatus","getACL","resource","allowed","includes","UPDATED","UPDATING","aclStatus","onFetchWorldACL","fetchWorldACLRequest","aclUpdated","Status","WorldACLPage","signWorldACLRequest","getChainName","router","createBrowserRouter","path","element","ReactDOM","render","store","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStorageMiddleware","storageKey","storageMiddleware","loadStorageMiddleware","sagasMiddleware","createSagasMiddleware","transactionMiddleware","createTransactionMiddleware","loggerMiddleware","createLogger","collapsed","predicate","_","enhancer","applyMiddleware","createStore","run","initStore","locales","keys","getElementById"],"mappings":"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","file":"static/js/main.75c03f30.chunk.js","sourcesContent":["import { AuthIdentity } from 'dcl-crypto'\nimport { action } from 'typesafe-actions'\n\nexport const SIGN_CONTENT_REQUEST = '[Request] Sign Content'\nexport const SIGN_CONTENT_SUCCESS = '[Success] Sign Content'\nexport const SIGN_CONTENT_FAILURE = '[Failure] Sign Content'\n\nexport const signContentRequest = (cid: string) =>\n  action(SIGN_CONTENT_REQUEST, cid)\nexport const signContentSuccess = (signature: string) =>\n  action(SIGN_CONTENT_SUCCESS, { signature })\nexport const signContentFailure = (error: string) =>\n  action(SIGN_CONTENT_FAILURE, { error })\n\nexport type SignContentRequestAction = ReturnType<typeof signContentRequest>\nexport type SignContentSuccessAction = ReturnType<typeof signContentSuccess>\nexport type SignContentFailureAction = ReturnType<typeof signContentFailure>\n\nexport const CREATE_IDENTITY_REQUEST = '[Request] Create Identity'\nexport const CREATE_IDENTITY_SUCCESS = '[Success] Create Identity'\nexport const CREATE_IDENTITY_FAILURE = '[Failure] Create Identity'\n\nexport const createIdentityRequest = () => action(CREATE_IDENTITY_REQUEST, {})\nexport const createIdentitySuccess = (identity: AuthIdentity) =>\n  action(CREATE_IDENTITY_SUCCESS, { identity })\nexport const createIdentityFailure = (error: string) =>\n  action(CREATE_IDENTITY_FAILURE, { error })\n\nexport type CreateIdentityRequestAction = ReturnType<\n  typeof createIdentityRequest\n>\nexport type CreateIdentitySuccessAction = ReturnType<\n  typeof createIdentitySuccess\n>\nexport type CreateIdentityFailureAction = ReturnType<\n  typeof createIdentityFailure\n>\n\nexport const SIGN_WORLD_ACL_REQUEST = '[Request] Sign World ACL'\nexport const SIGN_WORLD_ACL_SUCCESS = '[Success] Sign World ACL'\nexport const SIGN_WORLD_ACL_FAILURE = '[Failure] Sign World ACL'\n\nexport const signWorldACLRequest = (payload: string) =>\n  action(SIGN_WORLD_ACL_REQUEST, payload)\nexport const signWorldACLSuccess = (signature: string) =>\n  action(SIGN_WORLD_ACL_SUCCESS, { signature })\nexport const signWorldACLFailure = (error: string) =>\n  action(SIGN_WORLD_ACL_FAILURE, { error })\n\nexport type SignWorldACLRequestAction = ReturnType<typeof signWorldACLRequest>\nexport type SignWorldACLSuccessAction = ReturnType<typeof signWorldACLSuccess>\nexport type SignWorldACLFailureAction = ReturnType<typeof signWorldACLFailure>\n","import { AuthIdentity } from 'dcl-crypto'\nimport {\n  loadingReducer,\n  LoadingState,\n} from 'decentraland-dapps/dist/modules/loading/reducer'\n\nimport {\n  SignContentRequestAction,\n  SignContentSuccessAction,\n  SignContentFailureAction,\n  SIGN_CONTENT_REQUEST,\n  SIGN_CONTENT_SUCCESS,\n  SIGN_CONTENT_FAILURE,\n  CreateIdentityRequestAction,\n  CreateIdentitySuccessAction,\n  CreateIdentityFailureAction,\n  CREATE_IDENTITY_REQUEST,\n  CREATE_IDENTITY_SUCCESS,\n  CREATE_IDENTITY_FAILURE,\n  SignWorldACLRequestAction,\n  SignWorldACLSuccessAction,\n  SignWorldACLFailureAction,\n  SIGN_WORLD_ACL_REQUEST,\n  SIGN_WORLD_ACL_SUCCESS,\n  SIGN_WORLD_ACL_FAILURE,\n} from './actions'\n\nexport type SignatureState = {\n  data: any\n  identity: AuthIdentity | null\n  loading: LoadingState\n  error: string | null\n}\n\nexport const INITIAL_STATE: SignatureState = {\n  data: '',\n  loading: [],\n  identity: null,\n  error: null,\n}\n\nexport type SignatureReducerAction =\n  | SignContentRequestAction\n  | SignContentSuccessAction\n  | SignContentFailureAction\n  | CreateIdentityRequestAction\n  | CreateIdentitySuccessAction\n  | CreateIdentityFailureAction\n  | SignWorldACLRequestAction\n  | SignWorldACLSuccessAction\n  | SignWorldACLFailureAction\n\nexport const signatureReducer = (\n  state = INITIAL_STATE,\n  action: SignatureReducerAction\n): SignatureState => {\n  switch (action.type) {\n    case SIGN_CONTENT_REQUEST:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n      }\n    case SIGN_CONTENT_SUCCESS:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        data: action.payload.signature,\n        error: null,\n      }\n    case SIGN_CONTENT_FAILURE:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        error: action.payload.error,\n      }\n    case CREATE_IDENTITY_REQUEST:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n      }\n    case CREATE_IDENTITY_SUCCESS:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        identity: action.payload.identity,\n        error: null,\n      }\n    case CREATE_IDENTITY_FAILURE:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        error: action.payload.error,\n      }\n    case SIGN_WORLD_ACL_REQUEST:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n      }\n    case SIGN_WORLD_ACL_SUCCESS:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        data: action.payload.signature,\n        error: null,\n      }\n    case SIGN_WORLD_ACL_FAILURE:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        error: action.payload.error,\n      }\n    default: {\n      return state\n    }\n  }\n}\n","import { action } from 'typesafe-actions'\nimport { Authorization } from './types'\n\nexport const FETCH_AUTHORIZATIONS_REQUEST = '[Request] Fetch LAND Authorizations'\nexport const FETCH_AUTHORIZATIONS_SUCCESS = '[Success] Fetch LAND Authorizations'\nexport const FETCH_AUTHORIZATIONS_FAILURE = '[Failure] Fetch LAND Authorizations'\n\nexport const fetchAuthorizationsRequest = (owner: string) => action(FETCH_AUTHORIZATIONS_REQUEST, { owner })\n\nexport const fetchAuthorizationsSuccess = (authorizations: Authorization[]) =>\n  action(FETCH_AUTHORIZATIONS_SUCCESS, { authorizations })\n\nexport const fetchAuthorizationsFailure = (error: string) => action(FETCH_AUTHORIZATIONS_FAILURE, { error })\n\nexport type FetchAuthorizationsRequestAction = ReturnType<typeof fetchAuthorizationsRequest>\nexport type FetchAuthorizationsSuccessAction = ReturnType<typeof fetchAuthorizationsSuccess>\nexport type FetchAuthorizationsFailureAction = ReturnType<typeof fetchAuthorizationsFailure>\n","import {\n  loadingReducer,\n  LoadingState,\n} from 'decentraland-dapps/dist/modules/loading/reducer'\n\nimport {\n  FetchAuthorizationsRequestAction,\n  FetchAuthorizationsSuccessAction,\n  FetchAuthorizationsFailureAction,\n  FETCH_AUTHORIZATIONS_REQUEST,\n  FETCH_AUTHORIZATIONS_SUCCESS,\n  FETCH_AUTHORIZATIONS_FAILURE,\n} from './actions'\n\nexport type AuthorizationState = {\n  data: any\n  loading: LoadingState\n  error: string | null\n}\n\nexport const INITIAL_STATE: AuthorizationState = {\n  data: [],\n  loading: [],\n  error: null,\n}\n\nexport type AuthorizationReducerAction =\n  | FetchAuthorizationsRequestAction\n  | FetchAuthorizationsSuccessAction\n  | FetchAuthorizationsFailureAction\n\nexport const authorizationReducer = (\n  state = INITIAL_STATE,\n  action: AuthorizationReducerAction\n): AuthorizationState => {\n  switch (action.type) {\n    case FETCH_AUTHORIZATIONS_REQUEST:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n      }\n    case FETCH_AUTHORIZATIONS_SUCCESS:\n      return {\n        loading: loadingReducer(state.loading, action),\n        data: action.payload.authorizations,\n        error: null,\n      }\n    case FETCH_AUTHORIZATIONS_FAILURE:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        error: action.payload.error,\n      }\n    default: {\n      return state\n    }\n  }\n}\n","import { action } from 'typesafe-actions'\nimport { CatalystResponse, FileSize } from './reducer'\nimport { InfoResponse } from './types'\n\nexport const FETCH_FILES_REQUEST = '[Request] Fetch Files'\nexport const FETCH_FILES_SUCCESS = '[Success] Fetch Files'\nexport const FETCH_FILES_FAILURE = '[Failure] Fetch Files'\n\nexport const FETCH_INFO_REQUEST = '[Request] Fetch info'\nexport const FETCH_INFO_SUCCESS = '[Success] Fetch info'\nexport const FETCH_INFO_FAILURE = '[Failure] Fetch info'\n\nexport const FETCH_CATALYST_REQUEST = '[Request] Fetch catalyst'\nexport const FETCH_CATALYST_SUCCESS = '[Success] Fetch catalyst'\nexport const FETCH_CATALYST_FAILURE = '[Failure] Fetch catalyst'\n\nexport const fetchFilesRequest = () => action(FETCH_FILES_REQUEST)\nexport const fetchFilesSuccess = (files: FileSize[]) =>\n  action(FETCH_FILES_SUCCESS, { files })\nexport const fetchFilesFailure = (error: string) =>\n  action(FETCH_FILES_FAILURE, { error })\n\nexport const fetchInfoRequest = () => action(FETCH_INFO_REQUEST)\nexport const fetchInfoSuccess = (info: InfoResponse) =>\n  action(FETCH_INFO_SUCCESS, { info })\nexport const fetchInfoFailure = (error: string) =>\n  action(FETCH_INFO_FAILURE, { error })\n\nexport const fetchCatalystRequest = () => action(FETCH_CATALYST_REQUEST)\nexport const fetchCatalystSuccess = (payload: CatalystResponse) =>\n  action(FETCH_CATALYST_SUCCESS, payload)\nexport const fetchCatalystFailure = (error: string) =>\n  action(FETCH_CATALYST_FAILURE, { error })\n\nexport type FetchFilesRequestAction = ReturnType<typeof fetchFilesRequest>\nexport type FetchFilesSuccessAction = ReturnType<typeof fetchFilesSuccess>\nexport type FetchFilesFailureAction = ReturnType<typeof fetchFilesFailure>\n\nexport type FetchInfoRequestAction = ReturnType<typeof fetchInfoRequest>\nexport type FetchInfoSuccessAction = ReturnType<typeof fetchInfoSuccess>\nexport type FetchInfoFailureAction = ReturnType<typeof fetchInfoFailure>\n\nexport type FetchCatalystRequest = ReturnType<typeof fetchCatalystRequest>\nexport type FetchCatalystSuccess = ReturnType<typeof fetchCatalystSuccess>\nexport type FetchCatalystFailure = ReturnType<typeof fetchCatalystFailure>\n","import {\n  loadingReducer,\n  LoadingState,\n} from 'decentraland-dapps/dist/modules/loading/reducer'\nimport { Coords } from '../land/types'\n\nimport {\n  FetchFilesRequestAction,\n  FetchFilesSuccessAction,\n  FetchFilesFailureAction,\n  FETCH_FILES_REQUEST,\n  FETCH_FILES_SUCCESS,\n  FETCH_FILES_FAILURE,\n  FETCH_INFO_REQUEST,\n  FETCH_INFO_FAILURE,\n  FETCH_INFO_SUCCESS,\n  FetchInfoRequestAction,\n  FetchInfoSuccessAction,\n  FetchInfoFailureAction,\n  FetchCatalystFailure,\n  FetchCatalystRequest,\n  FetchCatalystSuccess,\n  FETCH_CATALYST_REQUEST,\n  FETCH_CATALYST_SUCCESS,\n  FETCH_CATALYST_FAILURE,\n} from './actions'\n\nexport type Info = {\n  rootCID: string\n  debug: boolean\n  estateRegistry?: string\n  landRegistry?: string\n  title?: string\n  description?: string\n  baseParcel: Coords\n  parcels: Coords[]\n}\n\nexport type FileSize = {\n  name: string\n  size: string\n}\n\nexport type CatalystResponse = {\n  catalysts: {\n    url: string\n    timestamp: number\n    entityId: string\n  }[]\n  status: 'deploying' | 'success' | 'closed'\n}\n\nexport type ApiState = {\n  files: FileSize[]\n  loading: LoadingState\n  error: string | null\n  catalyst: CatalystResponse | undefined\n  info: Info | undefined\n}\n\nexport const INITIAL_STATE: ApiState = {\n  info: undefined,\n  files: [],\n  loading: [],\n  error: null,\n  catalyst: undefined,\n}\n\nexport type ApiReducerAction =\n  | FetchFilesRequestAction\n  | FetchFilesSuccessAction\n  | FetchFilesFailureAction\n  | FetchInfoRequestAction\n  | FetchInfoSuccessAction\n  | FetchInfoFailureAction\n  | FetchCatalystFailure\n  | FetchCatalystRequest\n  | FetchCatalystSuccess\n\nexport const apiReducer = (\n  state = INITIAL_STATE,\n  action: ApiReducerAction\n): ApiState => {\n  switch (action.type) {\n    case FETCH_FILES_REQUEST:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n      }\n    case FETCH_FILES_SUCCESS:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        files: action.payload.files,\n        error: null,\n      }\n    case FETCH_FILES_FAILURE:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        error: action.payload.error,\n        files: [],\n      }\n    case FETCH_CATALYST_REQUEST:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n      }\n    case FETCH_CATALYST_SUCCESS:\n      if (!action.payload.catalysts.length) {\n        return state\n      }\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        catalyst: action.payload,\n        error: null,\n      }\n    case FETCH_CATALYST_FAILURE:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        error: action.payload.error,\n        catalyst: undefined,\n      }\n    case FETCH_INFO_REQUEST:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n      }\n    case FETCH_INFO_SUCCESS:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        info: {\n          ...action.payload.info,\n          baseParcel: parseCoords(action.payload.info.baseParcel)[0],\n          parcels: parseCoords(action.payload.info.parcels),\n          rootCID:\n            action.payload.info.rootCID ||\n            'QmPjpPyibbryTCi75zzcdeuPUBcujtEqj43shwKBAdMojy',\n        },\n        error: null,\n      }\n    case FETCH_INFO_FAILURE:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        error: action.payload.error,\n        info: undefined,\n      }\n    default: {\n      return state\n    }\n  }\n}\n\nfunction parseCoords(query: string | string[] | null): Coords[] {\n  if (!query) return [{ x: 0, y: 0 }]\n  const coords = typeof query === 'string' ? [query] : query\n  return coords.map((c) => {\n    const [x, y] = c.split(',')\n    return { x: parseInt(x, 10), y: parseInt(y, 10) }\n  })\n}\n","import { action } from 'typesafe-actions'\nimport { ACLResponse } from './reducer'\nimport { InfoResponse } from './types'\n\nexport const FETCH_INFO_REQUEST = '[Request] Fetch World ACL info'\nexport const FETCH_INFO_SUCCESS = '[Success] Fetch World ACL info'\nexport const FETCH_INFO_FAILURE = '[Failure] Fetch World ACL info'\n\nexport const FETCH_WORLD_ACL_REQUEST = '[Request] Fetch World ACL'\nexport const FETCH_WORLD_ACL_SUCCESS = '[Success] Fetch World ACL'\nexport const FETCH_WORLD_ACL_FAILURE = '[Failure] Fetch World ACL'\n\nexport const UPDATE_WORLD_ACL_REQUEST = '[Request] Update World ACL'\nexport const UPDATE_WORLD_ACL_SUCCESS = '[Success] Update World ACL'\nexport const UPDATE_WORLD_ACL_FAILURE = '[Failure] Update World ACL'\n\nexport const fetchInfoRequest = () => action(FETCH_INFO_REQUEST)\nexport const fetchInfoSuccess = (info: InfoResponse) =>\n  action(FETCH_INFO_SUCCESS, { info })\nexport const fetchInfoFailure = (error: string) =>\n  action(FETCH_INFO_FAILURE, { error })\n\nexport const fetchWorldACLRequest = (targetContent: string, worldName: string) =>\n  action(FETCH_WORLD_ACL_REQUEST, { targetContent, worldName })\nexport const fetchWorldACLSuccess = (acl: ACLResponse) =>\n  action(FETCH_WORLD_ACL_SUCCESS, { acl })\nexport const fetchWorldACLFailure = (error: string) =>\n  action(FETCH_WORLD_ACL_FAILURE, { error })\n\nexport const updateWorldACLRequest = (signature: string) =>\n  action(UPDATE_WORLD_ACL_REQUEST, { signature })\nexport const updateWorldACLSuccess = () => action(UPDATE_WORLD_ACL_SUCCESS)\nexport const updateWorldACLFailure = (error: string) =>\n  action(UPDATE_WORLD_ACL_FAILURE, { error })\n\nexport type FetchInfoRequestAction = ReturnType<typeof fetchInfoRequest>\nexport type FetchInfoSuccessAction = ReturnType<typeof fetchInfoSuccess>\nexport type FetchInfoFailureAction = ReturnType<typeof fetchInfoFailure>\n\nexport type FetchWorldACLRequestAction = ReturnType<typeof fetchWorldACLRequest>\nexport type FetchWorldACLSuccessAction = ReturnType<typeof fetchWorldACLSuccess>\nexport type FetchWorldACLFailureAction = ReturnType<typeof fetchWorldACLFailure>\n\nexport type UpdateWorldACLRequestAction = ReturnType<\n  typeof updateWorldACLRequest\n>\nexport type UpdateWorldACLSuccessAction = ReturnType<\n  typeof updateWorldACLSuccess\n>\nexport type UpdateWorldACLFailureAction = ReturnType<\n  typeof updateWorldACLFailure\n>\n","import {\n  loadingReducer,\n  LoadingState,\n} from 'decentraland-dapps/dist/modules/loading/reducer'\nimport {\n  FETCH_INFO_REQUEST,\n  FETCH_INFO_FAILURE,\n  FETCH_INFO_SUCCESS,\n  FetchInfoRequestAction,\n  FetchInfoSuccessAction,\n  FetchInfoFailureAction,\n  FetchWorldACLFailureAction,\n  FetchWorldACLRequestAction,\n  FetchWorldACLSuccessAction,\n  FETCH_WORLD_ACL_REQUEST,\n  FETCH_WORLD_ACL_SUCCESS,\n  FETCH_WORLD_ACL_FAILURE,\n  UpdateWorldACLFailureAction,\n  UpdateWorldACLRequestAction,\n  UpdateWorldACLSuccessAction,\n  UPDATE_WORLD_ACL_FAILURE,\n  UPDATE_WORLD_ACL_REQUEST,\n  UPDATE_WORLD_ACL_SUCCESS,\n} from './actions'\nimport { InfoResponse } from './types'\n\nexport type ACLResponse = {\n  resource: string\n  allowed: string[]\n}\n\nexport type ACLState = {\n  loading: LoadingState\n  error: string | null\n  info: InfoResponse | undefined\n  acl: ACLResponse | undefined\n}\n\nexport const INITIAL_STATE: ACLState = {\n  info: undefined,\n  acl: undefined,\n  loading: [],\n  error: null,\n}\n\nexport type ApiReducerAction =\n  | FetchInfoRequestAction\n  | FetchInfoSuccessAction\n  | FetchInfoFailureAction\n  | FetchWorldACLFailureAction\n  | FetchWorldACLRequestAction\n  | FetchWorldACLSuccessAction\n  | UpdateWorldACLFailureAction\n  | UpdateWorldACLRequestAction\n  | UpdateWorldACLSuccessAction\n\nexport const aclReducer = (\n  state = INITIAL_STATE,\n  action: ApiReducerAction\n): ACLState => {\n  switch (action.type) {\n    case FETCH_INFO_REQUEST:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n      }\n    case FETCH_INFO_SUCCESS:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        info: action.payload.info,\n        error: null,\n      }\n    case FETCH_INFO_FAILURE:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        error: action.payload.error,\n        info: undefined,\n      }\n    case FETCH_WORLD_ACL_REQUEST:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n      }\n    case FETCH_WORLD_ACL_SUCCESS:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        acl: action.payload.acl,\n        error: null,\n      }\n    case FETCH_WORLD_ACL_FAILURE:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        error: action.payload.error,\n        acl: undefined,\n      }\n    case UPDATE_WORLD_ACL_REQUEST:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n      }\n    case UPDATE_WORLD_ACL_SUCCESS:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        error: null,\n      }\n    case UPDATE_WORLD_ACL_FAILURE:\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        error: action.payload.error,\n      }\n    default: {\n      return state\n    }\n  }\n}\n","import { combineReducers } from 'redux'\nimport { walletReducer as wallet } from 'decentraland-dapps/dist/modules/wallet/reducer'\nimport { transactionReducer as transaction } from 'decentraland-dapps/dist/modules/transaction/reducer'\nimport { translationReducer as translation } from 'decentraland-dapps/dist/modules/translation/reducer'\nimport {\n  storageReducer as storage,\n  storageReducerWrapper,\n} from 'decentraland-dapps/dist/modules/storage/reducer'\n\nimport { signatureReducer as signature } from './modules/signature/reducer'\nimport { authorizationReducer as authorization } from './modules/authorization/reducer'\nimport { apiReducer as api } from './modules/server/reducer'\nimport { aclReducer as acl } from './modules/acl/reducer'\nimport { RootState } from './types'\n\nexport const rootReducer = storageReducerWrapper(\n  combineReducers<RootState>({\n    storage,\n    wallet,\n    transaction,\n    translation,\n    signature,\n    authorization,\n    api,\n    acl,\n  })\n)\n","import { createConfig } from '@dcl/ui-env'\nimport dev from './env/dev.json'\nimport prod from './env/prod.json'\n\nexport const config = createConfig({\n  dev,\n  prod\n})","import { takeEvery, all, call, select, put } from 'redux-saga/effects'\nimport { ChainId } from '@dcl/schemas'\nimport { createWalletSaga } from 'decentraland-dapps/dist/modules/wallet/sagas'\nimport {\n  CHANGE_NETWORK,\n  CHANGE_ACCOUNT,\n  CONNECT_WALLET_SUCCESS,\n} from 'decentraland-dapps/dist/modules/wallet/actions'\nimport { getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport { config } from '../../config'\nimport { fetchAuthorizationsRequest } from '../authorization/actions'\n\nexport function* walletSaga() {\n  const baseWalletSaga = createWalletSaga({\n    CHAIN_ID: config.get('CHAIN_ID', ChainId.ETHEREUM_MAINNET.toString()),\n  })\n  yield all([baseWalletSaga(), fullWalletSaga()])\n}\n\nfunction* fullWalletSaga() {\n  yield takeEvery(CHANGE_NETWORK, handleWallet)\n  yield takeEvery(CHANGE_ACCOUNT, handleWallet)\n  yield takeEvery(CONNECT_WALLET_SUCCESS, handleConnectWalletSuccess)\n}\n\nfunction* handleWallet() {\n  yield call(() => window.location.reload())\n}\n\nfunction* handleConnectWalletSuccess() {\n  const address: string = yield select(getAddress)\n  yield put(fetchAuthorizationsRequest(address))\n}\n","import { ChainId } from '@dcl/schemas'\nimport { AuthIdentity } from 'dcl-crypto'\nimport { InfoResponse } from './types'\n\nexport type DeployScene =\n  | {\n      address: string\n      signature: string\n      chainId: ChainId\n    }\n  | Record<string, never>\n\nexport type LinkerResponseIdentity = {\n  responseType: 'identity'\n  payload: {\n    address: string\n    chainId: ChainId\n    identity: AuthIdentity\n  }\n}\n\nexport async function closeServer(\n  ok: boolean,\n  message: LinkerResponseIdentity\n): Promise<void> {\n  await fetch(`/api/close?ok=${ok}&reason=${JSON.stringify(message)}`)\n}\n\nexport async function postDeploy(payload: DeployScene): Promise<void> {\n  await fetch(`/api/deploy`, {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(payload),\n  })\n}\n\nexport async function getFilesRequest(): Promise<void> {\n  return (await fetch(`/api/files`)).json()\n}\n\nexport async function getInfoRequest(): Promise<InfoResponse> {\n  return (await fetch(`/api/info`)).json()\n}\n\nexport async function getCatalystsPointer(): Promise<void> {\n  return (await fetch(`/api/catalyst-pointers`)).json()\n}\n","import { call, put, takeLatest, takeEvery, select } from 'redux-saga/effects'\nimport { Web3Provider } from '@ethersproject/providers'\nimport { toUtf8Bytes } from '@ethersproject/strings'\nimport { hexlify } from '@ethersproject/bytes'\nimport { getConnectedProvider } from 'decentraland-dapps/dist/lib/eth'\nimport {\n  getAddress,\n  getChainId,\n} from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport { Provider } from 'decentraland-connect/dist'\nimport { AuthIdentity } from 'dcl-crypto'\nimport { createIdentity } from '@dcl/builder-client'\nimport { ChainId } from '@dcl/schemas'\nimport { closeServer, postDeploy } from '../server/utils'\nimport { fetchCatalystRequest } from '../server/actions'\nimport {\n  SIGN_CONTENT_REQUEST,\n  SIGN_CONTENT_SUCCESS,\n  SignContentRequestAction,\n  signContentSuccess,\n  signContentFailure,\n  SignContentSuccessAction,\n  CREATE_IDENTITY_REQUEST,\n  createIdentitySuccess,\n  createIdentityFailure,\n  CREATE_IDENTITY_SUCCESS,\n  CreateIdentitySuccessAction,\n  SignWorldACLRequestAction,\n  SignWorldACLSuccessAction,\n  SIGN_WORLD_ACL_REQUEST,\n  SIGN_WORLD_ACL_SUCCESS,\n  signWorldACLSuccess,\n  signWorldACLFailure,\n  CreateIdentityRequestAction,\n} from './actions'\nimport { updateWorldACLRequest } from '../acl/actions'\n\nexport function* signatureSaga() {\n  yield takeLatest(SIGN_CONTENT_REQUEST, handleSignContentRequest)\n  yield takeEvery(SIGN_CONTENT_SUCCESS, handleSignContentSuccess)\n\n  yield takeLatest(CREATE_IDENTITY_REQUEST, handleCreateIdentityRequest)\n  yield takeLatest(CREATE_IDENTITY_SUCCESS, handleCreateIdentitySuccess)\n\n  yield takeLatest(SIGN_WORLD_ACL_REQUEST, handleSignWorldACLRequest)\n  yield takeEvery(SIGN_WORLD_ACL_SUCCESS, handleSignWorldACLSuccess)\n}\n\nfunction* sign(action: SignContentRequestAction | SignWorldACLRequestAction) {\n  const dataToSign = toUtf8Bytes(action.payload)\n\n  const provider: Provider = yield call(() => getConnectedProvider())\n  const web3provider = new Web3Provider(provider)\n  const signer = web3provider.getSigner()\n\n  const addr: string = yield call(() => signer.getAddress())\n\n  const signedMessage: string = yield call(() =>\n    provider.send('personal_sign', [hexlify(dataToSign), addr.toLowerCase()])\n  )\n  return signedMessage\n}\n\nfunction* handleSignContentRequest(action: SignContentRequestAction) {\n  try {\n    const signedMessage: string = yield call(sign, action)\n    yield put(signContentSuccess(signedMessage))\n  } catch (error) {\n    yield put(signContentFailure((error as Error).message))\n  }\n}\n\nfunction* handleSignContentSuccess(action: SignContentSuccessAction) {\n  const address: string = yield select(getAddress)\n  const chainId: ChainId = yield select(getChainId)\n  const { signature } = action.payload\n\n  try {\n    yield call(postDeploy, { signature, address, chainId })\n  } catch (error) {\n    yield put(signContentFailure((error as Error).message))\n  }\n}\n\nfunction* handleCreateIdentityRequest(_action: CreateIdentityRequestAction) {\n  try {\n    const provider: Provider = yield call(() => getConnectedProvider())\n    const web3provider = new Web3Provider(provider)\n    const signer = web3provider.getSigner()\n    const identity: AuthIdentity = yield call(() =>\n      createIdentity(signer, 1000)\n    )\n    yield put(createIdentitySuccess(identity))\n    yield put(fetchCatalystRequest())\n  } catch (error) {\n    yield put(createIdentityFailure((error as Error).message))\n  }\n}\n\nfunction* handleCreateIdentitySuccess(action: CreateIdentitySuccessAction) {\n  const { identity } = action.payload\n  const address: string = yield select(getAddress)\n  const chainId: ChainId = yield select(getChainId)\n\n  try {\n    yield call(closeServer, true, {\n      responseType: 'identity',\n      payload: { identity, address, chainId },\n    })\n  } catch (error) {\n    yield put(createIdentityFailure((error as Error).message))\n  }\n}\n\nfunction* handleSignWorldACLRequest(action: SignWorldACLRequestAction) {\n  try {\n    const signedMessage: string = yield call(sign, action)\n    yield put(signWorldACLSuccess(signedMessage))\n  } catch (error) {\n    yield put(signWorldACLFailure((error as Error).message))\n  }\n}\n\nfunction* handleSignWorldACLSuccess(action: SignWorldACLSuccessAction) {\n  const { signature } = action.payload\n  yield put(updateWorldACLRequest(signature))\n}\n","import { RootState } from '../../types'\n\nexport const getFiles = (state: RootState) => state.api.files\nexport const isLoading = (state: RootState) => !!state.api.loading.length\nexport const getError = (state: RootState) => state.api.error\nexport const getInfo = (state: RootState) => state.api.info\n","import { Contract } from '@ethersproject/contracts'\nimport { Web3Provider } from '@ethersproject/providers'\nimport { ChainId } from '@dcl/schemas'\nimport { getConnectedProvider } from 'decentraland-dapps/dist/lib/eth'\n\nimport * as EstateRegistry from './abis/EstateRegistry.json'\nimport * as LANDRegistry from './abis/LANDRegistry.json'\n\nexport enum ContractName {\n  LANDRegistry = 'land',\n  EstateRegistry = 'estate'\n}\n\nconst contractsByChainId: Record<ContractName, Partial<Record<ChainId, { abi: any[], address: string }>>> = {\n  [ContractName.LANDRegistry]: {\n    [ChainId.ETHEREUM_MAINNET]: {\n      address: '0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d',\n      abi: LANDRegistry.abi\n    },\n    [ChainId.ETHEREUM_GOERLI]: {\n      address: '0x25b6B4bac4aDB582a0ABd475439dA6730777Fbf7',\n      abi: LANDRegistry.abi\n    },\n  },\n  [ContractName.EstateRegistry]: {\n    [ChainId.ETHEREUM_MAINNET]: {\n      address: '0x959e104e1a4db6317fa58f8295f586e1a978c297',\n      abi: EstateRegistry.abi\n    },\n    [ChainId.ETHEREUM_GOERLI]: {\n      address: '0xC9A46712E6913c24d15b46fF12221a79c4e251DC',\n      abi: EstateRegistry.abi\n    }\n  }\n}\n\nexport async function getProvider() {\n  const provider = await getConnectedProvider()\n  if (!provider) {\n    throw new Error('no provider')\n  }\n  return new Web3Provider(provider)\n}\n\nexport function getContract(name: ContractName, chainId: ChainId) {\n  const contract = contractsByChainId[name][chainId]\n  if (!contract) {\n    throw new Error(`Contract \"${name}\" not found for chain id \"${chainId}\"`)\n  }\n  return contract\n}\n\nexport async function getContractByName(name: ContractName) {\n  const provider = await getProvider()\n  const { chainId } = await provider.getNetwork()\n  return getContract(name, chainId)\n}\n\nexport async function getLandContract(landRegistry?: string) {\n  const { address, abi } = await getContractByName(ContractName.LANDRegistry)\n  const provider = await getProvider()\n  const contract = new Contract(landRegistry || address, abi, provider)\n  return contract\n}\n\nexport async function getEstateContract(estateRegistry?: string) {\n  const { address, abi } = await getContractByName(ContractName.EstateRegistry)\n  return new Contract(estateRegistry || address, abi, await getProvider())\n}\n","import { getEstateContract, getLandContract } from \"../../contracts\"\nimport { BigNumber } from \"ethers\"\n\nexport async function isAuthorized(x: number, y: number, address: string, landRegistry?: string, estateRegistry?: string) {\n  // Do not delete me\n  await unlockRegeneratorRuntime()\n\n  const land = await getLandContract(landRegistry)\n  const landTokenId: BigNumber = await land.encodeTokenId(x, y)\n  const isUpdateAuthorized = await land.isUpdateAuthorized(address, landTokenId)\n  \n  if (!isUpdateAuthorized) {\n    // check if estate is authorized\n    const estate = await getEstateContract(estateRegistry)\n    const estateTokenId = await estate.getLandEstateId(landTokenId)\n    if (estateTokenId && estateTokenId > 0) {\n      const isUpdateAuthorized = await estate.isUpdateAuthorized(address, estateTokenId)\n      return { x, y, isUpdateAuthorized }\n    } \n  }\n  return { x, y, isUpdateAuthorized }\n}\n\nasync function unlockRegeneratorRuntime() {\n  // For some reason, without these awaits, the ones below never resolve. They don't throw either, they just get stuck...\n  \n  // BEGIN DRAGONS 🐉\n  const m = async (n: number) => n\n  await m(1)\n  await m(2)\n  await m(3)\n  await m(4)\n  // END DRAGONS 🐉\n}","import { call, put, takeEvery, select, take } from 'redux-saga/effects'\nimport { getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport {\n  FETCH_AUTHORIZATIONS_REQUEST,\n  fetchAuthorizationsFailure,\n  fetchAuthorizationsSuccess,\n} from './actions'\nimport { Authorization } from './types'\nimport { Info } from '../server/reducer'\nimport { FETCH_INFO_SUCCESS } from '../server/actions'\nimport { getInfo } from '../server/selectors'\nimport { isAuthorized } from './utils'\n\nexport function* authorizationSaga() {\n  yield takeEvery(\n    FETCH_AUTHORIZATIONS_REQUEST,\n    handleFetchAuthorizationsRequest\n  )\n}\n\nfunction* handleFetchAuthorizationsRequest() {\n  const info: Info = yield select(getInfo)\n\n  if (!info) {\n    yield take(FETCH_INFO_SUCCESS)\n  }\n\n  const qs = new URLSearchParams(document.location.search)\n\n  const skipValidations = qs.get('skipValidations')\n  if (skipValidations === 'true') {\n    try {\n      const { parcels } = info\n      yield put(\n        fetchAuthorizationsSuccess(\n          parcels.map(({ x, y }) => ({\n            x,\n            y,\n            isUpdateAuthorized: true,\n          }))\n        )\n      )\n    } catch (error) {\n      yield put(fetchAuthorizationsFailure((error as Error).message))\n    }\n  } else {\n    const { parcels, landRegistry, estateRegistry } = info\n\n    try {\n      const address: string = yield select(getAddress)\n      const promises: Promise<Authorization>[] = parcels.map((parcel) =>\n        isAuthorized(parcel.x, parcel.y, address, landRegistry, estateRegistry)\n      )\n      const authorizations: Authorization[] = yield call(() =>\n        Promise.all(promises)\n      )\n      yield put(fetchAuthorizationsSuccess(authorizations))\n    } catch (error) {\n      yield put(fetchAuthorizationsFailure((error as Error).message))\n    }\n  }\n}\n","import { takeEvery, call, put } from 'redux-saga/effects'\n\nimport {\n  fetchCatalystFailure,\n  fetchCatalystSuccess,\n  fetchFilesFailure,\n  fetchFilesSuccess,\n  fetchInfoFailure,\n  fetchInfoSuccess,\n  FETCH_CATALYST_REQUEST,\n  FETCH_FILES_REQUEST,\n  FETCH_INFO_REQUEST,\n} from './actions'\nimport { CatalystResponse, FileSize } from './reducer'\nimport { InfoResponse } from './types'\nimport { getCatalystsPointer, getFilesRequest, getInfoRequest } from './utils'\n\nexport function* apiSaga() {\n  yield takeEvery(FETCH_FILES_REQUEST, handleFetchFilesRequest)\n  yield takeEvery(FETCH_INFO_REQUEST, handleFetchInfoRequest)\n  yield takeEvery(FETCH_CATALYST_REQUEST, handleFetchCatalystRequest)\n}\n\nfunction* handleFetchFilesRequest() {\n  try {\n    const files: FileSize[] = yield call(getFilesRequest)\n    yield put(fetchFilesSuccess(files))\n  } catch (e) {\n    yield put(fetchFilesFailure((e as any).message))\n  }\n}\n\nfunction* handleFetchInfoRequest() {\n  try {\n    const info: InfoResponse = yield call(getInfoRequest)\n    yield put(fetchInfoSuccess(info))\n  } catch (e) {\n    yield put(fetchInfoFailure((e as any).message))\n  }\n}\n\nfunction* handleFetchCatalystRequest() {\n  try {\n    const value: CatalystResponse = yield call(getCatalystsPointer)\n    yield put(fetchCatalystSuccess(value))\n  } catch (e) {\n    yield put(fetchCatalystFailure((e as any).message))\n  }\n}\n","import { createTranslationSaga } from 'decentraland-dapps/dist/modules/translation/sagas'\nimport * as translations from './locales'\n\nexport const translationSaga = createTranslationSaga({\n  translations\n})\n","import { call, takeEvery } from 'redux-saga/effects'\nimport {\n  SignContentSuccessAction,\n  SIGN_CONTENT_SUCCESS,\n} from '../signature/actions'\nimport { WindowWithNps } from './types'\n\nexport function* npsSaga() {\n  yield takeEvery(SIGN_CONTENT_SUCCESS, handleSignContentSuccess)\n}\n\nfunction* handleSignContentSuccess(_action: SignContentSuccessAction) {\n  const windowWithNps = window as unknown as WindowWithNps\n  if ('delightedNps4' in window) {\n    yield call(windowWithNps.delightedNps4.survey)\n  }\n}\n","import { ACLResponse } from './reducer'\nimport { InfoResponse, UpdatePayload } from './types'\n\nexport async function getInfoRequest(): Promise<InfoResponse> {\n  return (await fetch('/api/acl')).json()\n}\n\nexport async function getWorldACL(\n  targetContent: string,\n  worldName: string\n): Promise<ACLResponse> {\n  return (await fetch(`${targetContent}/acl/${worldName}`)).json()\n}\n\nexport async function updateWorldACL(payload: UpdatePayload): Promise<void> {\n  await fetch(`/api/acl`, {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(payload),\n  })\n}\n","import { getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport { takeEvery, call, put, select } from 'redux-saga/effects'\n\nimport {\n  fetchWorldACLSuccess,\n  fetchInfoFailure,\n  fetchInfoSuccess,\n  FETCH_WORLD_ACL_REQUEST,\n  FETCH_INFO_REQUEST,\n  FetchWorldACLRequestAction,\n  fetchWorldACLFailure,\n  UpdateWorldACLRequestAction,\n  UPDATE_WORLD_ACL_REQUEST,\n  updateWorldACLFailure,\n  updateWorldACLSuccess,\n} from './actions'\nimport { ACLResponse } from './reducer'\nimport { InfoResponse } from './types'\nimport { getWorldACL, getInfoRequest, updateWorldACL } from './utils'\n\nexport function* aclSaga() {\n  yield takeEvery(FETCH_INFO_REQUEST, handleFetchInfoRequest)\n  yield takeEvery(FETCH_WORLD_ACL_REQUEST, handleFetchWorldACLRequest)\n  yield takeEvery(UPDATE_WORLD_ACL_REQUEST, handleUpdateWorldACLRequest)\n}\n\nfunction* handleFetchInfoRequest() {\n  try {\n    const info: InfoResponse = yield call(getInfoRequest)\n    yield put(fetchInfoSuccess(info))\n  } catch (e) {\n    yield put(fetchInfoFailure((e as any).message))\n  }\n}\n\nfunction* handleFetchWorldACLRequest(action: FetchWorldACLRequestAction) {\n  const { targetContent, worldName } = action.payload\n  try {\n    const acl: ACLResponse = yield call(getWorldACL, targetContent, worldName)\n    yield put(fetchWorldACLSuccess(acl))\n  } catch (e) {\n    yield put(fetchWorldACLFailure((e as any).message))\n  }\n}\n\nfunction* handleUpdateWorldACLRequest(action: UpdateWorldACLRequestAction) {\n  const { signature } = action.payload\n\n  const address: string = yield select(getAddress)\n\n  try {\n    yield call(updateWorldACL, { signature, address })\n    yield put(updateWorldACLSuccess())\n  } catch (e) {\n    yield put(updateWorldACLFailure((e as any).message))\n  }\n}\n","import { createSelector } from 'reselect'\nimport { RootState } from '../../types'\n\nexport const getState = (state: RootState) => state.signature\nexport const getData = createSelector(getState, state => state.data)\nexport const isLoading = createSelector(getState, state => state.loading.length > 0)\nexport const getError = createSelector(getState, state => state.error)\n","import React from 'react'\n\nexport default React.memo(({ children }: { children: string }) => (\n  <p style={{ color: 'var(--primary)' }}> Error: {children}</p>\n))\n","import { Props } from './types'\nimport { Blockie, Address, Button } from 'decentraland-ui'\nimport { coordsToString } from '../../modules/land/utils'\nimport Error from '../Error'\n\nexport default function RenderWalletData({\n  isConnected,\n  isConnecting,\n  wallet,\n  authorizations,\n  isUpdateAuthorized,\n  onConnectWallet\n}: Props) {\n  function getFormattedUnauthorized() {\n    return (authorizations || [])\n      .filter(a => !a.isUpdateAuthorized)\n      .map(a => `\"${coordsToString(a)}\"`)\n      .join(', ')\n  }\n\n  if (isConnected && wallet.address) {\n    return (\n      <>\n        <p>\n          Using address: &nbsp;\n          <Blockie scale={3} seed={wallet.address}>\n            <Address tooltip strong value={wallet.address} />\n          </Blockie>\n        </p>\n        {authorizations?.length && !isUpdateAuthorized ? (\n          <Error>\n            {`You don't have permissions to update The following LANDs that are part of the scene: ${getFormattedUnauthorized()}`}\n          </Error>\n        ) : null}\n      </>\n    )\n  }\n\n  return (\n    <>\n      {isConnecting ? null : <p>Could not find any wallet</p>}\n      <p>\n        <Button primary onClick={onConnectWallet} loading={isConnecting} disabled={isConnecting}>\n          Reconnect&nbsp;\n        </Button>\n      </p>\n    </>\n  )\n}\n","import { Coords } from './types'\n\nexport function coordsToString({ x, y }: Coords): string {\n  return `${x},${y}`\n}\n","import { AnyAction, Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { enableWalletRequest } from 'decentraland-dapps/dist/modules/wallet/actions'\nimport { getData as getWallet, isConnected, isConnecting } from 'decentraland-dapps/dist/modules/wallet/selectors'\n\nimport { getData as getSignature, isLoading as isSigningTx } from '../../modules/signature/selectors'\n\nimport { createIdentityRequest } from '../../modules/signature/actions'\nimport { RootState } from '../../types'\nimport { MapStateProps, MapDispatchProps } from './types'\n\nimport IdentityPage from './IdentityPage'\n\nconst mapState = (state: RootState): MapStateProps => {\n  return {\n    wallet: getWallet(state)!,\n    isConnected: isConnected(state),\n    isConnecting: isConnecting(state),\n    signed: !!getSignature(state),\n    isSigning: isSigningTx(state)\n  }\n}\n\nconst mapDispatch = (dispatch: Dispatch<AnyAction>): MapDispatchProps => ({\n  onConnectWallet: providerType => dispatch(enableWalletRequest(providerType)),\n  onRequestIdentity: () => dispatch(createIdentityRequest())\n})\n\nexport default connect(mapState, mapDispatch)(IdentityPage)\n","import './style.css'\nimport { Container, Dropdown, Table } from 'decentraland-ui'\nimport { Props } from './types'\nimport { useMemo, useState } from 'react'\nimport { FileSize } from '../../modules/server/reducer'\n\nenum Filter {\n  Size = 'Size',\n  Name = 'Name'\n}\n\nexport default function FilesPage({ files }: Props) {\n  const [filter, setFilter] = useState<Filter>(Filter.Size)\n  const value = useMemo<FileSize[]>(\n    () =>\n      files.sort((a, b) => {\n        if (filter === Filter.Size) {\n          return b.size < a.size ? -1 : 1\n        }\n        return a.name < b.name ? -1 : 1\n      }),\n    [files, filter]\n  )\n\n  return (\n    <Container>\n      <Table basic=\"very\">\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>File Name</Table.HeaderCell>\n            <Table.HeaderCell>Size</Table.HeaderCell>\n            <Table.HeaderCell>\n              <Dropdown text={filter} direction=\"right\">\n                <Dropdown.Menu>\n                  {Object.values(Filter).map(f => (\n                    <Dropdown.Item key={f} onClick={() => setFilter(f)} text={f} />\n                  ))}\n                </Dropdown.Menu>\n              </Dropdown>\n            </Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n          {value.map(({ name, size }, index) => (\n            <Table.Row key={index}>\n              <Table.Cell>{name}</Table.Cell>\n              <Table.Cell>{(Number(size) * 1e-6).toFixed(2)} MB </Table.Cell>\n              <Table.Cell />\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </Container>\n  )\n}\n","import IdentityPage from './IdentityPage.container'\nexport default IdentityPage\n","import { SyntheticEvent, useEffect, useState } from 'react'\nimport { ChainId } from '@dcl/schemas'\nimport { Header, Button, Navbar } from 'decentraland-ui'\nimport LoginModal from 'decentraland-dapps/dist/containers/LoginModal'\nimport RenderWalletData from '../RenderWalletData/RenderWalletData'\nimport { Props } from './types'\nimport './style.css'\n\nexport default function IdentityPage(props: Props) {\n  const { isConnected, wallet, isConnecting, onConnectWallet, isSigning, onRequestIdentity } = props\n\n  const [isModalOpen, setIsModalOpen] = useState(false)\n\n  const handleSignature = (e: SyntheticEvent) => {\n    e.preventDefault()\n    onRequestIdentity()\n  }\n\n  // Close modal once the wallet is connected\n  useEffect(() => {\n    if (isConnected && isModalOpen) {\n      setIsModalOpen(false)\n    }\n  }, [isConnected, isModalOpen])\n\n  return (\n    <div className=\"LinkScenePage\">\n      {wallet.chainId === ChainId.ETHEREUM_GOERLI && <div className=\"warning\">Using Goerli test network</div>}\n      <Navbar />\n      <Header>Create an identity to sign deployments </Header>\n      <RenderWalletData\n        isUpdateAuthorized={true}\n        isConnected={isConnected}\n        isConnecting={isConnecting}\n        wallet={wallet}\n        onConnectWallet={() => setIsModalOpen(true)}\n      />\n      <form>\n        <div>\n          <Button primary onClick={handleSignature} disabled={!isConnected} loading={isSigning}>\n            Sign ephemeral wallet\n          </Button>\n        </div>\n      </form>\n      <LoginModal\n          open={isModalOpen}\n          onClose={() => setIsModalOpen(false)}\n          onConnect={onConnectWallet}\n          isLoading={isConnecting}\n        />\n    </div>\n  )\n}\n","import { createSelector } from 'reselect'\n\nimport { RootState } from '../../types'\nimport { Authorization } from './types'\n\nexport const getState = (state: RootState) => state.authorization\n\nexport const getData = createSelector(getState, state => state.data)\n\nexport const isLoading = createSelector(getState, state => state.loading.length > 0)\n\nexport const getError = createSelector(getState, state => state.error)\n\nexport const isUpdateAuthorized = createSelector(getData, authorizations => {\n  if (!authorizations?.length) {\n    return\n  }\n\n  return authorizations.every((a: Authorization) => a.isUpdateAuthorized)\n})\n","import { connect } from 'react-redux'\nimport { RootState } from '../../types'\nimport { MapStateProps } from './types'\n\nimport FilesPage from './Files'\nimport { getFiles } from '../../modules/server/selectors'\n\nconst mapState = (state: RootState): MapStateProps => {\n  return { files: getFiles(state) }\n}\n\nexport default connect(mapState)(FilesPage)\n","import Files from './Files.container'\nexport default Files\n","import './style.css'\nimport { Atlas, Container, Coord, Layer, Section, Table } from 'decentraland-ui'\nimport { Props } from './types'\n\nexport default function LinkScenePage({ authorizations, parcels, baseParcel }: Props) {\n  const find = <T extends Coord>(coords: T[]) => (x: number, y: number): T | undefined =>\n    coords.find(s => s.x === x && s.y === y)\n\n  const selectedFillLayer: Layer = (x: number, y: number) => {\n    return find(parcels)(x, y) ? { color: '#ff99', scale: 1.2 } : null\n  }\n\n  const selectedStroke: Layer = (x: number, y: number) => {\n    return find(parcels)(x, y) ? { color: '#ff0044', scale: 1.4 } : null\n  }\n\n  return (\n    <Container>\n      {!!parcels.length && (\n        <Section size=\"large\" className=\"map-table\">\n          <Table basic=\"very\">\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>Name</Table.HeaderCell>\n                <Table.HeaderCell>Coordinates</Table.HeaderCell>\n                <Table.HeaderCell>Permissions</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n\n            <Table.Body>\n              {parcels.map((coords, index) => {\n                const isAuthorized = !!find(authorizations || [])(coords.x, coords.y)?.isUpdateAuthorized\n                return (\n                  <Table.Row key={index}>\n                    <Table.Cell>Parcel {index}</Table.Cell>\n                    <Table.Cell>\n                      {coords.x}, {coords.y}\n                    </Table.Cell>\n                    <Table.Cell className={!isAuthorized ? 'permission-not-granted' : ''}>\n                      {authorizations.length ? (isAuthorized ? 'Granted' : 'Not granted') : ''}\n                    </Table.Cell>\n                  </Table.Row>\n                )\n              })}\n            </Table.Body>\n          </Table>\n        </Section>\n      )}\n      <Container>\n        <Section size=\"large\" className=\"map-canvas\">\n          <Atlas\n            height={300}\n            x={baseParcel.x}\n            y={baseParcel.y}\n            isDraggable={false}\n            layers={[selectedStroke, selectedFillLayer]}\n          />\n        </Section>\n      </Container>\n    </Container>\n  )\n}\n","import { AnyAction, Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { RootState } from '../../types'\nimport { MapStateProps, MapDispatchProps } from './types'\n\nimport DeploySuccess from './DeploySuccess'\nimport { fetchCatalystRequest } from '../../modules/server/actions'\n\nconst mapState = (state: RootState): MapStateProps => {\n  return {\n    status: state.api.catalyst?.status,\n    catalysts: state.api.catalyst?.catalysts || []\n  }\n}\n\nconst mapDispatch = (dispatch: Dispatch<AnyAction>): MapDispatchProps => {\n  return {\n    onFetchCatalyst: () => dispatch(fetchCatalystRequest())\n  }\n}\n\nexport default connect(mapState, mapDispatch)(DeploySuccess)\n","import {\n  Navbar,\n  Tabs,\n  Footer,\n  Page,\n  Header,\n  Icon,\n  Button,\n  Container,\n  HeaderMenu,\n  Color,\n  Badge,\n  Address,\n  Blockie,\n  Toast,\n  ToastType,\n  Loader,\n} from 'decentraland-ui'\nimport LoginModal from 'decentraland-dapps/dist/containers/LoginModal'\nimport { Props } from './types'\nimport { useEffect, useState } from 'react'\nimport Files from '../Files'\nimport Map from '../Map'\n\nimport './style.css'\nimport { ChainId } from '@dcl/schemas'\nimport DeploySuccess from '../DeploySuccess/DeploySuccess.container'\n\nenum Tab {\n  Map = 'Map',\n  Files = 'Files',\n}\n\nexport default function LinkScenePage(props: Props) {\n  const [tab, setTab] = useState<Tab>(Tab.Map)\n  const [isModalOpen, setIsModalOpen] = useState(false)\n  const {\n    isConnected,\n    wallet,\n    authorizations,\n    isUpdateAuthorized,\n    isConnecting,\n    onConnectWallet,\n    onSignContent,\n    onFetchFiles,\n    onFetchInfo,\n    isSigning,\n    isAuthorizationLoading,\n    signed,\n    info,\n  } = props\n\n  const { x, y } = info?.baseParcel || { x: 0, y: 0 }\n  const isTestNet = wallet?.chainId === ChainId.ETHEREUM_GOERLI\n  const networkName = isTestNet ? 'zone' : 'org'\n  const deployUrl = `https://play.decentraland.${networkName}/?position=${x},${y}`\n\n  useEffect(() => {\n    onFetchInfo()\n    onFetchFiles()\n  }, [onFetchFiles, onFetchInfo])\n\n  // Close modal once the wallet is connected\n  useEffect(() => {\n    if (isConnected && isModalOpen) {\n      setIsModalOpen(false)\n    }\n  }, [isConnected, isModalOpen])\n\n  return (\n    <div className=\"Page-story-container\">\n      <Navbar\n        leftMenu={<></>}\n        isConnected={isConnected}\n        isConnecting={isConnecting}\n        address={wallet?.address}\n      />\n      <Page>\n        <Container>\n          <HeaderMenu>\n            <HeaderMenu.Left>\n              <Container textAlign=\"center\">\n                <Header size=\"large\">\n                  Deploying {info?.title || 'Untitled Scene'}\n                </Header>\n                {info?.description && (\n                  <Header size=\"medium\">\n                    {info?.description || 'Some description'}\n                  </Header>\n                )}\n              </Container>\n            </HeaderMenu.Left>\n          </HeaderMenu>\n          <HeaderMenu>\n            <HeaderMenu.Left>\n              <div\n                className=\"address-header url\"\n                onClick={() =>\n                  deployUrl && window.open(deployUrl!, '_blank')?.focus()\n                }\n              >\n                <Badge color={Color.SUMMER_RED}>\n                  <Icon name=\"point\" />\n                  {x}, {y}\n                </Badge>\n              </div>\n              {!!isConnected && (\n                <div className=\"address-header\">\n                  <Badge color={Color.SHADOWS}>\n                    {isTestNet ? 'Goerli' : 'Mainnet'}\n                  </Badge>\n                </div>\n              )}\n              <div className=\"address-header\">\n                {!!wallet?.address && (\n                  <Blockie scale={3} seed={wallet.address}>\n                    <Address tooltip strong value={wallet.address} />\n                  </Blockie>\n                )}\n              </div>\n            </HeaderMenu.Left>\n            {!signed && (\n              <HeaderMenu.Right>\n                <Button\n                  primary\n                  size=\"medium\"\n                  loading={\n                    isConnecting ||\n                    isSigning ||\n                    (isConnected && isAuthorizationLoading)\n                  }\n                  disabled={isConnected && !isUpdateAuthorized}\n                  onClick={\n                    isConnected\n                      ? () => onSignContent(info!.rootCID)\n                      : () => setIsModalOpen(true)\n                  }\n                >\n                  {isConnected ? 'Sign & Deploy' : 'Connect Wallet'}\n                </Button>\n              </HeaderMenu.Right>\n            )}\n          </HeaderMenu>\n        </Container>\n        {!!(authorizations?.length && !isUpdateAuthorized) && (\n          <Toast\n            type={ToastType.ERROR}\n            title=\"Check LAND permissions\"\n            body=\"You dont have permissions to update some of the coords\"\n          />\n        )}\n        {!signed && (\n          <Tabs isFullscreen>\n            {Object.values(Tab).map((t) => (\n              <Tabs.Tab key={t} onClick={() => setTab(t)} active={tab === t}>\n                {t}\n              </Tabs.Tab>\n            ))}\n          </Tabs>\n        )}\n        {!info && <Loader />}\n        {signed && <DeploySuccess />}\n        {!signed && tab === Tab.Files && <Files />}\n        {!signed && info && tab === Tab.Map && (\n          <Map\n            authorizations={authorizations}\n            parcels={info!.parcels}\n            baseParcel={info!.baseParcel}\n          />\n        )}\n        <LoginModal\n          open={isModalOpen}\n          onClose={() => setIsModalOpen(false)}\n          onConnect={onConnectWallet}\n          isLoading={isConnecting}\n        />\n      </Page>\n      <Footer />\n    </div>\n  )\n}\n","import { Badge, Color, Container, HeaderMenu, Table } from 'decentraland-ui'\nimport { Props } from './types'\nimport { useEffect } from 'react'\n\nimport './style.css'\n\nexport default function DeploySuccess({ onFetchCatalyst, catalysts = [], status }: Props) {\n  const entityIds = new Set(catalysts.map(c => c.entityId))\n  const deployedToAll = status === 'success' && entityIds.size === 1\n\n  useEffect(() => {\n    if (deployedToAll) return\n    const interval = setInterval(() => {\n      onFetchCatalyst()\n    }, 5_000)\n    return () => clearInterval(interval)\n  }, [onFetchCatalyst, deployedToAll])\n\n  return (\n    <Container>\n      <HeaderMenu>\n        <Badge color={deployedToAll ? '#20913e' : Color.SUNISH}>\n          {deployedToAll ? 'Deployed successfully to Catalyst servers' : 'Deploying..'}\n        </Badge>\n      </HeaderMenu>\n      <Table basic=\"very\">\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Catalyst Server</Table.HeaderCell>\n            <Table.HeaderCell>Time</Table.HeaderCell>\n            <Table.HeaderCell>Entity Id</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n          {(catalysts || []).map(({ url, timestamp, entityId }) => (\n            <Table.Row key={url}>\n              <Table.Cell>{url}</Table.Cell>\n              <Table.Cell>{new Date(timestamp).toLocaleString()}</Table.Cell>\n              <Table.Cell>{entityId}</Table.Cell>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </Container>\n  )\n}\n","import { AnyAction, Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { enableWalletRequest } from 'decentraland-dapps/dist/modules/wallet/actions'\nimport {\n  getData as getWallet,\n  isConnected,\n  isConnecting,\n} from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport {\n  getData as getSignature,\n  isLoading as isSigningTx,\n} from '../../modules/signature/selectors'\nimport {\n  getData as getAuthorizations,\n  isUpdateAuthorized,\n  isLoading as isAuthorizationLoading,\n} from '../../modules/authorization/selectors'\nimport { signContentRequest } from '../../modules/signature/actions'\nimport { RootState } from '../../types'\nimport { MapStateProps, MapDispatchProps } from './types'\n\nimport LinkerPage from './LinkerPage'\nimport {\n  fetchFilesRequest,\n  fetchInfoRequest,\n} from '../../modules/server/actions'\nimport { getInfo } from '../../modules/server/selectors'\n\nconst mapState = (state: RootState): MapStateProps => {\n  return {\n    wallet: getWallet(state)!,\n    isConnected: isConnected(state),\n    isConnecting: isConnecting(state),\n    signed: !!getSignature(state),\n    isUpdateAuthorized: isUpdateAuthorized(state),\n    authorizations: getAuthorizations(state),\n    isAuthorizationLoading: isAuthorizationLoading(state),\n    isSigning: isSigningTx(state),\n    info: getInfo(state),\n  }\n}\n\nconst mapDispatch = (dispatch: Dispatch<AnyAction>): MapDispatchProps => ({\n  onConnectWallet: (providerType) =>\n    dispatch(enableWalletRequest(providerType)),\n  onSignContent: (cid: string) => dispatch(signContentRequest(cid)),\n  onFetchFiles: () => dispatch(fetchFilesRequest()),\n  onFetchInfo: () => dispatch(fetchInfoRequest()),\n})\n\nexport default connect(mapState, mapDispatch)(LinkerPage)\n","import { fetchWorldACLRequest } from '../../../modules/acl/actions'\nimport { InfoResponse } from '../../../modules/acl/types'\n\nexport enum ACLStatus {\n  UPDATING = 'updating',\n  UPDATED = 'updated',\n}\n\nexport type Props = {\n  aclStatus: ACLStatus\n  info: InfoResponse\n  onFetchWorldACL: typeof fetchWorldACLRequest\n}\n\nexport type MapStateProps = Pick<Props, 'aclStatus'>\nexport type MapDispatchProps = Pick<Props, 'onFetchWorldACL'>\n\nexport type OwnProps = Pick<Props, 'info'>\n","import LinkerPage from './LinkerPage.container'\nexport default LinkerPage\n","import IdentityPage from './IdentityPage'\nimport LinkerPage from './LinkerPage'\n\nconst Root = (props: any) => {\n  const qs = new URLSearchParams(document.location.search)\n\n  if (qs.has('wearableId')) {\n    return <IdentityPage {...props} />\n  }\n\n  return <LinkerPage {...props} />\n}\n\nexport default Root\n","import { ACLStatus } from '../../components/WorldACLPage/ACLStatus/types'\nimport { RootState } from '../../types'\n\nexport const getState = (state: RootState) => state.acl\n\nexport const getInfo = (state: RootState) => getState(state).info\nexport const getACL = (state: RootState) => getState(state).acl\nexport const getError = (state: RootState) => getState(state).error\n\nexport const isLoading = (state: RootState) => !!getState(state).loading.length\n\nexport const getACLStatus = (state: RootState) => {\n  const info = getInfo(state)\n  const acl = getACL(state)\n\n  return info &&\n    acl &&\n    info.worldName === acl.resource &&\n    info.allowed.every((address) => acl.allowed.includes(address))\n    ? ACLStatus.UPDATED\n    : ACLStatus.UPDATING\n}\n","import { AnyAction, Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { RootState } from '../../../types'\nimport { fetchWorldACLRequest } from '../../../modules/acl/actions'\nimport { getACLStatus } from '../../../modules/acl/selectors'\nimport { MapStateProps, MapDispatchProps } from './types'\nimport ACLStatus from './ACLStatus'\n\nconst mapState = (state: RootState): MapStateProps => ({\n  aclStatus: getACLStatus(state),\n})\n\nconst mapDispatch = (dispatch: Dispatch<AnyAction>): MapDispatchProps => {\n  return {\n    onFetchWorldACL: (targetContent: string, worldName: string) =>\n      dispatch(fetchWorldACLRequest(targetContent, worldName)),\n  }\n}\n\nexport default connect(mapState, mapDispatch)(ACLStatus)\n","import ACLStatus from './ACLStatus.container'\nexport default ACLStatus\n","import { useEffect } from 'react'\nimport { Badge, Color, Container, HeaderMenu } from 'decentraland-ui'\nimport { ACLStatus as Status, Props } from './types'\n\nimport './style.css'\n\nexport default function ACLStatus({ aclStatus, info, onFetchWorldACL }: Props) {\n  const aclUpdated = aclStatus === Status.UPDATED\n\n  useEffect(() => {\n    if (aclUpdated || !info) return\n    const interval = setInterval(() => {\n      onFetchWorldACL(info.targetContent, info.worldName)\n    }, 5_000)\n    return () => clearInterval(interval)\n  }, [aclUpdated, info, onFetchWorldACL])\n\n  return (\n    <Container>\n      <HeaderMenu>\n        <Badge color={aclUpdated ? '#20913e' : Color.SUNISH}>\n          {aclUpdated\n            ? `World ACL updated successfully to ${info?.targetContent}`\n            : 'Updating ACL..'}\n        </Badge>\n      </HeaderMenu>\n    </Container>\n  )\n}\n","import { AnyAction, Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport { enableWalletRequest } from 'decentraland-dapps/dist/modules/wallet/actions'\nimport {\n  getData as getWallet,\n  isConnected,\n  isConnecting,\n} from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport {\n  getData as getSignature,\n  isLoading as isSigningTx,\n} from '../../modules/signature/selectors'\nimport { signWorldACLRequest } from '../../modules/signature/actions'\nimport { RootState } from '../../types'\nimport { fetchInfoRequest } from '../../modules/acl/actions'\nimport { getInfo } from '../../modules/acl/selectors'\nimport WorldACLPage from './WorldACLPage'\nimport { MapStateProps, MapDispatchProps } from './types'\n\nconst mapState = (state: RootState): MapStateProps => {\n  return {\n    wallet: getWallet(state)!,\n    isConnected: isConnected(state),\n    isConnecting: isConnecting(state),\n    signed: !!getSignature(state),\n    isSigning: isSigningTx(state),\n    info: getInfo(state),\n  }\n}\n\nconst mapDispatch = (dispatch: Dispatch<AnyAction>): MapDispatchProps => ({\n  onConnectWallet: (providerType) =>\n    dispatch(enableWalletRequest(providerType)),\n  onSignContent: (payload: string) => dispatch(signWorldACLRequest(payload)),\n  onFetchInfo: () => dispatch(fetchInfoRequest()),\n})\n\nexport default connect(mapState, mapDispatch)(WorldACLPage)\n","import WorldACLPage from './WorldACLPage.container'\nexport default WorldACLPage\n","import { useEffect, useState } from 'react'\nimport { getChainName } from '@dcl/schemas'\nimport {\n  Navbar,\n  Footer,\n  Page,\n  Header,\n  Button,\n  Container,\n  HeaderMenu,\n  Color,\n  Badge,\n  Address,\n  Blockie,\n  Loader,\n  Table,\n} from 'decentraland-ui'\nimport LoginModal from 'decentraland-dapps/dist/containers/LoginModal'\nimport { Props } from './types'\n\nimport './style.css'\nimport ACLStatus from './ACLStatus'\n\nexport default function WorldACLPage(props: Props) {\n  const [isModalOpen, setIsModalOpen] = useState(false)\n\n  const {\n    isConnected,\n    wallet,\n    isConnecting,\n    isSigning,\n    signed,\n    info,\n    onConnectWallet,\n    onSignContent,\n    onFetchInfo,\n  } = props\n\n  useEffect(() => {\n    onFetchInfo()\n  }, [onFetchInfo])\n\n  // Close modal once the wallet is connected\n  useEffect(() => {\n    if (isConnected && isModalOpen) {\n      setIsModalOpen(false)\n    }\n  }, [isConnected, isModalOpen])\n\n  return (\n    <div className=\"Page-story-container\">\n      <Navbar\n        leftMenu={<></>}\n        isConnected={isConnected}\n        isConnecting={isConnecting}\n        address={wallet?.address}\n      />\n      <Page>\n        <Container>\n          <HeaderMenu>\n            <HeaderMenu.Left>\n              <Container textAlign=\"center\">\n                <Header size=\"large\">\n                  Updating {info?.worldName || 'Untitled World'} ACL\n                </Header>\n              </Container>\n            </HeaderMenu.Left>\n          </HeaderMenu>\n          <HeaderMenu>\n            <HeaderMenu.Left>\n              {!!isConnected && wallet?.chainId && (\n                <div className=\"address-header\">\n                  <Badge color={Color.SHADOWS}>\n                    {getChainName(wallet.chainId)}\n                  </Badge>\n                </div>\n              )}\n              <div className=\"address-header\">\n                {!!wallet?.address && (\n                  <Blockie scale={3} seed={wallet.address}>\n                    <Address tooltip strong value={wallet.address} />\n                  </Blockie>\n                )}\n              </div>\n            </HeaderMenu.Left>\n            {!signed && (\n              <HeaderMenu.Right>\n                <Button\n                  primary\n                  size=\"medium\"\n                  loading={isConnecting || isSigning}\n                  onClick={\n                    isConnected\n                      ? () => onSignContent(info!.payload)\n                      : () => setIsModalOpen(true)\n                  }\n                >\n                  {isConnected ? 'Sign & Deploy' : 'Connect Wallet'}\n                </Button>\n              </HeaderMenu.Right>\n            )}\n          </HeaderMenu>\n        </Container>\n        {!info && <Loader />}\n        {info && signed && <ACLStatus info={info} />}\n        {!signed && info && (\n          <Container>\n            <Table basic=\"very\">\n              <Table.Header>\n                <Table.Row>\n                  <Table.HeaderCell>Address</Table.HeaderCell>\n                </Table.Row>\n              </Table.Header>\n\n              <Table.Body>\n                {info.allowed.length > 0 ? (\n                  info.allowed.map((address, index) => (\n                    <Table.Row key={index}>\n                      <Table.Cell>{address}</Table.Cell>\n                    </Table.Row>\n                  ))\n                ) : (\n                  <Table.Row>\n                    <Table.Cell>\n                      No additional addresses are allowed to deploy. Only the\n                      world owner.\n                    </Table.Cell>\n                  </Table.Row>\n                )}\n              </Table.Body>\n            </Table>\n          </Container>\n        )}\n        <LoginModal\n          open={isModalOpen}\n          onClose={() => setIsModalOpen(false)}\n          onConnect={onConnectWallet}\n          isLoading={isConnecting}\n        />\n      </Page>\n      <Footer />\n    </div>\n  )\n}\n","import ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createBrowserRouter, RouterProvider } from 'react-router-dom'\nimport {\n  TranslationProvider,\n  WalletProvider,\n} from 'decentraland-dapps/dist/providers'\n\nimport { initStore } from './store'\n\nimport Root from './components/Root'\nimport WorldACLPage from './components/WorldACLPage'\n\nimport * as locales from './modules/translation/locales'\n\n// Do not move these before other imports\nimport 'decentraland-ui/lib/styles.css'\nimport 'decentraland-ui/lib/dark-theme.css'\n\nconst router = createBrowserRouter([\n  {\n    path: '/',\n    element: <Root />,\n  },\n  {\n    path: '/acl',\n    element: <WorldACLPage />,\n  },\n])\n\n// tslint:disable-next-line: no-floating-promises\nReactDOM.render(\n  <Provider store={initStore()}>\n    <TranslationProvider locales={Object.keys(locales)}>\n      <WalletProvider>\n        <RouterProvider router={router} />\n      </WalletProvider>\n    </TranslationProvider>\n  </Provider>,\n  document.getElementById('root')\n)\n","import { applyMiddleware, compose, createStore } from 'redux'\nimport createSagasMiddleware from 'redux-saga'\nimport { createLogger } from 'redux-logger'\nimport { createTransactionMiddleware } from 'decentraland-dapps/dist/modules/transaction/middleware'\nimport { createStorageMiddleware } from 'decentraland-dapps/dist/modules/storage/middleware'\n\nimport { rootReducer } from './reducer'\nimport { rootSaga } from './sagas'\n\nexport function initStore() {\n  const composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\n  const { storageMiddleware, loadStorageMiddleware } = createStorageMiddleware({\n    storageKey: 'decentraland-linker'\n  })\n  const sagasMiddleware = createSagasMiddleware()\n  const transactionMiddleware = createTransactionMiddleware()\n  const loggerMiddleware = createLogger({\n    collapsed: () => true,\n    predicate: (_, _action) => true\n  })\n\n  const middleware = applyMiddleware(sagasMiddleware, loggerMiddleware, storageMiddleware, transactionMiddleware)\n\n  const enhancer = composeEnhancers(middleware)\n  const store = createStore(rootReducer, enhancer)\n\n  sagasMiddleware.run(rootSaga())\n  loadStorageMiddleware(store)\n\n  return store\n}\n","import { all } from 'redux-saga/effects'\n\nimport { walletSaga } from './modules/wallet/sagas'\nimport { signatureSaga } from './modules/signature/sagas'\nimport { authorizationSaga } from './modules/authorization/sagas'\nimport { apiSaga } from './modules/server/sagas'\nimport { translationSaga } from './modules/translation/sagas'\nimport { npsSaga } from './modules/nps/sagas'\nimport { aclSaga } from './modules/acl/sagas'\n\nexport function rootSaga() {\n  return function* () {\n    yield all([\n      walletSaga(),\n      signatureSaga(),\n      authorizationSaga(),\n      apiSaga(),\n      translationSaga(),\n      npsSaga(),\n      aclSaga(),\n    ])\n  }\n}\n"],"sourceRoot":""}