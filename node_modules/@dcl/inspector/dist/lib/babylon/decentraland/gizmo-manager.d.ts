import { EcsEntity } from './EcsEntity';
import { TransformType } from '@dcl/ecs';
import { SceneContext } from './SceneContext';
import { GizmoType } from '../../utils/gizmo';
import { PatchedGizmoManager } from './gizmo-patch';
export declare function createGizmoManager(context: SceneContext): {
    gizmoManager: PatchedGizmoManager;
    setEntity(entity: EcsEntity | null): void;
    getEntity(): EcsEntity | null;
    unsetEntity(): void;
    getGizmoTypes(): readonly [GizmoType.POSITION, GizmoType.ROTATION, GizmoType.SCALE];
    setGizmoType(type: GizmoType): void;
    isPositionGizmoWorldAligned: () => boolean;
    setPositionGizmoWorldAligned: (worldAligned: boolean) => void;
    isRotationGizmoWorldAligned: () => boolean;
    setRotationGizmoWorldAligned: (worldAligned: boolean) => void;
    fixRotationGizmoAlignment: (value: TransformType) => void;
    isRotationGizmoAlignmentDisabled: () => boolean;
    onChange: (cb: () => void) => () => void;
};
export type Gizmos = ReturnType<typeof createGizmoManager>;
