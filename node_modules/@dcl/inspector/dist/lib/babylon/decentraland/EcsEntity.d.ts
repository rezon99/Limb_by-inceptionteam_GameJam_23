import * as BABYLON from '@babylonjs/core';
import { ComponentDefinition, Entity, PBGltfContainer, PBMeshRenderer, PBPointerEvents, TransformType } from '@dcl/ecs';
import { IFuture } from 'fp-future';
import { SceneContext } from './SceneContext';
export type EcsComponents = Partial<{
    transform: TransformType;
    meshRenderer: PBMeshRenderer;
    pointerEvents: PBPointerEvents;
    gltfContainer: PBGltfContainer;
}>;
export declare class EcsEntity extends BABYLON.TransformNode {
    #private;
    entityId: Entity;
    context: WeakRef<SceneContext>;
    scene: BABYLON.Scene;
    readonly isDCLEntity = true;
    usedComponents: Map<number, ComponentDefinition<unknown>>;
    meshRenderer?: BABYLON.AbstractMesh;
    gltfContainer?: BABYLON.AbstractMesh;
    gltfAssetContainer?: BABYLON.AssetContainer;
    ecsComponentValues: EcsComponents;
    constructor(entityId: Entity, context: WeakRef<SceneContext>, scene: BABYLON.Scene);
    putComponent(component: ComponentDefinition<unknown>): void;
    deleteComponent(component: ComponentDefinition<unknown>): void;
    /**
     * Returns the children that extends EcsEntity, filtering any other Object3D
     */
    childrenEntities(): Iterable<EcsEntity>;
    dispose(_doNotRecurse?: boolean | undefined, _disposeMaterialAndTextures?: boolean | undefined): void;
    getMeshesBoundingBox(): BABYLON.BoundingInfo;
    isGltfPathLoading(): boolean;
    getGltfPathLoading(): IFuture<string> | undefined;
    resolveGltfPathLoading(filePath: string): void;
    setGltfPathLoading(): void;
}
/**
 * Finds the closest parent that is or extends a EcsEntity
 * @param object the object to start looking
 */
export declare function findParentEntity(object: BABYLON.Node): EcsEntity | null;
/**
 * Finds the closest parent that is instance of the second parameter (constructor)
 * @param object the object to start looking
 * @param desiredClass the constructor of the kind of parent we want to find
 */
export declare function findParentEntityOfType<T extends EcsEntity>(object: BABYLON.Node, desiredClass: any): T | null;
