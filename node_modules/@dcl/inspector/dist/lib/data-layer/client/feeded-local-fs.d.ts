declare function createTempEngineContext(): {
    engine: import("@dcl/ecs").IEngine;
    components: {
        Material: import("@dcl/ecs").MaterialComponentDefinitionExtended;
        PointerEvents: import("@dcl/ecs").LastWriteWinElementSetComponentDefinition<import("@dcl/ecs").PBPointerEvents>;
        Selection: import("@dcl/ecs").LastWriteWinElementSetComponentDefinition<{
            gizmo: import("../../utils/gizmo").GizmoType;
        }>;
        Scene: import("@dcl/ecs").LastWriteWinElementSetComponentDefinition<{
            layout: import("../../utils/layout").Layout;
        }>;
        GltfContainer: import("@dcl/ecs").LastWriteWinElementSetComponentDefinition<import("@dcl/ecs").PBGltfContainer>;
        Billboard: import("@dcl/ecs").LastWriteWinElementSetComponentDefinition<import("@dcl/ecs").PBBillboard>;
        MeshRenderer: import("@dcl/ecs").MeshRendererComponentDefinitionExtended;
        Transform: import("@dcl/ecs").TransformComponentExtended;
        TextShape: import("@dcl/ecs").LastWriteWinElementSetComponentDefinition<import("@dcl/ecs").PBTextShape>;
        Name: import("@dcl/ecs").LastWriteWinElementSetComponentDefinition<import("@dcl/ecs").NameType>;
    };
};
type TempEngine = ReturnType<typeof createTempEngineContext>;
export declare function generateMainComposite({ engine, components }: TempEngine): any;
export declare const getMinimalComposite: () => any;
export declare function feededFileSystem(mappings?: Record<string, string>): Promise<import("../types").FileSystemInterface>;
export {};
