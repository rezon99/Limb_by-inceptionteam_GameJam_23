import { ComponentDefinition, IEngine, LastWriteWinElementSetComponentDefinition, MeshRendererComponentDefinitionExtended, TransformComponentExtended } from '@dcl/ecs';
import * as components from '@dcl/ecs/dist/components';
import { Layout } from '../utils/layout';
import { GizmoType } from '../utils/gizmo';
export type Component<T = unknown> = ComponentDefinition<T>;
export declare enum EditorComponentNames {
    Selection = "inspector::Selection",
    Scene = "inspector::Scene"
}
export type EditorComponentsTypes = {
    Selection: {
        gizmo: GizmoType;
    };
    Scene: {
        layout: Layout;
    };
};
export type EditorComponents = {
    Selection: LastWriteWinElementSetComponentDefinition<EditorComponentsTypes['Selection']>;
    Scene: LastWriteWinElementSetComponentDefinition<EditorComponentsTypes['Scene']>;
};
export type SdkComponents = {
    GltfContainer: ReturnType<typeof components.GltfContainer>;
    Billboard: ReturnType<typeof components.Billboard>;
    MeshRenderer: MeshRendererComponentDefinitionExtended;
    Transform: TransformComponentExtended;
    TextShape: ReturnType<typeof components.TextShape>;
    Name: ReturnType<typeof components.Name>;
};
export declare function createComponents(engine: IEngine): SdkComponents;
export declare function createEditorComponents(engine: IEngine): EditorComponents;
