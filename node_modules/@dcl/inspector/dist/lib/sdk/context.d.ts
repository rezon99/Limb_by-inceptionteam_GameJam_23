import { Scene } from '@babylonjs/core';
import { ComponentDefinition, CrdtMessageType, Entity, IEngine } from '@dcl/ecs';
import { Emitter } from 'mitt';
import { ITheme } from '../../components/AssetsCatalog';
import { SceneContext } from '../babylon/decentraland/SceneContext';
import { EditorComponents, SdkComponents } from './components';
import { createOperations } from './operations';
import { Gizmos } from '../babylon/decentraland/gizmo-manager';
import { CameraManager } from '../babylon/decentraland/camera';
import { InspectorPreferences } from '../logic/preferences/types';
export type SdkContextEvents = {
    change: {
        entity: Entity;
        operation: CrdtMessageType;
        component?: ComponentDefinition<any>;
        value?: any;
    };
    dispose: undefined;
};
export type SdkContextValue = {
    engine: IEngine;
    components: EditorComponents & SdkComponents;
    scene: Scene;
    sceneContext: SceneContext;
    events: Emitter<SdkContextEvents>;
    dispose(): void;
    operations: ReturnType<typeof createOperations>;
    gizmos: Gizmos;
    editorCamera: CameraManager;
};
export declare function createSdkContext(canvas: HTMLCanvasElement, catalog: ITheme[], preferences: InspectorPreferences): Promise<SdkContextValue>;
