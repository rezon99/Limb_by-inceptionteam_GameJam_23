import { PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../redux/store';
import { DataLayerRpcClient } from '../../lib/data-layer/types';
import { InspectorPreferences } from '../../lib/logic/preferences/types';
import { Asset, ImportAssetRequest } from '../../lib/data-layer/remote-data-layer';
export declare enum ErrorType {
    Disconnected = "disconnected",
    Reconnecting = "reconnecting",
    Save = "save",
    GetPreferences = "get-preferences",
    SetPreferences = "set-preferences",
    GetAssetCatalog = "get-asset-catalog",
    Undo = "undo",
    Redo = "redo",
    ImportAsset = "import-asset",
    RemoveAsset = "remove-asset"
}
export type IDataLayer = Readonly<DataLayerRpcClient | undefined>;
export declare function getDataLayerInterface(): IDataLayer;
export interface DataLayerState {
    reconnectAttempts: number;
    error: ErrorType | undefined;
}
export declare const initialState: DataLayerState;
export declare const dataLayer: import("@reduxjs/toolkit").Slice<DataLayerState, {
    connect: (state: import("immer/dist/internal").WritableDraft<DataLayerState>) => void;
    reconnect: (state: import("immer/dist/internal").WritableDraft<DataLayerState>) => void;
    connected: (state: import("immer/dist/internal").WritableDraft<DataLayerState>, { payload }: PayloadAction<{
        dataLayer: IDataLayer;
    }>) => void;
    error: (state: import("immer/dist/internal").WritableDraft<DataLayerState>, { payload }: PayloadAction<{
        error: ErrorType;
    }>) => void;
    save: () => void;
    getInspectorPreferences: () => void;
    setInspectorPreferences: (_state: import("immer/dist/internal").WritableDraft<DataLayerState>, _payload: PayloadAction<Partial<InspectorPreferences>>) => void;
    getAssetCatalog: () => void;
    undo: () => void;
    redo: () => void;
    importAsset: (_state: import("immer/dist/internal").WritableDraft<DataLayerState>, _payload: PayloadAction<ImportAssetRequest>) => void;
    removeAsset: (_state: import("immer/dist/internal").WritableDraft<DataLayerState>, _payload: PayloadAction<Asset>) => void;
}, "data-layer">;
export declare const connect: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<"data-layer/connect">, connected: import("@reduxjs/toolkit").ActionCreatorWithPayload<{
    dataLayer: IDataLayer;
}, "data-layer/connected">, reconnect: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<"data-layer/reconnect">, error: import("@reduxjs/toolkit").ActionCreatorWithPayload<{
    error: ErrorType;
}, "data-layer/error">, save: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<"data-layer/save">, getInspectorPreferences: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<"data-layer/getInspectorPreferences">, setInspectorPreferences: import("@reduxjs/toolkit").ActionCreatorWithPayload<Partial<InspectorPreferences>, "data-layer/setInspectorPreferences">, getAssetCatalog: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<"data-layer/getAssetCatalog">, undo: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<"data-layer/undo">, redo: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<"data-layer/redo">, importAsset: import("@reduxjs/toolkit").ActionCreatorWithPayload<ImportAssetRequest, "data-layer/importAsset">, removeAsset: import("@reduxjs/toolkit").ActionCreatorWithPayload<Asset, "data-layer/removeAsset">;
export declare const selectDataLayerError: (state: RootState) => ErrorType | undefined;
export declare const selectDataLayerReconnectAttempts: (state: RootState) => number;
declare const _default: import("redux").Reducer<DataLayerState>;
export default _default;
