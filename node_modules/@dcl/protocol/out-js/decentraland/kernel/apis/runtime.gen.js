"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RuntimeServiceDefinition = exports.CurrentSceneEntityResponse = exports.CurrentSceneEntityRequest = exports.ReadFileResponse = exports.ReadFileRequest = exports.GetWorldTimeRequest = exports.GetRealmRequest = exports.GetWorldTimeResponse = exports.GetRealmResponse = exports.RealmInfo = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const content_mapping_gen_1 = require("../../common/content_mapping.gen");
exports.protobufPackage = "decentraland.kernel.apis";
function createBaseRealmInfo() {
    return { baseUrl: "", realmName: "", networkId: 0, commsAdapter: "", isPreview: false };
}
var RealmInfo;
(function (RealmInfo) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.baseUrl !== "") {
            writer.uint32(10).string(message.baseUrl);
        }
        if (message.realmName !== "") {
            writer.uint32(18).string(message.realmName);
        }
        if (message.networkId !== 0) {
            writer.uint32(24).int32(message.networkId);
        }
        if (message.commsAdapter !== "") {
            writer.uint32(34).string(message.commsAdapter);
        }
        if (message.isPreview === true) {
            writer.uint32(40).bool(message.isPreview);
        }
        return writer;
    }
    RealmInfo.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRealmInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.baseUrl = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.realmName = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.networkId = reader.int32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.commsAdapter = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.isPreview = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    RealmInfo.decode = decode;
    function fromJSON(object) {
        return {
            baseUrl: isSet(object.baseUrl) ? String(object.baseUrl) : "",
            realmName: isSet(object.realmName) ? String(object.realmName) : "",
            networkId: isSet(object.networkId) ? Number(object.networkId) : 0,
            commsAdapter: isSet(object.commsAdapter) ? String(object.commsAdapter) : "",
            isPreview: isSet(object.isPreview) ? Boolean(object.isPreview) : false,
        };
    }
    RealmInfo.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.baseUrl !== undefined && (obj.baseUrl = message.baseUrl);
        message.realmName !== undefined && (obj.realmName = message.realmName);
        message.networkId !== undefined && (obj.networkId = Math.round(message.networkId));
        message.commsAdapter !== undefined && (obj.commsAdapter = message.commsAdapter);
        message.isPreview !== undefined && (obj.isPreview = message.isPreview);
        return obj;
    }
    RealmInfo.toJSON = toJSON;
    function create(base) {
        return RealmInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    RealmInfo.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseRealmInfo();
        message.baseUrl = (_a = object.baseUrl) !== null && _a !== void 0 ? _a : "";
        message.realmName = (_b = object.realmName) !== null && _b !== void 0 ? _b : "";
        message.networkId = (_c = object.networkId) !== null && _c !== void 0 ? _c : 0;
        message.commsAdapter = (_d = object.commsAdapter) !== null && _d !== void 0 ? _d : "";
        message.isPreview = (_e = object.isPreview) !== null && _e !== void 0 ? _e : false;
        return message;
    }
    RealmInfo.fromPartial = fromPartial;
})(RealmInfo = exports.RealmInfo || (exports.RealmInfo = {}));
function createBaseGetRealmResponse() {
    return { realmInfo: undefined };
}
var GetRealmResponse;
(function (GetRealmResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.realmInfo !== undefined) {
            RealmInfo.encode(message.realmInfo, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    GetRealmResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetRealmResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.realmInfo = RealmInfo.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetRealmResponse.decode = decode;
    function fromJSON(object) {
        return { realmInfo: isSet(object.realmInfo) ? RealmInfo.fromJSON(object.realmInfo) : undefined };
    }
    GetRealmResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.realmInfo !== undefined &&
            (obj.realmInfo = message.realmInfo ? RealmInfo.toJSON(message.realmInfo) : undefined);
        return obj;
    }
    GetRealmResponse.toJSON = toJSON;
    function create(base) {
        return GetRealmResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GetRealmResponse.create = create;
    function fromPartial(object) {
        const message = createBaseGetRealmResponse();
        message.realmInfo = (object.realmInfo !== undefined && object.realmInfo !== null)
            ? RealmInfo.fromPartial(object.realmInfo)
            : undefined;
        return message;
    }
    GetRealmResponse.fromPartial = fromPartial;
})(GetRealmResponse = exports.GetRealmResponse || (exports.GetRealmResponse = {}));
function createBaseGetWorldTimeResponse() {
    return { seconds: 0 };
}
var GetWorldTimeResponse;
(function (GetWorldTimeResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.seconds !== 0) {
            writer.uint32(8).int32(message.seconds);
        }
        return writer;
    }
    GetWorldTimeResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetWorldTimeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.seconds = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetWorldTimeResponse.decode = decode;
    function fromJSON(object) {
        return { seconds: isSet(object.seconds) ? Number(object.seconds) : 0 };
    }
    GetWorldTimeResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.seconds !== undefined && (obj.seconds = Math.round(message.seconds));
        return obj;
    }
    GetWorldTimeResponse.toJSON = toJSON;
    function create(base) {
        return GetWorldTimeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GetWorldTimeResponse.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseGetWorldTimeResponse();
        message.seconds = (_a = object.seconds) !== null && _a !== void 0 ? _a : 0;
        return message;
    }
    GetWorldTimeResponse.fromPartial = fromPartial;
})(GetWorldTimeResponse = exports.GetWorldTimeResponse || (exports.GetWorldTimeResponse = {}));
function createBaseGetRealmRequest() {
    return {};
}
var GetRealmRequest;
(function (GetRealmRequest) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    GetRealmRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetRealmRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetRealmRequest.decode = decode;
    function fromJSON(_) {
        return {};
    }
    GetRealmRequest.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    GetRealmRequest.toJSON = toJSON;
    function create(base) {
        return GetRealmRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GetRealmRequest.create = create;
    function fromPartial(_) {
        const message = createBaseGetRealmRequest();
        return message;
    }
    GetRealmRequest.fromPartial = fromPartial;
})(GetRealmRequest = exports.GetRealmRequest || (exports.GetRealmRequest = {}));
function createBaseGetWorldTimeRequest() {
    return {};
}
var GetWorldTimeRequest;
(function (GetWorldTimeRequest) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    GetWorldTimeRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetWorldTimeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    GetWorldTimeRequest.decode = decode;
    function fromJSON(_) {
        return {};
    }
    GetWorldTimeRequest.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    GetWorldTimeRequest.toJSON = toJSON;
    function create(base) {
        return GetWorldTimeRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    GetWorldTimeRequest.create = create;
    function fromPartial(_) {
        const message = createBaseGetWorldTimeRequest();
        return message;
    }
    GetWorldTimeRequest.fromPartial = fromPartial;
})(GetWorldTimeRequest = exports.GetWorldTimeRequest || (exports.GetWorldTimeRequest = {}));
function createBaseReadFileRequest() {
    return { fileName: "" };
}
var ReadFileRequest;
(function (ReadFileRequest) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.fileName !== "") {
            writer.uint32(10).string(message.fileName);
        }
        return writer;
    }
    ReadFileRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReadFileRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.fileName = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ReadFileRequest.decode = decode;
    function fromJSON(object) {
        return { fileName: isSet(object.fileName) ? String(object.fileName) : "" };
    }
    ReadFileRequest.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.fileName !== undefined && (obj.fileName = message.fileName);
        return obj;
    }
    ReadFileRequest.toJSON = toJSON;
    function create(base) {
        return ReadFileRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ReadFileRequest.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseReadFileRequest();
        message.fileName = (_a = object.fileName) !== null && _a !== void 0 ? _a : "";
        return message;
    }
    ReadFileRequest.fromPartial = fromPartial;
})(ReadFileRequest = exports.ReadFileRequest || (exports.ReadFileRequest = {}));
function createBaseReadFileResponse() {
    return { content: new Uint8Array(), hash: "" };
}
var ReadFileResponse;
(function (ReadFileResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.content.length !== 0) {
            writer.uint32(10).bytes(message.content);
        }
        if (message.hash !== "") {
            writer.uint32(18).string(message.hash);
        }
        return writer;
    }
    ReadFileResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReadFileResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.content = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.hash = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ReadFileResponse.decode = decode;
    function fromJSON(object) {
        return {
            content: isSet(object.content) ? bytesFromBase64(object.content) : new Uint8Array(),
            hash: isSet(object.hash) ? String(object.hash) : "",
        };
    }
    ReadFileResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.content !== undefined &&
            (obj.content = base64FromBytes(message.content !== undefined ? message.content : new Uint8Array()));
        message.hash !== undefined && (obj.hash = message.hash);
        return obj;
    }
    ReadFileResponse.toJSON = toJSON;
    function create(base) {
        return ReadFileResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ReadFileResponse.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseReadFileResponse();
        message.content = (_a = object.content) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.hash = (_b = object.hash) !== null && _b !== void 0 ? _b : "";
        return message;
    }
    ReadFileResponse.fromPartial = fromPartial;
})(ReadFileResponse = exports.ReadFileResponse || (exports.ReadFileResponse = {}));
function createBaseCurrentSceneEntityRequest() {
    return {};
}
var CurrentSceneEntityRequest;
(function (CurrentSceneEntityRequest) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    CurrentSceneEntityRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCurrentSceneEntityRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    CurrentSceneEntityRequest.decode = decode;
    function fromJSON(_) {
        return {};
    }
    CurrentSceneEntityRequest.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    CurrentSceneEntityRequest.toJSON = toJSON;
    function create(base) {
        return CurrentSceneEntityRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    CurrentSceneEntityRequest.create = create;
    function fromPartial(_) {
        const message = createBaseCurrentSceneEntityRequest();
        return message;
    }
    CurrentSceneEntityRequest.fromPartial = fromPartial;
})(CurrentSceneEntityRequest = exports.CurrentSceneEntityRequest || (exports.CurrentSceneEntityRequest = {}));
function createBaseCurrentSceneEntityResponse() {
    return { urn: "", content: [], metadataJson: "", baseUrl: "" };
}
var CurrentSceneEntityResponse;
(function (CurrentSceneEntityResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.urn !== "") {
            writer.uint32(10).string(message.urn);
        }
        for (const v of message.content) {
            content_mapping_gen_1.ContentMapping.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.metadataJson !== "") {
            writer.uint32(26).string(message.metadataJson);
        }
        if (message.baseUrl !== "") {
            writer.uint32(34).string(message.baseUrl);
        }
        return writer;
    }
    CurrentSceneEntityResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCurrentSceneEntityResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.urn = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.content.push(content_mapping_gen_1.ContentMapping.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.metadataJson = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.baseUrl = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    CurrentSceneEntityResponse.decode = decode;
    function fromJSON(object) {
        return {
            urn: isSet(object.urn) ? String(object.urn) : "",
            content: Array.isArray(object === null || object === void 0 ? void 0 : object.content) ? object.content.map((e) => content_mapping_gen_1.ContentMapping.fromJSON(e)) : [],
            metadataJson: isSet(object.metadataJson) ? String(object.metadataJson) : "",
            baseUrl: isSet(object.baseUrl) ? String(object.baseUrl) : "",
        };
    }
    CurrentSceneEntityResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.urn !== undefined && (obj.urn = message.urn);
        if (message.content) {
            obj.content = message.content.map((e) => e ? content_mapping_gen_1.ContentMapping.toJSON(e) : undefined);
        }
        else {
            obj.content = [];
        }
        message.metadataJson !== undefined && (obj.metadataJson = message.metadataJson);
        message.baseUrl !== undefined && (obj.baseUrl = message.baseUrl);
        return obj;
    }
    CurrentSceneEntityResponse.toJSON = toJSON;
    function create(base) {
        return CurrentSceneEntityResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    CurrentSceneEntityResponse.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseCurrentSceneEntityResponse();
        message.urn = (_a = object.urn) !== null && _a !== void 0 ? _a : "";
        message.content = ((_b = object.content) === null || _b === void 0 ? void 0 : _b.map((e) => content_mapping_gen_1.ContentMapping.fromPartial(e))) || [];
        message.metadataJson = (_c = object.metadataJson) !== null && _c !== void 0 ? _c : "";
        message.baseUrl = (_d = object.baseUrl) !== null && _d !== void 0 ? _d : "";
        return message;
    }
    CurrentSceneEntityResponse.fromPartial = fromPartial;
})(CurrentSceneEntityResponse = exports.CurrentSceneEntityResponse || (exports.CurrentSceneEntityResponse = {}));
exports.RuntimeServiceDefinition = {
    name: "RuntimeService",
    fullName: "decentraland.kernel.apis.RuntimeService",
    methods: {
        /** Provides information about the current realm */
        getRealm: {
            name: "GetRealm",
            requestType: GetRealmRequest,
            requestStream: false,
            responseType: GetRealmResponse,
            responseStream: false,
            options: {},
        },
        /**
         * Provides information about the Decentraland Time, which is coordinated
         * across players.
         */
        getWorldTime: {
            name: "GetWorldTime",
            requestType: GetWorldTimeRequest,
            requestStream: false,
            responseType: GetWorldTimeResponse,
            responseStream: false,
            options: {},
        },
        /**
         * Returns the file content of a deployed asset. If the file doesn't
         * exist or cannot be retrieved, the RPC call throws an error.
         * This method is called to load any assets deployed among the scene,
         * runtime may cache this response much more than the provided "fetch" function.
         */
        readFile: {
            name: "ReadFile",
            requestType: ReadFileRequest,
            requestStream: false,
            responseType: ReadFileResponse,
            responseStream: false,
            options: {},
        },
        /** Returns information about the current scene. This is the replacement of GetBootstrapData */
        getSceneInformation: {
            name: "GetSceneInformation",
            requestType: CurrentSceneEntityRequest,
            requestStream: false,
            responseType: CurrentSceneEntityResponse,
            responseStream: false,
            options: {},
        },
    },
};
var tsProtoGlobalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (tsProtoGlobalThis.Buffer) {
        return Uint8Array.from(tsProtoGlobalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = tsProtoGlobalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (tsProtoGlobalThis.Buffer) {
        return tsProtoGlobalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(String.fromCharCode(byte));
        });
        return tsProtoGlobalThis.btoa(bin.join(""));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=runtime.gen.js.map