"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestingServiceDefinition = exports.SetCameraTransformTestCommandResponse = exports.SetCameraTransformTestCommand_Quaternion = exports.SetCameraTransformTestCommand_Vector3 = exports.SetCameraTransformTestCommand = exports.TestPlanResponse = exports.TestPlan_TestPlanEntry = exports.TestPlan = exports.TestResultResponse = exports.TestResult = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "decentraland.kernel.apis";
function createBaseTestResult() {
    return { name: "", ok: false, error: undefined, stack: undefined, totalFrames: 0, totalTime: 0 };
}
var TestResult;
(function (TestResult) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.ok === true) {
            writer.uint32(16).bool(message.ok);
        }
        if (message.error !== undefined) {
            writer.uint32(26).string(message.error);
        }
        if (message.stack !== undefined) {
            writer.uint32(34).string(message.stack);
        }
        if (message.totalFrames !== 0) {
            writer.uint32(40).uint32(message.totalFrames);
        }
        if (message.totalTime !== 0) {
            writer.uint32(53).float(message.totalTime);
        }
        return writer;
    }
    TestResult.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTestResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.ok = reader.bool();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.stack = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.totalFrames = reader.uint32();
                    continue;
                case 6:
                    if (tag !== 53) {
                        break;
                    }
                    message.totalTime = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    TestResult.decode = decode;
    function fromJSON(object) {
        return {
            name: isSet(object.name) ? String(object.name) : "",
            ok: isSet(object.ok) ? Boolean(object.ok) : false,
            error: isSet(object.error) ? String(object.error) : undefined,
            stack: isSet(object.stack) ? String(object.stack) : undefined,
            totalFrames: isSet(object.totalFrames) ? Number(object.totalFrames) : 0,
            totalTime: isSet(object.totalTime) ? Number(object.totalTime) : 0,
        };
    }
    TestResult.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.ok !== undefined && (obj.ok = message.ok);
        message.error !== undefined && (obj.error = message.error);
        message.stack !== undefined && (obj.stack = message.stack);
        message.totalFrames !== undefined && (obj.totalFrames = Math.round(message.totalFrames));
        message.totalTime !== undefined && (obj.totalTime = message.totalTime);
        return obj;
    }
    TestResult.toJSON = toJSON;
    function create(base) {
        return TestResult.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    TestResult.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseTestResult();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.ok = (_b = object.ok) !== null && _b !== void 0 ? _b : false;
        message.error = (_c = object.error) !== null && _c !== void 0 ? _c : undefined;
        message.stack = (_d = object.stack) !== null && _d !== void 0 ? _d : undefined;
        message.totalFrames = (_e = object.totalFrames) !== null && _e !== void 0 ? _e : 0;
        message.totalTime = (_f = object.totalTime) !== null && _f !== void 0 ? _f : 0;
        return message;
    }
    TestResult.fromPartial = fromPartial;
})(TestResult = exports.TestResult || (exports.TestResult = {}));
function createBaseTestResultResponse() {
    return {};
}
var TestResultResponse;
(function (TestResultResponse) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    TestResultResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTestResultResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    TestResultResponse.decode = decode;
    function fromJSON(_) {
        return {};
    }
    TestResultResponse.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    TestResultResponse.toJSON = toJSON;
    function create(base) {
        return TestResultResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    TestResultResponse.create = create;
    function fromPartial(_) {
        const message = createBaseTestResultResponse();
        return message;
    }
    TestResultResponse.fromPartial = fromPartial;
})(TestResultResponse = exports.TestResultResponse || (exports.TestResultResponse = {}));
function createBaseTestPlan() {
    return { tests: [] };
}
var TestPlan;
(function (TestPlan) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.tests) {
            TestPlan_TestPlanEntry.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    }
    TestPlan.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTestPlan();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.tests.push(TestPlan_TestPlanEntry.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    TestPlan.decode = decode;
    function fromJSON(object) {
        return {
            tests: Array.isArray(object === null || object === void 0 ? void 0 : object.tests) ? object.tests.map((e) => TestPlan_TestPlanEntry.fromJSON(e)) : [],
        };
    }
    TestPlan.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        if (message.tests) {
            obj.tests = message.tests.map((e) => e ? TestPlan_TestPlanEntry.toJSON(e) : undefined);
        }
        else {
            obj.tests = [];
        }
        return obj;
    }
    TestPlan.toJSON = toJSON;
    function create(base) {
        return TestPlan.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    TestPlan.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseTestPlan();
        message.tests = ((_a = object.tests) === null || _a === void 0 ? void 0 : _a.map((e) => TestPlan_TestPlanEntry.fromPartial(e))) || [];
        return message;
    }
    TestPlan.fromPartial = fromPartial;
})(TestPlan = exports.TestPlan || (exports.TestPlan = {}));
function createBaseTestPlan_TestPlanEntry() {
    return { name: "" };
}
var TestPlan_TestPlanEntry;
(function (TestPlan_TestPlanEntry) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        return writer;
    }
    TestPlan_TestPlanEntry.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTestPlan_TestPlanEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    TestPlan_TestPlanEntry.decode = decode;
    function fromJSON(object) {
        return { name: isSet(object.name) ? String(object.name) : "" };
    }
    TestPlan_TestPlanEntry.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        return obj;
    }
    TestPlan_TestPlanEntry.toJSON = toJSON;
    function create(base) {
        return TestPlan_TestPlanEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    TestPlan_TestPlanEntry.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseTestPlan_TestPlanEntry();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        return message;
    }
    TestPlan_TestPlanEntry.fromPartial = fromPartial;
})(TestPlan_TestPlanEntry = exports.TestPlan_TestPlanEntry || (exports.TestPlan_TestPlanEntry = {}));
function createBaseTestPlanResponse() {
    return {};
}
var TestPlanResponse;
(function (TestPlanResponse) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    TestPlanResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTestPlanResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    TestPlanResponse.decode = decode;
    function fromJSON(_) {
        return {};
    }
    TestPlanResponse.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    TestPlanResponse.toJSON = toJSON;
    function create(base) {
        return TestPlanResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    TestPlanResponse.create = create;
    function fromPartial(_) {
        const message = createBaseTestPlanResponse();
        return message;
    }
    TestPlanResponse.fromPartial = fromPartial;
})(TestPlanResponse = exports.TestPlanResponse || (exports.TestPlanResponse = {}));
function createBaseSetCameraTransformTestCommand() {
    return { position: undefined, rotation: undefined };
}
var SetCameraTransformTestCommand;
(function (SetCameraTransformTestCommand) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.position !== undefined) {
            SetCameraTransformTestCommand_Vector3.encode(message.position, writer.uint32(10).fork()).ldelim();
        }
        if (message.rotation !== undefined) {
            SetCameraTransformTestCommand_Quaternion.encode(message.rotation, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    }
    SetCameraTransformTestCommand.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetCameraTransformTestCommand();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.position = SetCameraTransformTestCommand_Vector3.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.rotation = SetCameraTransformTestCommand_Quaternion.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    SetCameraTransformTestCommand.decode = decode;
    function fromJSON(object) {
        return {
            position: isSet(object.position) ? SetCameraTransformTestCommand_Vector3.fromJSON(object.position) : undefined,
            rotation: isSet(object.rotation) ? SetCameraTransformTestCommand_Quaternion.fromJSON(object.rotation) : undefined,
        };
    }
    SetCameraTransformTestCommand.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.position !== undefined &&
            (obj.position = message.position ? SetCameraTransformTestCommand_Vector3.toJSON(message.position) : undefined);
        message.rotation !== undefined &&
            (obj.rotation = message.rotation ? SetCameraTransformTestCommand_Quaternion.toJSON(message.rotation) : undefined);
        return obj;
    }
    SetCameraTransformTestCommand.toJSON = toJSON;
    function create(base) {
        return SetCameraTransformTestCommand.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    SetCameraTransformTestCommand.create = create;
    function fromPartial(object) {
        const message = createBaseSetCameraTransformTestCommand();
        message.position = (object.position !== undefined && object.position !== null)
            ? SetCameraTransformTestCommand_Vector3.fromPartial(object.position)
            : undefined;
        message.rotation = (object.rotation !== undefined && object.rotation !== null)
            ? SetCameraTransformTestCommand_Quaternion.fromPartial(object.rotation)
            : undefined;
        return message;
    }
    SetCameraTransformTestCommand.fromPartial = fromPartial;
})(SetCameraTransformTestCommand = exports.SetCameraTransformTestCommand || (exports.SetCameraTransformTestCommand = {}));
function createBaseSetCameraTransformTestCommand_Vector3() {
    return { x: 0, y: 0, z: 0 };
}
var SetCameraTransformTestCommand_Vector3;
(function (SetCameraTransformTestCommand_Vector3) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.x !== 0) {
            writer.uint32(13).float(message.x);
        }
        if (message.y !== 0) {
            writer.uint32(21).float(message.y);
        }
        if (message.z !== 0) {
            writer.uint32(29).float(message.z);
        }
        return writer;
    }
    SetCameraTransformTestCommand_Vector3.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetCameraTransformTestCommand_Vector3();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 13) {
                        break;
                    }
                    message.x = reader.float();
                    continue;
                case 2:
                    if (tag !== 21) {
                        break;
                    }
                    message.y = reader.float();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.z = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    SetCameraTransformTestCommand_Vector3.decode = decode;
    function fromJSON(object) {
        return {
            x: isSet(object.x) ? Number(object.x) : 0,
            y: isSet(object.y) ? Number(object.y) : 0,
            z: isSet(object.z) ? Number(object.z) : 0,
        };
    }
    SetCameraTransformTestCommand_Vector3.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.x !== undefined && (obj.x = message.x);
        message.y !== undefined && (obj.y = message.y);
        message.z !== undefined && (obj.z = message.z);
        return obj;
    }
    SetCameraTransformTestCommand_Vector3.toJSON = toJSON;
    function create(base) {
        return SetCameraTransformTestCommand_Vector3.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    SetCameraTransformTestCommand_Vector3.create = create;
    function fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseSetCameraTransformTestCommand_Vector3();
        message.x = (_a = object.x) !== null && _a !== void 0 ? _a : 0;
        message.y = (_b = object.y) !== null && _b !== void 0 ? _b : 0;
        message.z = (_c = object.z) !== null && _c !== void 0 ? _c : 0;
        return message;
    }
    SetCameraTransformTestCommand_Vector3.fromPartial = fromPartial;
})(SetCameraTransformTestCommand_Vector3 = exports.SetCameraTransformTestCommand_Vector3 || (exports.SetCameraTransformTestCommand_Vector3 = {}));
function createBaseSetCameraTransformTestCommand_Quaternion() {
    return { x: 0, y: 0, z: 0, w: 0 };
}
var SetCameraTransformTestCommand_Quaternion;
(function (SetCameraTransformTestCommand_Quaternion) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.x !== 0) {
            writer.uint32(13).float(message.x);
        }
        if (message.y !== 0) {
            writer.uint32(21).float(message.y);
        }
        if (message.z !== 0) {
            writer.uint32(29).float(message.z);
        }
        if (message.w !== 0) {
            writer.uint32(37).float(message.w);
        }
        return writer;
    }
    SetCameraTransformTestCommand_Quaternion.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetCameraTransformTestCommand_Quaternion();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 13) {
                        break;
                    }
                    message.x = reader.float();
                    continue;
                case 2:
                    if (tag !== 21) {
                        break;
                    }
                    message.y = reader.float();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.z = reader.float();
                    continue;
                case 4:
                    if (tag !== 37) {
                        break;
                    }
                    message.w = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    SetCameraTransformTestCommand_Quaternion.decode = decode;
    function fromJSON(object) {
        return {
            x: isSet(object.x) ? Number(object.x) : 0,
            y: isSet(object.y) ? Number(object.y) : 0,
            z: isSet(object.z) ? Number(object.z) : 0,
            w: isSet(object.w) ? Number(object.w) : 0,
        };
    }
    SetCameraTransformTestCommand_Quaternion.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.x !== undefined && (obj.x = message.x);
        message.y !== undefined && (obj.y = message.y);
        message.z !== undefined && (obj.z = message.z);
        message.w !== undefined && (obj.w = message.w);
        return obj;
    }
    SetCameraTransformTestCommand_Quaternion.toJSON = toJSON;
    function create(base) {
        return SetCameraTransformTestCommand_Quaternion.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    SetCameraTransformTestCommand_Quaternion.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseSetCameraTransformTestCommand_Quaternion();
        message.x = (_a = object.x) !== null && _a !== void 0 ? _a : 0;
        message.y = (_b = object.y) !== null && _b !== void 0 ? _b : 0;
        message.z = (_c = object.z) !== null && _c !== void 0 ? _c : 0;
        message.w = (_d = object.w) !== null && _d !== void 0 ? _d : 0;
        return message;
    }
    SetCameraTransformTestCommand_Quaternion.fromPartial = fromPartial;
})(SetCameraTransformTestCommand_Quaternion = exports.SetCameraTransformTestCommand_Quaternion || (exports.SetCameraTransformTestCommand_Quaternion = {}));
function createBaseSetCameraTransformTestCommandResponse() {
    return {};
}
var SetCameraTransformTestCommandResponse;
(function (SetCameraTransformTestCommandResponse) {
    function encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    }
    SetCameraTransformTestCommandResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetCameraTransformTestCommandResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    SetCameraTransformTestCommandResponse.decode = decode;
    function fromJSON(_) {
        return {};
    }
    SetCameraTransformTestCommandResponse.fromJSON = fromJSON;
    function toJSON(_) {
        const obj = {};
        return obj;
    }
    SetCameraTransformTestCommandResponse.toJSON = toJSON;
    function create(base) {
        return SetCameraTransformTestCommandResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    SetCameraTransformTestCommandResponse.create = create;
    function fromPartial(_) {
        const message = createBaseSetCameraTransformTestCommandResponse();
        return message;
    }
    SetCameraTransformTestCommandResponse.fromPartial = fromPartial;
})(SetCameraTransformTestCommandResponse = exports.SetCameraTransformTestCommandResponse || (exports.SetCameraTransformTestCommandResponse = {}));
exports.TestingServiceDefinition = {
    name: "TestingService",
    fullName: "decentraland.kernel.apis.TestingService",
    methods: {
        /** sends a test result to the test runner */
        logTestResult: {
            name: "LogTestResult",
            requestType: TestResult,
            requestStream: false,
            responseType: TestResultResponse,
            responseStream: false,
            options: {},
        },
        /** send a list of all planned tests to the test runner */
        plan: {
            name: "Plan",
            requestType: TestPlan,
            requestStream: false,
            responseType: TestPlanResponse,
            responseStream: false,
            options: {},
        },
        /** sets the camera position and rotation in the engine */
        setCameraTransform: {
            name: "SetCameraTransform",
            requestType: SetCameraTransformTestCommand,
            requestStream: false,
            responseType: SetCameraTransformTestCommandResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=testing.gen.js.map