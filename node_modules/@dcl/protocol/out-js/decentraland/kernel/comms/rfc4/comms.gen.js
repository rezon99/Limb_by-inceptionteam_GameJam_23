"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Voice = exports.Scene = exports.Chat = exports.ProfileResponse = exports.ProfileRequest = exports.AnnounceProfileVersion = exports.Position = exports.Packet = exports.voice_VoiceCodecToJSON = exports.voice_VoiceCodecFromJSON = exports.Voice_VoiceCodec = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "decentraland.kernel.comms.rfc4";
var Voice_VoiceCodec;
(function (Voice_VoiceCodec) {
    Voice_VoiceCodec[Voice_VoiceCodec["VC_OPUS"] = 0] = "VC_OPUS";
    Voice_VoiceCodec[Voice_VoiceCodec["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Voice_VoiceCodec = exports.Voice_VoiceCodec || (exports.Voice_VoiceCodec = {}));
function voice_VoiceCodecFromJSON(object) {
    switch (object) {
        case 0:
        case "VC_OPUS":
            return Voice_VoiceCodec.VC_OPUS;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Voice_VoiceCodec.UNRECOGNIZED;
    }
}
exports.voice_VoiceCodecFromJSON = voice_VoiceCodecFromJSON;
function voice_VoiceCodecToJSON(object) {
    switch (object) {
        case Voice_VoiceCodec.VC_OPUS:
            return "VC_OPUS";
        case Voice_VoiceCodec.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.voice_VoiceCodecToJSON = voice_VoiceCodecToJSON;
function createBasePacket() {
    return { message: undefined };
}
var Packet;
(function (Packet) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        var _a;
        switch ((_a = message.message) === null || _a === void 0 ? void 0 : _a.$case) {
            case "position":
                Position.encode(message.message.position, writer.uint32(10).fork()).ldelim();
                break;
            case "profileVersion":
                AnnounceProfileVersion.encode(message.message.profileVersion, writer.uint32(18).fork()).ldelim();
                break;
            case "profileRequest":
                ProfileRequest.encode(message.message.profileRequest, writer.uint32(26).fork()).ldelim();
                break;
            case "profileResponse":
                ProfileResponse.encode(message.message.profileResponse, writer.uint32(34).fork()).ldelim();
                break;
            case "chat":
                Chat.encode(message.message.chat, writer.uint32(42).fork()).ldelim();
                break;
            case "scene":
                Scene.encode(message.message.scene, writer.uint32(50).fork()).ldelim();
                break;
            case "voice":
                Voice.encode(message.message.voice, writer.uint32(58).fork()).ldelim();
                break;
        }
        return writer;
    }
    Packet.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePacket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message = { $case: "position", position: Position.decode(reader, reader.uint32()) };
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.message = {
                        $case: "profileVersion",
                        profileVersion: AnnounceProfileVersion.decode(reader, reader.uint32()),
                    };
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.message = { $case: "profileRequest", profileRequest: ProfileRequest.decode(reader, reader.uint32()) };
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.message = {
                        $case: "profileResponse",
                        profileResponse: ProfileResponse.decode(reader, reader.uint32()),
                    };
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.message = { $case: "chat", chat: Chat.decode(reader, reader.uint32()) };
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.message = { $case: "scene", scene: Scene.decode(reader, reader.uint32()) };
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.message = { $case: "voice", voice: Voice.decode(reader, reader.uint32()) };
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Packet.decode = decode;
    function fromJSON(object) {
        return {
            message: isSet(object.position)
                ? { $case: "position", position: Position.fromJSON(object.position) }
                : isSet(object.profileVersion)
                    ? { $case: "profileVersion", profileVersion: AnnounceProfileVersion.fromJSON(object.profileVersion) }
                    : isSet(object.profileRequest)
                        ? { $case: "profileRequest", profileRequest: ProfileRequest.fromJSON(object.profileRequest) }
                        : isSet(object.profileResponse)
                            ? { $case: "profileResponse", profileResponse: ProfileResponse.fromJSON(object.profileResponse) }
                            : isSet(object.chat)
                                ? { $case: "chat", chat: Chat.fromJSON(object.chat) }
                                : isSet(object.scene)
                                    ? { $case: "scene", scene: Scene.fromJSON(object.scene) }
                                    : isSet(object.voice)
                                        ? { $case: "voice", voice: Voice.fromJSON(object.voice) }
                                        : undefined,
        };
    }
    Packet.fromJSON = fromJSON;
    function toJSON(message) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w;
        const obj = {};
        ((_a = message.message) === null || _a === void 0 ? void 0 : _a.$case) === "position" &&
            (obj.position = ((_b = message.message) === null || _b === void 0 ? void 0 : _b.position) ? Position.toJSON((_c = message.message) === null || _c === void 0 ? void 0 : _c.position) : undefined);
        ((_d = message.message) === null || _d === void 0 ? void 0 : _d.$case) === "profileVersion" &&
            (obj.profileVersion = ((_e = message.message) === null || _e === void 0 ? void 0 : _e.profileVersion)
                ? AnnounceProfileVersion.toJSON((_f = message.message) === null || _f === void 0 ? void 0 : _f.profileVersion)
                : undefined);
        ((_g = message.message) === null || _g === void 0 ? void 0 : _g.$case) === "profileRequest" &&
            (obj.profileRequest = ((_h = message.message) === null || _h === void 0 ? void 0 : _h.profileRequest)
                ? ProfileRequest.toJSON((_j = message.message) === null || _j === void 0 ? void 0 : _j.profileRequest)
                : undefined);
        ((_k = message.message) === null || _k === void 0 ? void 0 : _k.$case) === "profileResponse" &&
            (obj.profileResponse = ((_l = message.message) === null || _l === void 0 ? void 0 : _l.profileResponse)
                ? ProfileResponse.toJSON((_m = message.message) === null || _m === void 0 ? void 0 : _m.profileResponse)
                : undefined);
        ((_o = message.message) === null || _o === void 0 ? void 0 : _o.$case) === "chat" &&
            (obj.chat = ((_p = message.message) === null || _p === void 0 ? void 0 : _p.chat) ? Chat.toJSON((_q = message.message) === null || _q === void 0 ? void 0 : _q.chat) : undefined);
        ((_r = message.message) === null || _r === void 0 ? void 0 : _r.$case) === "scene" &&
            (obj.scene = ((_s = message.message) === null || _s === void 0 ? void 0 : _s.scene) ? Scene.toJSON((_t = message.message) === null || _t === void 0 ? void 0 : _t.scene) : undefined);
        ((_u = message.message) === null || _u === void 0 ? void 0 : _u.$case) === "voice" &&
            (obj.voice = ((_v = message.message) === null || _v === void 0 ? void 0 : _v.voice) ? Voice.toJSON((_w = message.message) === null || _w === void 0 ? void 0 : _w.voice) : undefined);
        return obj;
    }
    Packet.toJSON = toJSON;
    function create(base) {
        return Packet.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Packet.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w;
        const message = createBasePacket();
        if (((_a = object.message) === null || _a === void 0 ? void 0 : _a.$case) === "position" &&
            ((_b = object.message) === null || _b === void 0 ? void 0 : _b.position) !== undefined &&
            ((_c = object.message) === null || _c === void 0 ? void 0 : _c.position) !== null) {
            message.message = { $case: "position", position: Position.fromPartial(object.message.position) };
        }
        if (((_d = object.message) === null || _d === void 0 ? void 0 : _d.$case) === "profileVersion" &&
            ((_e = object.message) === null || _e === void 0 ? void 0 : _e.profileVersion) !== undefined &&
            ((_f = object.message) === null || _f === void 0 ? void 0 : _f.profileVersion) !== null) {
            message.message = {
                $case: "profileVersion",
                profileVersion: AnnounceProfileVersion.fromPartial(object.message.profileVersion),
            };
        }
        if (((_g = object.message) === null || _g === void 0 ? void 0 : _g.$case) === "profileRequest" &&
            ((_h = object.message) === null || _h === void 0 ? void 0 : _h.profileRequest) !== undefined &&
            ((_j = object.message) === null || _j === void 0 ? void 0 : _j.profileRequest) !== null) {
            message.message = {
                $case: "profileRequest",
                profileRequest: ProfileRequest.fromPartial(object.message.profileRequest),
            };
        }
        if (((_k = object.message) === null || _k === void 0 ? void 0 : _k.$case) === "profileResponse" &&
            ((_l = object.message) === null || _l === void 0 ? void 0 : _l.profileResponse) !== undefined &&
            ((_m = object.message) === null || _m === void 0 ? void 0 : _m.profileResponse) !== null) {
            message.message = {
                $case: "profileResponse",
                profileResponse: ProfileResponse.fromPartial(object.message.profileResponse),
            };
        }
        if (((_o = object.message) === null || _o === void 0 ? void 0 : _o.$case) === "chat" && ((_p = object.message) === null || _p === void 0 ? void 0 : _p.chat) !== undefined && ((_q = object.message) === null || _q === void 0 ? void 0 : _q.chat) !== null) {
            message.message = { $case: "chat", chat: Chat.fromPartial(object.message.chat) };
        }
        if (((_r = object.message) === null || _r === void 0 ? void 0 : _r.$case) === "scene" && ((_s = object.message) === null || _s === void 0 ? void 0 : _s.scene) !== undefined && ((_t = object.message) === null || _t === void 0 ? void 0 : _t.scene) !== null) {
            message.message = { $case: "scene", scene: Scene.fromPartial(object.message.scene) };
        }
        if (((_u = object.message) === null || _u === void 0 ? void 0 : _u.$case) === "voice" && ((_v = object.message) === null || _v === void 0 ? void 0 : _v.voice) !== undefined && ((_w = object.message) === null || _w === void 0 ? void 0 : _w.voice) !== null) {
            message.message = { $case: "voice", voice: Voice.fromPartial(object.message.voice) };
        }
        return message;
    }
    Packet.fromPartial = fromPartial;
})(Packet = exports.Packet || (exports.Packet = {}));
function createBasePosition() {
    return { index: 0, positionX: 0, positionY: 0, positionZ: 0, rotationX: 0, rotationY: 0, rotationZ: 0, rotationW: 0 };
}
var Position;
(function (Position) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.index !== 0) {
            writer.uint32(8).uint32(message.index);
        }
        if (message.positionX !== 0) {
            writer.uint32(29).float(message.positionX);
        }
        if (message.positionY !== 0) {
            writer.uint32(37).float(message.positionY);
        }
        if (message.positionZ !== 0) {
            writer.uint32(45).float(message.positionZ);
        }
        if (message.rotationX !== 0) {
            writer.uint32(53).float(message.rotationX);
        }
        if (message.rotationY !== 0) {
            writer.uint32(61).float(message.rotationY);
        }
        if (message.rotationZ !== 0) {
            writer.uint32(69).float(message.rotationZ);
        }
        if (message.rotationW !== 0) {
            writer.uint32(77).float(message.rotationW);
        }
        return writer;
    }
    Position.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePosition();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.index = reader.uint32();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.positionX = reader.float();
                    continue;
                case 4:
                    if (tag !== 37) {
                        break;
                    }
                    message.positionY = reader.float();
                    continue;
                case 5:
                    if (tag !== 45) {
                        break;
                    }
                    message.positionZ = reader.float();
                    continue;
                case 6:
                    if (tag !== 53) {
                        break;
                    }
                    message.rotationX = reader.float();
                    continue;
                case 7:
                    if (tag !== 61) {
                        break;
                    }
                    message.rotationY = reader.float();
                    continue;
                case 8:
                    if (tag !== 69) {
                        break;
                    }
                    message.rotationZ = reader.float();
                    continue;
                case 9:
                    if (tag !== 77) {
                        break;
                    }
                    message.rotationW = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Position.decode = decode;
    function fromJSON(object) {
        return {
            index: isSet(object.index) ? Number(object.index) : 0,
            positionX: isSet(object.positionX) ? Number(object.positionX) : 0,
            positionY: isSet(object.positionY) ? Number(object.positionY) : 0,
            positionZ: isSet(object.positionZ) ? Number(object.positionZ) : 0,
            rotationX: isSet(object.rotationX) ? Number(object.rotationX) : 0,
            rotationY: isSet(object.rotationY) ? Number(object.rotationY) : 0,
            rotationZ: isSet(object.rotationZ) ? Number(object.rotationZ) : 0,
            rotationW: isSet(object.rotationW) ? Number(object.rotationW) : 0,
        };
    }
    Position.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.index !== undefined && (obj.index = Math.round(message.index));
        message.positionX !== undefined && (obj.positionX = message.positionX);
        message.positionY !== undefined && (obj.positionY = message.positionY);
        message.positionZ !== undefined && (obj.positionZ = message.positionZ);
        message.rotationX !== undefined && (obj.rotationX = message.rotationX);
        message.rotationY !== undefined && (obj.rotationY = message.rotationY);
        message.rotationZ !== undefined && (obj.rotationZ = message.rotationZ);
        message.rotationW !== undefined && (obj.rotationW = message.rotationW);
        return obj;
    }
    Position.toJSON = toJSON;
    function create(base) {
        return Position.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Position.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBasePosition();
        message.index = (_a = object.index) !== null && _a !== void 0 ? _a : 0;
        message.positionX = (_b = object.positionX) !== null && _b !== void 0 ? _b : 0;
        message.positionY = (_c = object.positionY) !== null && _c !== void 0 ? _c : 0;
        message.positionZ = (_d = object.positionZ) !== null && _d !== void 0 ? _d : 0;
        message.rotationX = (_e = object.rotationX) !== null && _e !== void 0 ? _e : 0;
        message.rotationY = (_f = object.rotationY) !== null && _f !== void 0 ? _f : 0;
        message.rotationZ = (_g = object.rotationZ) !== null && _g !== void 0 ? _g : 0;
        message.rotationW = (_h = object.rotationW) !== null && _h !== void 0 ? _h : 0;
        return message;
    }
    Position.fromPartial = fromPartial;
})(Position = exports.Position || (exports.Position = {}));
function createBaseAnnounceProfileVersion() {
    return { profileVersion: 0 };
}
var AnnounceProfileVersion;
(function (AnnounceProfileVersion) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.profileVersion !== 0) {
            writer.uint32(8).uint32(message.profileVersion);
        }
        return writer;
    }
    AnnounceProfileVersion.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAnnounceProfileVersion();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.profileVersion = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    AnnounceProfileVersion.decode = decode;
    function fromJSON(object) {
        return { profileVersion: isSet(object.profileVersion) ? Number(object.profileVersion) : 0 };
    }
    AnnounceProfileVersion.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.profileVersion !== undefined && (obj.profileVersion = Math.round(message.profileVersion));
        return obj;
    }
    AnnounceProfileVersion.toJSON = toJSON;
    function create(base) {
        return AnnounceProfileVersion.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    AnnounceProfileVersion.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseAnnounceProfileVersion();
        message.profileVersion = (_a = object.profileVersion) !== null && _a !== void 0 ? _a : 0;
        return message;
    }
    AnnounceProfileVersion.fromPartial = fromPartial;
})(AnnounceProfileVersion = exports.AnnounceProfileVersion || (exports.AnnounceProfileVersion = {}));
function createBaseProfileRequest() {
    return { address: "", profileVersion: 0 };
}
var ProfileRequest;
(function (ProfileRequest) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(34).string(message.address);
        }
        if (message.profileVersion !== 0) {
            writer.uint32(24).uint32(message.profileVersion);
        }
        return writer;
    }
    ProfileRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseProfileRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.profileVersion = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ProfileRequest.decode = decode;
    function fromJSON(object) {
        return {
            address: isSet(object.address) ? String(object.address) : "",
            profileVersion: isSet(object.profileVersion) ? Number(object.profileVersion) : 0,
        };
    }
    ProfileRequest.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.address !== undefined && (obj.address = message.address);
        message.profileVersion !== undefined && (obj.profileVersion = Math.round(message.profileVersion));
        return obj;
    }
    ProfileRequest.toJSON = toJSON;
    function create(base) {
        return ProfileRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ProfileRequest.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseProfileRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        message.profileVersion = (_b = object.profileVersion) !== null && _b !== void 0 ? _b : 0;
        return message;
    }
    ProfileRequest.fromPartial = fromPartial;
})(ProfileRequest = exports.ProfileRequest || (exports.ProfileRequest = {}));
function createBaseProfileResponse() {
    return { serializedProfile: "", baseUrl: "" };
}
var ProfileResponse;
(function (ProfileResponse) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.serializedProfile !== "") {
            writer.uint32(10).string(message.serializedProfile);
        }
        if (message.baseUrl !== "") {
            writer.uint32(18).string(message.baseUrl);
        }
        return writer;
    }
    ProfileResponse.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseProfileResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.serializedProfile = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.baseUrl = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    ProfileResponse.decode = decode;
    function fromJSON(object) {
        return {
            serializedProfile: isSet(object.serializedProfile) ? String(object.serializedProfile) : "",
            baseUrl: isSet(object.baseUrl) ? String(object.baseUrl) : "",
        };
    }
    ProfileResponse.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.serializedProfile !== undefined && (obj.serializedProfile = message.serializedProfile);
        message.baseUrl !== undefined && (obj.baseUrl = message.baseUrl);
        return obj;
    }
    ProfileResponse.toJSON = toJSON;
    function create(base) {
        return ProfileResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    ProfileResponse.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseProfileResponse();
        message.serializedProfile = (_a = object.serializedProfile) !== null && _a !== void 0 ? _a : "";
        message.baseUrl = (_b = object.baseUrl) !== null && _b !== void 0 ? _b : "";
        return message;
    }
    ProfileResponse.fromPartial = fromPartial;
})(ProfileResponse = exports.ProfileResponse || (exports.ProfileResponse = {}));
function createBaseChat() {
    return { message: "", timestamp: 0 };
}
var Chat;
(function (Chat) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.message !== "") {
            writer.uint32(10).string(message.message);
        }
        if (message.timestamp !== 0) {
            writer.uint32(17).double(message.timestamp);
        }
        return writer;
    }
    Chat.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChat();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                case 2:
                    if (tag !== 17) {
                        break;
                    }
                    message.timestamp = reader.double();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Chat.decode = decode;
    function fromJSON(object) {
        return {
            message: isSet(object.message) ? String(object.message) : "",
            timestamp: isSet(object.timestamp) ? Number(object.timestamp) : 0,
        };
    }
    Chat.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.message !== undefined && (obj.message = message.message);
        message.timestamp !== undefined && (obj.timestamp = message.timestamp);
        return obj;
    }
    Chat.toJSON = toJSON;
    function create(base) {
        return Chat.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Chat.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseChat();
        message.message = (_a = object.message) !== null && _a !== void 0 ? _a : "";
        message.timestamp = (_b = object.timestamp) !== null && _b !== void 0 ? _b : 0;
        return message;
    }
    Chat.fromPartial = fromPartial;
})(Chat = exports.Chat || (exports.Chat = {}));
function createBaseScene() {
    return { sceneId: "", data: new Uint8Array() };
}
var Scene;
(function (Scene) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sceneId !== "") {
            writer.uint32(10).string(message.sceneId);
        }
        if (message.data.length !== 0) {
            writer.uint32(18).bytes(message.data);
        }
        return writer;
    }
    Scene.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseScene();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sceneId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.data = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Scene.decode = decode;
    function fromJSON(object) {
        return {
            sceneId: isSet(object.sceneId) ? String(object.sceneId) : "",
            data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(),
        };
    }
    Scene.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.sceneId !== undefined && (obj.sceneId = message.sceneId);
        message.data !== undefined &&
            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));
        return obj;
    }
    Scene.toJSON = toJSON;
    function create(base) {
        return Scene.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Scene.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseScene();
        message.sceneId = (_a = object.sceneId) !== null && _a !== void 0 ? _a : "";
        message.data = (_b = object.data) !== null && _b !== void 0 ? _b : new Uint8Array();
        return message;
    }
    Scene.fromPartial = fromPartial;
})(Scene = exports.Scene || (exports.Scene = {}));
function createBaseVoice() {
    return { encodedSamples: new Uint8Array(), index: 0, codec: 0 };
}
var Voice;
(function (Voice) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.encodedSamples.length !== 0) {
            writer.uint32(10).bytes(message.encodedSamples);
        }
        if (message.index !== 0) {
            writer.uint32(16).uint32(message.index);
        }
        if (message.codec !== 0) {
            writer.uint32(24).int32(message.codec);
        }
        return writer;
    }
    Voice.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVoice();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.encodedSamples = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.index = reader.uint32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.codec = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Voice.decode = decode;
    function fromJSON(object) {
        return {
            encodedSamples: isSet(object.encodedSamples) ? bytesFromBase64(object.encodedSamples) : new Uint8Array(),
            index: isSet(object.index) ? Number(object.index) : 0,
            codec: isSet(object.codec) ? voice_VoiceCodecFromJSON(object.codec) : 0,
        };
    }
    Voice.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.encodedSamples !== undefined &&
            (obj.encodedSamples = base64FromBytes(message.encodedSamples !== undefined ? message.encodedSamples : new Uint8Array()));
        message.index !== undefined && (obj.index = Math.round(message.index));
        message.codec !== undefined && (obj.codec = voice_VoiceCodecToJSON(message.codec));
        return obj;
    }
    Voice.toJSON = toJSON;
    function create(base) {
        return Voice.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Voice.create = create;
    function fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseVoice();
        message.encodedSamples = (_a = object.encodedSamples) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.index = (_b = object.index) !== null && _b !== void 0 ? _b : 0;
        message.codec = (_c = object.codec) !== null && _c !== void 0 ? _c : 0;
        return message;
    }
    Voice.fromPartial = fromPartial;
})(Voice = exports.Voice || (exports.Voice = {}));
var tsProtoGlobalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (tsProtoGlobalThis.Buffer) {
        return Uint8Array.from(tsProtoGlobalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = tsProtoGlobalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (tsProtoGlobalThis.Buffer) {
        return tsProtoGlobalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(String.fromCharCode(byte));
        });
        return tsProtoGlobalThis.btoa(bin.join(""));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=comms.gen.js.map