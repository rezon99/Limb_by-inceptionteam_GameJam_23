"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PBAudioSource = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "decentraland.sdk.components";
function createBasePBAudioSource() {
    return { playing: undefined, volume: undefined, loop: undefined, pitch: undefined, audioClipUrl: "" };
}
var PBAudioSource;
(function (PBAudioSource) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.playing !== undefined) {
            writer.uint32(8).bool(message.playing);
        }
        if (message.volume !== undefined) {
            writer.uint32(21).float(message.volume);
        }
        if (message.loop !== undefined) {
            writer.uint32(24).bool(message.loop);
        }
        if (message.pitch !== undefined) {
            writer.uint32(37).float(message.pitch);
        }
        if (message.audioClipUrl !== "") {
            writer.uint32(42).string(message.audioClipUrl);
        }
        return writer;
    }
    PBAudioSource.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePBAudioSource();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.playing = reader.bool();
                    continue;
                case 2:
                    if (tag !== 21) {
                        break;
                    }
                    message.volume = reader.float();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.loop = reader.bool();
                    continue;
                case 4:
                    if (tag !== 37) {
                        break;
                    }
                    message.pitch = reader.float();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.audioClipUrl = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PBAudioSource.decode = decode;
    function fromJSON(object) {
        return {
            playing: isSet(object.playing) ? Boolean(object.playing) : undefined,
            volume: isSet(object.volume) ? Number(object.volume) : undefined,
            loop: isSet(object.loop) ? Boolean(object.loop) : undefined,
            pitch: isSet(object.pitch) ? Number(object.pitch) : undefined,
            audioClipUrl: isSet(object.audioClipUrl) ? String(object.audioClipUrl) : "",
        };
    }
    PBAudioSource.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.playing !== undefined && (obj.playing = message.playing);
        message.volume !== undefined && (obj.volume = message.volume);
        message.loop !== undefined && (obj.loop = message.loop);
        message.pitch !== undefined && (obj.pitch = message.pitch);
        message.audioClipUrl !== undefined && (obj.audioClipUrl = message.audioClipUrl);
        return obj;
    }
    PBAudioSource.toJSON = toJSON;
    function create(base) {
        return PBAudioSource.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PBAudioSource.create = create;
    function fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBasePBAudioSource();
        message.playing = (_a = object.playing) !== null && _a !== void 0 ? _a : undefined;
        message.volume = (_b = object.volume) !== null && _b !== void 0 ? _b : undefined;
        message.loop = (_c = object.loop) !== null && _c !== void 0 ? _c : undefined;
        message.pitch = (_d = object.pitch) !== null && _d !== void 0 ? _d : undefined;
        message.audioClipUrl = (_e = object.audioClipUrl) !== null && _e !== void 0 ? _e : "";
        return message;
    }
    PBAudioSource.fromPartial = fromPartial;
})(PBAudioSource = exports.PBAudioSource || (exports.PBAudioSource = {}));
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=audio_source.gen.js.map