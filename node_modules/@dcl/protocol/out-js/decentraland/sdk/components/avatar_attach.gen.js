"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PBAvatarAttach = exports.avatarAnchorPointTypeToJSON = exports.avatarAnchorPointTypeFromJSON = exports.AvatarAnchorPointType = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "decentraland.sdk.components";
/** AvatarAnchorPointType determines the part of the avatar's body that anchors the Entity. */
var AvatarAnchorPointType;
(function (AvatarAnchorPointType) {
    AvatarAnchorPointType[AvatarAnchorPointType["AAPT_POSITION"] = 0] = "AAPT_POSITION";
    AvatarAnchorPointType[AvatarAnchorPointType["AAPT_NAME_TAG"] = 1] = "AAPT_NAME_TAG";
    AvatarAnchorPointType[AvatarAnchorPointType["AAPT_LEFT_HAND"] = 2] = "AAPT_LEFT_HAND";
    AvatarAnchorPointType[AvatarAnchorPointType["AAPT_RIGHT_HAND"] = 3] = "AAPT_RIGHT_HAND";
    AvatarAnchorPointType[AvatarAnchorPointType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(AvatarAnchorPointType = exports.AvatarAnchorPointType || (exports.AvatarAnchorPointType = {}));
function avatarAnchorPointTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "AAPT_POSITION":
            return AvatarAnchorPointType.AAPT_POSITION;
        case 1:
        case "AAPT_NAME_TAG":
            return AvatarAnchorPointType.AAPT_NAME_TAG;
        case 2:
        case "AAPT_LEFT_HAND":
            return AvatarAnchorPointType.AAPT_LEFT_HAND;
        case 3:
        case "AAPT_RIGHT_HAND":
            return AvatarAnchorPointType.AAPT_RIGHT_HAND;
        case -1:
        case "UNRECOGNIZED":
        default:
            return AvatarAnchorPointType.UNRECOGNIZED;
    }
}
exports.avatarAnchorPointTypeFromJSON = avatarAnchorPointTypeFromJSON;
function avatarAnchorPointTypeToJSON(object) {
    switch (object) {
        case AvatarAnchorPointType.AAPT_POSITION:
            return "AAPT_POSITION";
        case AvatarAnchorPointType.AAPT_NAME_TAG:
            return "AAPT_NAME_TAG";
        case AvatarAnchorPointType.AAPT_LEFT_HAND:
            return "AAPT_LEFT_HAND";
        case AvatarAnchorPointType.AAPT_RIGHT_HAND:
            return "AAPT_RIGHT_HAND";
        case AvatarAnchorPointType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.avatarAnchorPointTypeToJSON = avatarAnchorPointTypeToJSON;
function createBasePBAvatarAttach() {
    return { avatarId: undefined, anchorPointId: 0 };
}
var PBAvatarAttach;
(function (PBAvatarAttach) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.avatarId !== undefined) {
            writer.uint32(10).string(message.avatarId);
        }
        if (message.anchorPointId !== 0) {
            writer.uint32(16).int32(message.anchorPointId);
        }
        return writer;
    }
    PBAvatarAttach.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePBAvatarAttach();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.avatarId = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.anchorPointId = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PBAvatarAttach.decode = decode;
    function fromJSON(object) {
        return {
            avatarId: isSet(object.avatarId) ? String(object.avatarId) : undefined,
            anchorPointId: isSet(object.anchorPointId) ? avatarAnchorPointTypeFromJSON(object.anchorPointId) : 0,
        };
    }
    PBAvatarAttach.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.avatarId !== undefined && (obj.avatarId = message.avatarId);
        message.anchorPointId !== undefined && (obj.anchorPointId = avatarAnchorPointTypeToJSON(message.anchorPointId));
        return obj;
    }
    PBAvatarAttach.toJSON = toJSON;
    function create(base) {
        return PBAvatarAttach.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PBAvatarAttach.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBasePBAvatarAttach();
        message.avatarId = (_a = object.avatarId) !== null && _a !== void 0 ? _a : undefined;
        message.anchorPointId = (_b = object.anchorPointId) !== null && _b !== void 0 ? _b : 0;
        return message;
    }
    PBAvatarAttach.fromPartial = fromPartial;
})(PBAvatarAttach = exports.PBAvatarAttach || (exports.PBAvatarAttach = {}));
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=avatar_attach.gen.js.map