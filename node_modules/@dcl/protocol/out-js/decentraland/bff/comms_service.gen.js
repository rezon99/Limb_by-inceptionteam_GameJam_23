"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommsServiceDefinition = exports.UnsubscriptionResult = exports.Subscription = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const topics_service_gen_1 = require("./topics_service.gen");
exports.protobufPackage = "decentraland.bff";
function createBaseSubscription() {
    return { subscriptionId: 0 };
}
var Subscription;
(function (Subscription) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.subscriptionId !== 0) {
            writer.uint32(8).uint32(message.subscriptionId);
        }
        return writer;
    }
    Subscription.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSubscription();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.subscriptionId = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Subscription.decode = decode;
    function fromJSON(object) {
        return { subscriptionId: isSet(object.subscriptionId) ? Number(object.subscriptionId) : 0 };
    }
    Subscription.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.subscriptionId !== undefined && (obj.subscriptionId = Math.round(message.subscriptionId));
        return obj;
    }
    Subscription.toJSON = toJSON;
    function create(base) {
        return Subscription.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Subscription.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseSubscription();
        message.subscriptionId = (_a = object.subscriptionId) !== null && _a !== void 0 ? _a : 0;
        return message;
    }
    Subscription.fromPartial = fromPartial;
})(Subscription = exports.Subscription || (exports.Subscription = {}));
function createBaseUnsubscriptionResult() {
    return { ok: false };
}
var UnsubscriptionResult;
(function (UnsubscriptionResult) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.ok === true) {
            writer.uint32(8).bool(message.ok);
        }
        return writer;
    }
    UnsubscriptionResult.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUnsubscriptionResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.ok = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    UnsubscriptionResult.decode = decode;
    function fromJSON(object) {
        return { ok: isSet(object.ok) ? Boolean(object.ok) : false };
    }
    UnsubscriptionResult.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.ok !== undefined && (obj.ok = message.ok);
        return obj;
    }
    UnsubscriptionResult.toJSON = toJSON;
    function create(base) {
        return UnsubscriptionResult.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    UnsubscriptionResult.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseUnsubscriptionResult();
        message.ok = (_a = object.ok) !== null && _a !== void 0 ? _a : false;
        return message;
    }
    UnsubscriptionResult.fromPartial = fromPartial;
})(UnsubscriptionResult = exports.UnsubscriptionResult || (exports.UnsubscriptionResult = {}));
exports.CommsServiceDefinition = {
    name: "CommsService",
    fullName: "decentraland.bff.CommsService",
    methods: {
        subscribeToPeerMessages: {
            name: "SubscribeToPeerMessages",
            requestType: topics_service_gen_1.SubscriptionRequest,
            requestStream: false,
            responseType: Subscription,
            responseStream: false,
            options: {},
        },
        getPeerMessages: {
            name: "GetPeerMessages",
            requestType: Subscription,
            requestStream: false,
            responseType: topics_service_gen_1.PeerTopicSubscriptionResultElem,
            responseStream: true,
            options: {},
        },
        unsubscribeToPeerMessages: {
            name: "UnsubscribeToPeerMessages",
            requestType: Subscription,
            requestStream: false,
            responseType: UnsubscriptionResult,
            responseStream: false,
            options: {},
        },
        subscribeToSystemMessages: {
            name: "SubscribeToSystemMessages",
            requestType: topics_service_gen_1.SubscriptionRequest,
            requestStream: false,
            responseType: Subscription,
            responseStream: false,
            options: {},
        },
        getSystemMessages: {
            name: "GetSystemMessages",
            requestType: Subscription,
            requestStream: false,
            responseType: topics_service_gen_1.SystemTopicSubscriptionResultElem,
            responseStream: true,
            options: {},
        },
        unsubscribeToSystemMessages: {
            name: "UnsubscribeToSystemMessages",
            requestType: Subscription,
            requestStream: false,
            responseType: UnsubscriptionResult,
            responseStream: false,
            options: {},
        },
        /** send a peer message to a topic */
        publishToTopic: {
            name: "PublishToTopic",
            requestType: topics_service_gen_1.PublishToTopicRequest,
            requestStream: false,
            responseType: topics_service_gen_1.PublishToTopicResult,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=comms_service.gen.js.map