import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "decentraland.bff";
export interface SubscriptionRequest {
    topic: string;
}
export interface PeerTopicSubscriptionResultElem {
    payload: Uint8Array;
    topic: string;
    sender: string;
}
export interface SystemTopicSubscriptionResultElem {
    payload: Uint8Array;
    topic: string;
}
export interface PublishToTopicRequest {
    topic: string;
    payload: Uint8Array;
}
export interface PublishToTopicResult {
    ok: boolean;
}
export declare namespace SubscriptionRequest {
    function encode(message: SubscriptionRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): SubscriptionRequest;
    function fromJSON(object: any): SubscriptionRequest;
    function toJSON(message: SubscriptionRequest): unknown;
    function create<I extends Exact<DeepPartial<SubscriptionRequest>, I>>(base?: I): SubscriptionRequest;
    function fromPartial<I extends Exact<DeepPartial<SubscriptionRequest>, I>>(object: I): SubscriptionRequest;
}
export declare namespace PeerTopicSubscriptionResultElem {
    function encode(message: PeerTopicSubscriptionResultElem, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PeerTopicSubscriptionResultElem;
    function fromJSON(object: any): PeerTopicSubscriptionResultElem;
    function toJSON(message: PeerTopicSubscriptionResultElem): unknown;
    function create<I extends Exact<DeepPartial<PeerTopicSubscriptionResultElem>, I>>(base?: I): PeerTopicSubscriptionResultElem;
    function fromPartial<I extends Exact<DeepPartial<PeerTopicSubscriptionResultElem>, I>>(object: I): PeerTopicSubscriptionResultElem;
}
export declare namespace SystemTopicSubscriptionResultElem {
    function encode(message: SystemTopicSubscriptionResultElem, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): SystemTopicSubscriptionResultElem;
    function fromJSON(object: any): SystemTopicSubscriptionResultElem;
    function toJSON(message: SystemTopicSubscriptionResultElem): unknown;
    function create<I extends Exact<DeepPartial<SystemTopicSubscriptionResultElem>, I>>(base?: I): SystemTopicSubscriptionResultElem;
    function fromPartial<I extends Exact<DeepPartial<SystemTopicSubscriptionResultElem>, I>>(object: I): SystemTopicSubscriptionResultElem;
}
export declare namespace PublishToTopicRequest {
    function encode(message: PublishToTopicRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PublishToTopicRequest;
    function fromJSON(object: any): PublishToTopicRequest;
    function toJSON(message: PublishToTopicRequest): unknown;
    function create<I extends Exact<DeepPartial<PublishToTopicRequest>, I>>(base?: I): PublishToTopicRequest;
    function fromPartial<I extends Exact<DeepPartial<PublishToTopicRequest>, I>>(object: I): PublishToTopicRequest;
}
export declare namespace PublishToTopicResult {
    function encode(message: PublishToTopicResult, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): PublishToTopicResult;
    function fromJSON(object: any): PublishToTopicResult;
    function toJSON(message: PublishToTopicResult): unknown;
    function create<I extends Exact<DeepPartial<PublishToTopicResult>, I>>(base?: I): PublishToTopicResult;
    function fromPartial<I extends Exact<DeepPartial<PublishToTopicResult>, I>>(object: I): PublishToTopicResult;
}
export type TopicsServiceDefinition = typeof TopicsServiceDefinition;
export declare const TopicsServiceDefinition: {
    readonly name: "TopicsService";
    readonly fullName: "decentraland.bff.TopicsService";
    readonly methods: {
        readonly peerSubscription: {
            readonly name: "PeerSubscription";
            readonly requestType: typeof SubscriptionRequest;
            readonly requestStream: false;
            readonly responseType: typeof PeerTopicSubscriptionResultElem;
            readonly responseStream: true;
            readonly options: {};
        };
        readonly systemSubscription: {
            readonly name: "SystemSubscription";
            readonly requestType: typeof SubscriptionRequest;
            readonly requestStream: false;
            readonly responseType: typeof SystemTopicSubscriptionResultElem;
            readonly responseStream: true;
            readonly options: {};
        };
        /** send a peer message to a topic */
        readonly publishToTopic: {
            readonly name: "PublishToTopic";
            readonly requestType: typeof PublishToTopicRequest;
            readonly requestStream: false;
            readonly responseType: typeof PublishToTopicResult;
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
