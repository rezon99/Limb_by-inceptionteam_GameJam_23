import _m0 from "protobufjs/minimal";
import { PeerTopicSubscriptionResultElem, PublishToTopicRequest, PublishToTopicResult, SubscriptionRequest, SystemTopicSubscriptionResultElem } from "./topics_service.gen";
export declare const protobufPackage = "decentraland.bff";
export interface Subscription {
    subscriptionId: number;
}
export interface UnsubscriptionResult {
    ok: boolean;
}
export declare namespace Subscription {
    function encode(message: Subscription, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): Subscription;
    function fromJSON(object: any): Subscription;
    function toJSON(message: Subscription): unknown;
    function create<I extends Exact<DeepPartial<Subscription>, I>>(base?: I): Subscription;
    function fromPartial<I extends Exact<DeepPartial<Subscription>, I>>(object: I): Subscription;
}
export declare namespace UnsubscriptionResult {
    function encode(message: UnsubscriptionResult, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): UnsubscriptionResult;
    function fromJSON(object: any): UnsubscriptionResult;
    function toJSON(message: UnsubscriptionResult): unknown;
    function create<I extends Exact<DeepPartial<UnsubscriptionResult>, I>>(base?: I): UnsubscriptionResult;
    function fromPartial<I extends Exact<DeepPartial<UnsubscriptionResult>, I>>(object: I): UnsubscriptionResult;
}
export type CommsServiceDefinition = typeof CommsServiceDefinition;
export declare const CommsServiceDefinition: {
    readonly name: "CommsService";
    readonly fullName: "decentraland.bff.CommsService";
    readonly methods: {
        readonly subscribeToPeerMessages: {
            readonly name: "SubscribeToPeerMessages";
            readonly requestType: typeof SubscriptionRequest;
            readonly requestStream: false;
            readonly responseType: typeof Subscription;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getPeerMessages: {
            readonly name: "GetPeerMessages";
            readonly requestType: typeof Subscription;
            readonly requestStream: false;
            readonly responseType: typeof PeerTopicSubscriptionResultElem;
            readonly responseStream: true;
            readonly options: {};
        };
        readonly unsubscribeToPeerMessages: {
            readonly name: "UnsubscribeToPeerMessages";
            readonly requestType: typeof Subscription;
            readonly requestStream: false;
            readonly responseType: typeof UnsubscriptionResult;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly subscribeToSystemMessages: {
            readonly name: "SubscribeToSystemMessages";
            readonly requestType: typeof SubscriptionRequest;
            readonly requestStream: false;
            readonly responseType: typeof Subscription;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getSystemMessages: {
            readonly name: "GetSystemMessages";
            readonly requestType: typeof Subscription;
            readonly requestStream: false;
            readonly responseType: typeof SystemTopicSubscriptionResultElem;
            readonly responseStream: true;
            readonly options: {};
        };
        readonly unsubscribeToSystemMessages: {
            readonly name: "UnsubscribeToSystemMessages";
            readonly requestType: typeof Subscription;
            readonly requestStream: false;
            readonly responseType: typeof UnsubscriptionResult;
            readonly responseStream: false;
            readonly options: {};
        };
        /** send a peer message to a topic */
        readonly publishToTopic: {
            readonly name: "PublishToTopic";
            readonly requestType: typeof PublishToTopicRequest;
            readonly requestStream: false;
            readonly responseType: typeof PublishToTopicResult;
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
