"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommsDirectorServiceDefinition = exports.Heartbeat = exports.SetCommsAdapter = exports.WorldCommand = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const empty_gen_1 = require("../../google/protobuf/empty.gen");
const vectors_gen_1 = require("../common/vectors.gen");
exports.protobufPackage = "decentraland.bff";
function createBaseWorldCommand() {
    return { command: undefined };
}
var WorldCommand;
(function (WorldCommand) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        var _a;
        switch ((_a = message.command) === null || _a === void 0 ? void 0 : _a.$case) {
            case "setCommsAdapter":
                SetCommsAdapter.encode(message.command.setCommsAdapter, writer.uint32(10).fork()).ldelim();
                break;
        }
        return writer;
    }
    WorldCommand.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWorldCommand();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.command = {
                        $case: "setCommsAdapter",
                        setCommsAdapter: SetCommsAdapter.decode(reader, reader.uint32()),
                    };
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    WorldCommand.decode = decode;
    function fromJSON(object) {
        return {
            command: isSet(object.setCommsAdapter)
                ? { $case: "setCommsAdapter", setCommsAdapter: SetCommsAdapter.fromJSON(object.setCommsAdapter) }
                : undefined,
        };
    }
    WorldCommand.fromJSON = fromJSON;
    function toJSON(message) {
        var _a, _b, _c;
        const obj = {};
        ((_a = message.command) === null || _a === void 0 ? void 0 : _a.$case) === "setCommsAdapter" &&
            (obj.setCommsAdapter = ((_b = message.command) === null || _b === void 0 ? void 0 : _b.setCommsAdapter)
                ? SetCommsAdapter.toJSON((_c = message.command) === null || _c === void 0 ? void 0 : _c.setCommsAdapter)
                : undefined);
        return obj;
    }
    WorldCommand.toJSON = toJSON;
    function create(base) {
        return WorldCommand.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    WorldCommand.create = create;
    function fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseWorldCommand();
        if (((_a = object.command) === null || _a === void 0 ? void 0 : _a.$case) === "setCommsAdapter" &&
            ((_b = object.command) === null || _b === void 0 ? void 0 : _b.setCommsAdapter) !== undefined &&
            ((_c = object.command) === null || _c === void 0 ? void 0 : _c.setCommsAdapter) !== null) {
            message.command = {
                $case: "setCommsAdapter",
                setCommsAdapter: SetCommsAdapter.fromPartial(object.command.setCommsAdapter),
            };
        }
        return message;
    }
    WorldCommand.fromPartial = fromPartial;
})(WorldCommand = exports.WorldCommand || (exports.WorldCommand = {}));
function createBaseSetCommsAdapter() {
    return { connectionString: "" };
}
var SetCommsAdapter;
(function (SetCommsAdapter) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.connectionString !== "") {
            writer.uint32(10).string(message.connectionString);
        }
        return writer;
    }
    SetCommsAdapter.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetCommsAdapter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.connectionString = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    SetCommsAdapter.decode = decode;
    function fromJSON(object) {
        return { connectionString: isSet(object.connectionString) ? String(object.connectionString) : "" };
    }
    SetCommsAdapter.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.connectionString !== undefined && (obj.connectionString = message.connectionString);
        return obj;
    }
    SetCommsAdapter.toJSON = toJSON;
    function create(base) {
        return SetCommsAdapter.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    SetCommsAdapter.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseSetCommsAdapter();
        message.connectionString = (_a = object.connectionString) !== null && _a !== void 0 ? _a : "";
        return message;
    }
    SetCommsAdapter.fromPartial = fromPartial;
})(SetCommsAdapter = exports.SetCommsAdapter || (exports.SetCommsAdapter = {}));
function createBaseHeartbeat() {
    return { position: undefined, desiredRoom: undefined };
}
var Heartbeat;
(function (Heartbeat) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.position !== undefined) {
            vectors_gen_1.Position.encode(message.position, writer.uint32(10).fork()).ldelim();
        }
        if (message.desiredRoom !== undefined) {
            writer.uint32(18).string(message.desiredRoom);
        }
        return writer;
    }
    Heartbeat.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHeartbeat();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.position = vectors_gen_1.Position.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.desiredRoom = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    Heartbeat.decode = decode;
    function fromJSON(object) {
        return {
            position: isSet(object.position) ? vectors_gen_1.Position.fromJSON(object.position) : undefined,
            desiredRoom: isSet(object.desiredRoom) ? String(object.desiredRoom) : undefined,
        };
    }
    Heartbeat.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.position !== undefined && (obj.position = message.position ? vectors_gen_1.Position.toJSON(message.position) : undefined);
        message.desiredRoom !== undefined && (obj.desiredRoom = message.desiredRoom);
        return obj;
    }
    Heartbeat.toJSON = toJSON;
    function create(base) {
        return Heartbeat.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    Heartbeat.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseHeartbeat();
        message.position = (object.position !== undefined && object.position !== null)
            ? vectors_gen_1.Position.fromPartial(object.position)
            : undefined;
        message.desiredRoom = (_a = object.desiredRoom) !== null && _a !== void 0 ? _a : undefined;
        return message;
    }
    Heartbeat.fromPartial = fromPartial;
})(Heartbeat = exports.Heartbeat || (exports.Heartbeat = {}));
exports.CommsDirectorServiceDefinition = {
    name: "CommsDirectorService",
    fullName: "decentraland.bff.CommsDirectorService",
    methods: {
        /**
         * every couple seconds AND at the beginning, the explorers must send a heartbeat
         * to make the comms director aware of their location
         */
        sendHeartbeat: {
            name: "SendHeartbeat",
            requestType: Heartbeat,
            requestStream: false,
            responseType: empty_gen_1.Empty,
            responseStream: false,
            options: {},
        },
        /**
         * before sending the first heartbeat, it is required that the explorers subscribe
         * to a list of comms commands
         */
        getCommsCommands: {
            name: "GetCommsCommands",
            requestType: empty_gen_1.Empty,
            requestStream: false,
            responseType: WorldCommand,
            responseStream: true,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=comms_director_service.gen.js.map