import _m0 from "protobufjs/minimal";
import { Empty } from "../../google/protobuf/empty.gen";
export declare const protobufPackage = "decentraland.bff";
export declare enum DisconnectionReason {
    DR_KICKED = 0,
    UNRECOGNIZED = -1
}
export declare function disconnectionReasonFromJSON(object: any): DisconnectionReason;
export declare function disconnectionReasonToJSON(object: DisconnectionReason): string;
export interface GetChallengeRequest {
    address: string;
}
export interface GetChallengeResponse {
    challengeToSign: string;
    alreadyConnected: boolean;
}
export interface SignedChallenge {
    authChainJson: string;
}
export interface WelcomePeerInformation {
    peerId: string;
    /** list of available modules in this BFF */
    availableModules: string[];
}
export interface DisconnectionMessage {
    reason: DisconnectionReason;
}
export declare namespace GetChallengeRequest {
    function encode(message: GetChallengeRequest, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): GetChallengeRequest;
    function fromJSON(object: any): GetChallengeRequest;
    function toJSON(message: GetChallengeRequest): unknown;
    function create<I extends Exact<DeepPartial<GetChallengeRequest>, I>>(base?: I): GetChallengeRequest;
    function fromPartial<I extends Exact<DeepPartial<GetChallengeRequest>, I>>(object: I): GetChallengeRequest;
}
export declare namespace GetChallengeResponse {
    function encode(message: GetChallengeResponse, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): GetChallengeResponse;
    function fromJSON(object: any): GetChallengeResponse;
    function toJSON(message: GetChallengeResponse): unknown;
    function create<I extends Exact<DeepPartial<GetChallengeResponse>, I>>(base?: I): GetChallengeResponse;
    function fromPartial<I extends Exact<DeepPartial<GetChallengeResponse>, I>>(object: I): GetChallengeResponse;
}
export declare namespace SignedChallenge {
    function encode(message: SignedChallenge, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): SignedChallenge;
    function fromJSON(object: any): SignedChallenge;
    function toJSON(message: SignedChallenge): unknown;
    function create<I extends Exact<DeepPartial<SignedChallenge>, I>>(base?: I): SignedChallenge;
    function fromPartial<I extends Exact<DeepPartial<SignedChallenge>, I>>(object: I): SignedChallenge;
}
export declare namespace WelcomePeerInformation {
    function encode(message: WelcomePeerInformation, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): WelcomePeerInformation;
    function fromJSON(object: any): WelcomePeerInformation;
    function toJSON(message: WelcomePeerInformation): unknown;
    function create<I extends Exact<DeepPartial<WelcomePeerInformation>, I>>(base?: I): WelcomePeerInformation;
    function fromPartial<I extends Exact<DeepPartial<WelcomePeerInformation>, I>>(object: I): WelcomePeerInformation;
}
export declare namespace DisconnectionMessage {
    function encode(message: DisconnectionMessage, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): DisconnectionMessage;
    function fromJSON(object: any): DisconnectionMessage;
    function toJSON(message: DisconnectionMessage): unknown;
    function create<I extends Exact<DeepPartial<DisconnectionMessage>, I>>(base?: I): DisconnectionMessage;
    function fromPartial<I extends Exact<DeepPartial<DisconnectionMessage>, I>>(object: I): DisconnectionMessage;
}
export type BffAuthenticationServiceDefinition = typeof BffAuthenticationServiceDefinition;
export declare const BffAuthenticationServiceDefinition: {
    readonly name: "BffAuthenticationService";
    readonly fullName: "decentraland.bff.BffAuthenticationService";
    readonly methods: {
        readonly getChallenge: {
            readonly name: "GetChallenge";
            readonly requestType: typeof GetChallengeRequest;
            readonly requestStream: false;
            readonly responseType: typeof GetChallengeResponse;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly authenticate: {
            readonly name: "Authenticate";
            readonly requestType: typeof SignedChallenge;
            readonly requestStream: false;
            readonly responseType: typeof WelcomePeerInformation;
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getDisconnectionMessage: {
            readonly name: "GetDisconnectionMessage";
            readonly requestType: typeof Empty;
            readonly requestStream: false;
            readonly responseType: typeof DisconnectionMessage;
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
