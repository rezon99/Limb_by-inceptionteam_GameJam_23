"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TopicsServiceDefinition = exports.PublishToTopicResult = exports.PublishToTopicRequest = exports.SystemTopicSubscriptionResultElem = exports.PeerTopicSubscriptionResultElem = exports.SubscriptionRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "decentraland.bff";
function createBaseSubscriptionRequest() {
    return { topic: "" };
}
var SubscriptionRequest;
(function (SubscriptionRequest) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.topic !== "") {
            writer.uint32(10).string(message.topic);
        }
        return writer;
    }
    SubscriptionRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSubscriptionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.topic = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    SubscriptionRequest.decode = decode;
    function fromJSON(object) {
        return { topic: isSet(object.topic) ? String(object.topic) : "" };
    }
    SubscriptionRequest.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.topic !== undefined && (obj.topic = message.topic);
        return obj;
    }
    SubscriptionRequest.toJSON = toJSON;
    function create(base) {
        return SubscriptionRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    SubscriptionRequest.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBaseSubscriptionRequest();
        message.topic = (_a = object.topic) !== null && _a !== void 0 ? _a : "";
        return message;
    }
    SubscriptionRequest.fromPartial = fromPartial;
})(SubscriptionRequest = exports.SubscriptionRequest || (exports.SubscriptionRequest = {}));
function createBasePeerTopicSubscriptionResultElem() {
    return { payload: new Uint8Array(), topic: "", sender: "" };
}
var PeerTopicSubscriptionResultElem;
(function (PeerTopicSubscriptionResultElem) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.payload.length !== 0) {
            writer.uint32(10).bytes(message.payload);
        }
        if (message.topic !== "") {
            writer.uint32(18).string(message.topic);
        }
        if (message.sender !== "") {
            writer.uint32(26).string(message.sender);
        }
        return writer;
    }
    PeerTopicSubscriptionResultElem.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePeerTopicSubscriptionResultElem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.payload = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.topic = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PeerTopicSubscriptionResultElem.decode = decode;
    function fromJSON(object) {
        return {
            payload: isSet(object.payload) ? bytesFromBase64(object.payload) : new Uint8Array(),
            topic: isSet(object.topic) ? String(object.topic) : "",
            sender: isSet(object.sender) ? String(object.sender) : "",
        };
    }
    PeerTopicSubscriptionResultElem.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.payload !== undefined &&
            (obj.payload = base64FromBytes(message.payload !== undefined ? message.payload : new Uint8Array()));
        message.topic !== undefined && (obj.topic = message.topic);
        message.sender !== undefined && (obj.sender = message.sender);
        return obj;
    }
    PeerTopicSubscriptionResultElem.toJSON = toJSON;
    function create(base) {
        return PeerTopicSubscriptionResultElem.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PeerTopicSubscriptionResultElem.create = create;
    function fromPartial(object) {
        var _a, _b, _c;
        const message = createBasePeerTopicSubscriptionResultElem();
        message.payload = (_a = object.payload) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.topic = (_b = object.topic) !== null && _b !== void 0 ? _b : "";
        message.sender = (_c = object.sender) !== null && _c !== void 0 ? _c : "";
        return message;
    }
    PeerTopicSubscriptionResultElem.fromPartial = fromPartial;
})(PeerTopicSubscriptionResultElem = exports.PeerTopicSubscriptionResultElem || (exports.PeerTopicSubscriptionResultElem = {}));
function createBaseSystemTopicSubscriptionResultElem() {
    return { payload: new Uint8Array(), topic: "" };
}
var SystemTopicSubscriptionResultElem;
(function (SystemTopicSubscriptionResultElem) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.payload.length !== 0) {
            writer.uint32(10).bytes(message.payload);
        }
        if (message.topic !== "") {
            writer.uint32(18).string(message.topic);
        }
        return writer;
    }
    SystemTopicSubscriptionResultElem.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSystemTopicSubscriptionResultElem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.payload = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.topic = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    SystemTopicSubscriptionResultElem.decode = decode;
    function fromJSON(object) {
        return {
            payload: isSet(object.payload) ? bytesFromBase64(object.payload) : new Uint8Array(),
            topic: isSet(object.topic) ? String(object.topic) : "",
        };
    }
    SystemTopicSubscriptionResultElem.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.payload !== undefined &&
            (obj.payload = base64FromBytes(message.payload !== undefined ? message.payload : new Uint8Array()));
        message.topic !== undefined && (obj.topic = message.topic);
        return obj;
    }
    SystemTopicSubscriptionResultElem.toJSON = toJSON;
    function create(base) {
        return SystemTopicSubscriptionResultElem.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    SystemTopicSubscriptionResultElem.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBaseSystemTopicSubscriptionResultElem();
        message.payload = (_a = object.payload) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.topic = (_b = object.topic) !== null && _b !== void 0 ? _b : "";
        return message;
    }
    SystemTopicSubscriptionResultElem.fromPartial = fromPartial;
})(SystemTopicSubscriptionResultElem = exports.SystemTopicSubscriptionResultElem || (exports.SystemTopicSubscriptionResultElem = {}));
function createBasePublishToTopicRequest() {
    return { topic: "", payload: new Uint8Array() };
}
var PublishToTopicRequest;
(function (PublishToTopicRequest) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.topic !== "") {
            writer.uint32(10).string(message.topic);
        }
        if (message.payload.length !== 0) {
            writer.uint32(18).bytes(message.payload);
        }
        return writer;
    }
    PublishToTopicRequest.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePublishToTopicRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.topic = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.payload = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PublishToTopicRequest.decode = decode;
    function fromJSON(object) {
        return {
            topic: isSet(object.topic) ? String(object.topic) : "",
            payload: isSet(object.payload) ? bytesFromBase64(object.payload) : new Uint8Array(),
        };
    }
    PublishToTopicRequest.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.topic !== undefined && (obj.topic = message.topic);
        message.payload !== undefined &&
            (obj.payload = base64FromBytes(message.payload !== undefined ? message.payload : new Uint8Array()));
        return obj;
    }
    PublishToTopicRequest.toJSON = toJSON;
    function create(base) {
        return PublishToTopicRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PublishToTopicRequest.create = create;
    function fromPartial(object) {
        var _a, _b;
        const message = createBasePublishToTopicRequest();
        message.topic = (_a = object.topic) !== null && _a !== void 0 ? _a : "";
        message.payload = (_b = object.payload) !== null && _b !== void 0 ? _b : new Uint8Array();
        return message;
    }
    PublishToTopicRequest.fromPartial = fromPartial;
})(PublishToTopicRequest = exports.PublishToTopicRequest || (exports.PublishToTopicRequest = {}));
function createBasePublishToTopicResult() {
    return { ok: false };
}
var PublishToTopicResult;
(function (PublishToTopicResult) {
    function encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.ok === true) {
            writer.uint32(8).bool(message.ok);
        }
        return writer;
    }
    PublishToTopicResult.encode = encode;
    function decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePublishToTopicResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.ok = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    }
    PublishToTopicResult.decode = decode;
    function fromJSON(object) {
        return { ok: isSet(object.ok) ? Boolean(object.ok) : false };
    }
    PublishToTopicResult.fromJSON = fromJSON;
    function toJSON(message) {
        const obj = {};
        message.ok !== undefined && (obj.ok = message.ok);
        return obj;
    }
    PublishToTopicResult.toJSON = toJSON;
    function create(base) {
        return PublishToTopicResult.fromPartial(base !== null && base !== void 0 ? base : {});
    }
    PublishToTopicResult.create = create;
    function fromPartial(object) {
        var _a;
        const message = createBasePublishToTopicResult();
        message.ok = (_a = object.ok) !== null && _a !== void 0 ? _a : false;
        return message;
    }
    PublishToTopicResult.fromPartial = fromPartial;
})(PublishToTopicResult = exports.PublishToTopicResult || (exports.PublishToTopicResult = {}));
exports.TopicsServiceDefinition = {
    name: "TopicsService",
    fullName: "decentraland.bff.TopicsService",
    methods: {
        peerSubscription: {
            name: "PeerSubscription",
            requestType: SubscriptionRequest,
            requestStream: false,
            responseType: PeerTopicSubscriptionResultElem,
            responseStream: true,
            options: {},
        },
        systemSubscription: {
            name: "SystemSubscription",
            requestType: SubscriptionRequest,
            requestStream: false,
            responseType: SystemTopicSubscriptionResultElem,
            responseStream: true,
            options: {},
        },
        /** send a peer message to a topic */
        publishToTopic: {
            name: "PublishToTopic",
            requestType: PublishToTopicRequest,
            requestStream: false,
            responseType: PublishToTopicResult,
            responseStream: false,
            options: {},
        },
    },
};
var tsProtoGlobalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (tsProtoGlobalThis.Buffer) {
        return Uint8Array.from(tsProtoGlobalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = tsProtoGlobalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (tsProtoGlobalThis.Buffer) {
        return tsProtoGlobalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(String.fromCharCode(byte));
        });
        return tsProtoGlobalThis.btoa(bin.join(""));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=topics_service.gen.js.map