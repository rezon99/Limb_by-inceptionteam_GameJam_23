import _m0 from "protobufjs/minimal";
import { Empty } from "../../google/protobuf/empty.gen";
import { Position } from "../common/vectors.gen";
export declare const protobufPackage = "decentraland.bff";
export interface WorldCommand {
    command?: {
        $case: "setCommsAdapter";
        setCommsAdapter: SetCommsAdapter;
    };
}
export interface SetCommsAdapter {
    connectionString: string;
}
export interface Heartbeat {
    position: Position | undefined;
    desiredRoom?: string | undefined;
}
export declare namespace WorldCommand {
    function encode(message: WorldCommand, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): WorldCommand;
    function fromJSON(object: any): WorldCommand;
    function toJSON(message: WorldCommand): unknown;
    function create<I extends Exact<DeepPartial<WorldCommand>, I>>(base?: I): WorldCommand;
    function fromPartial<I extends Exact<DeepPartial<WorldCommand>, I>>(object: I): WorldCommand;
}
export declare namespace SetCommsAdapter {
    function encode(message: SetCommsAdapter, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): SetCommsAdapter;
    function fromJSON(object: any): SetCommsAdapter;
    function toJSON(message: SetCommsAdapter): unknown;
    function create<I extends Exact<DeepPartial<SetCommsAdapter>, I>>(base?: I): SetCommsAdapter;
    function fromPartial<I extends Exact<DeepPartial<SetCommsAdapter>, I>>(object: I): SetCommsAdapter;
}
export declare namespace Heartbeat {
    function encode(message: Heartbeat, writer?: _m0.Writer): _m0.Writer;
    function decode(input: _m0.Reader | Uint8Array, length?: number): Heartbeat;
    function fromJSON(object: any): Heartbeat;
    function toJSON(message: Heartbeat): unknown;
    function create<I extends Exact<DeepPartial<Heartbeat>, I>>(base?: I): Heartbeat;
    function fromPartial<I extends Exact<DeepPartial<Heartbeat>, I>>(object: I): Heartbeat;
}
export type CommsDirectorServiceDefinition = typeof CommsDirectorServiceDefinition;
export declare const CommsDirectorServiceDefinition: {
    readonly name: "CommsDirectorService";
    readonly fullName: "decentraland.bff.CommsDirectorService";
    readonly methods: {
        /**
         * every couple seconds AND at the beginning, the explorers must send a heartbeat
         * to make the comms director aware of their location
         */
        readonly sendHeartbeat: {
            readonly name: "SendHeartbeat";
            readonly requestType: typeof Heartbeat;
            readonly requestStream: false;
            readonly responseType: typeof Empty;
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * before sending the first heartbeat, it is required that the explorers subscribe
         * to a list of comms commands
         */
        readonly getCommsCommands: {
            readonly name: "GetCommsCommands";
            readonly requestType: typeof Empty;
            readonly requestStream: false;
            readonly responseType: typeof WorldCommand;
            readonly responseStream: true;
            readonly options: {};
        };
    };
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
