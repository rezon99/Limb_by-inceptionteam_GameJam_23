/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Color4 } from "../../common/colors.gen";
import {
  Font,
  fontFromJSON,
  fontToJSON,
  TextAlignMode,
  textAlignModeFromJSON,
  textAlignModeToJSON,
} from "./common/texts.gen";

export const protobufPackage = "decentraland.sdk.components";

export interface PBUiText {
  /** the text content */
  value: string;
  /** RGBA color (default: opaque white) */
  color?:
    | Color4
    | undefined;
  /** alignment within the bounds (default: center) */
  textAlign?:
    | TextAlignMode
    | undefined;
  /** font for the text (default: sans-serif) */
  font?:
    | Font
    | undefined;
  /** size of the text (default: 10) */
  fontSize?: number | undefined;
}

function createBasePBUiText(): PBUiText {
  return { value: "", color: undefined, textAlign: undefined, font: undefined, fontSize: undefined };
}

export namespace PBUiText {
  export function encode(message: PBUiText, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== "") {
      writer.uint32(10).string(message.value);
    }
    if (message.color !== undefined) {
      Color4.encode(message.color, writer.uint32(18).fork()).ldelim();
    }
    if (message.textAlign !== undefined) {
      writer.uint32(24).int32(message.textAlign);
    }
    if (message.font !== undefined) {
      writer.uint32(32).int32(message.font);
    }
    if (message.fontSize !== undefined) {
      writer.uint32(40).int32(message.fontSize);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): PBUiText {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePBUiText();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.value = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.color = Color4.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.textAlign = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.font = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.fontSize = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): PBUiText {
    return {
      value: isSet(object.value) ? String(object.value) : "",
      color: isSet(object.color) ? Color4.fromJSON(object.color) : undefined,
      textAlign: isSet(object.textAlign) ? textAlignModeFromJSON(object.textAlign) : undefined,
      font: isSet(object.font) ? fontFromJSON(object.font) : undefined,
      fontSize: isSet(object.fontSize) ? Number(object.fontSize) : undefined,
    };
  }

  export function toJSON(message: PBUiText): unknown {
    const obj: any = {};
    message.value !== undefined && (obj.value = message.value);
    message.color !== undefined && (obj.color = message.color ? Color4.toJSON(message.color) : undefined);
    message.textAlign !== undefined &&
      (obj.textAlign = message.textAlign !== undefined ? textAlignModeToJSON(message.textAlign) : undefined);
    message.font !== undefined && (obj.font = message.font !== undefined ? fontToJSON(message.font) : undefined);
    message.fontSize !== undefined && (obj.fontSize = Math.round(message.fontSize));
    return obj;
  }

  export function create<I extends Exact<DeepPartial<PBUiText>, I>>(base?: I): PBUiText {
    return PBUiText.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<PBUiText>, I>>(object: I): PBUiText {
    const message = createBasePBUiText();
    message.value = object.value ?? "";
    message.color = (object.color !== undefined && object.color !== null)
      ? Color4.fromPartial(object.color)
      : undefined;
    message.textAlign = object.textAlign ?? undefined;
    message.font = object.font ?? undefined;
    message.fontSize = object.fontSize ?? undefined;
    return message;
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
