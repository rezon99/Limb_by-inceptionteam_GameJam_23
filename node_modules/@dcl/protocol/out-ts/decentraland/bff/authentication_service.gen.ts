/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Empty } from "../../google/protobuf/empty.gen";

export const protobufPackage = "decentraland.bff";

export enum DisconnectionReason {
  DR_KICKED = 0,
  UNRECOGNIZED = -1,
}

export function disconnectionReasonFromJSON(object: any): DisconnectionReason {
  switch (object) {
    case 0:
    case "DR_KICKED":
      return DisconnectionReason.DR_KICKED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DisconnectionReason.UNRECOGNIZED;
  }
}

export function disconnectionReasonToJSON(object: DisconnectionReason): string {
  switch (object) {
    case DisconnectionReason.DR_KICKED:
      return "DR_KICKED";
    case DisconnectionReason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface GetChallengeRequest {
  address: string;
}

export interface GetChallengeResponse {
  challengeToSign: string;
  alreadyConnected: boolean;
}

export interface SignedChallenge {
  authChainJson: string;
}

export interface WelcomePeerInformation {
  peerId: string;
  /** list of available modules in this BFF */
  availableModules: string[];
}

export interface DisconnectionMessage {
  reason: DisconnectionReason;
}

function createBaseGetChallengeRequest(): GetChallengeRequest {
  return { address: "" };
}

export namespace GetChallengeRequest {
  export function encode(message: GetChallengeRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): GetChallengeRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetChallengeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): GetChallengeRequest {
    return { address: isSet(object.address) ? String(object.address) : "" };
  }

  export function toJSON(message: GetChallengeRequest): unknown {
    const obj: any = {};
    message.address !== undefined && (obj.address = message.address);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<GetChallengeRequest>, I>>(base?: I): GetChallengeRequest {
    return GetChallengeRequest.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<GetChallengeRequest>, I>>(object: I): GetChallengeRequest {
    const message = createBaseGetChallengeRequest();
    message.address = object.address ?? "";
    return message;
  }
}

function createBaseGetChallengeResponse(): GetChallengeResponse {
  return { challengeToSign: "", alreadyConnected: false };
}

export namespace GetChallengeResponse {
  export function encode(message: GetChallengeResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.challengeToSign !== "") {
      writer.uint32(10).string(message.challengeToSign);
    }
    if (message.alreadyConnected === true) {
      writer.uint32(16).bool(message.alreadyConnected);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): GetChallengeResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetChallengeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.challengeToSign = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.alreadyConnected = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): GetChallengeResponse {
    return {
      challengeToSign: isSet(object.challengeToSign) ? String(object.challengeToSign) : "",
      alreadyConnected: isSet(object.alreadyConnected) ? Boolean(object.alreadyConnected) : false,
    };
  }

  export function toJSON(message: GetChallengeResponse): unknown {
    const obj: any = {};
    message.challengeToSign !== undefined && (obj.challengeToSign = message.challengeToSign);
    message.alreadyConnected !== undefined && (obj.alreadyConnected = message.alreadyConnected);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<GetChallengeResponse>, I>>(base?: I): GetChallengeResponse {
    return GetChallengeResponse.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<GetChallengeResponse>, I>>(object: I): GetChallengeResponse {
    const message = createBaseGetChallengeResponse();
    message.challengeToSign = object.challengeToSign ?? "";
    message.alreadyConnected = object.alreadyConnected ?? false;
    return message;
  }
}

function createBaseSignedChallenge(): SignedChallenge {
  return { authChainJson: "" };
}

export namespace SignedChallenge {
  export function encode(message: SignedChallenge, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.authChainJson !== "") {
      writer.uint32(10).string(message.authChainJson);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): SignedChallenge {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignedChallenge();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.authChainJson = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): SignedChallenge {
    return { authChainJson: isSet(object.authChainJson) ? String(object.authChainJson) : "" };
  }

  export function toJSON(message: SignedChallenge): unknown {
    const obj: any = {};
    message.authChainJson !== undefined && (obj.authChainJson = message.authChainJson);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<SignedChallenge>, I>>(base?: I): SignedChallenge {
    return SignedChallenge.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<SignedChallenge>, I>>(object: I): SignedChallenge {
    const message = createBaseSignedChallenge();
    message.authChainJson = object.authChainJson ?? "";
    return message;
  }
}

function createBaseWelcomePeerInformation(): WelcomePeerInformation {
  return { peerId: "", availableModules: [] };
}

export namespace WelcomePeerInformation {
  export function encode(message: WelcomePeerInformation, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.peerId !== "") {
      writer.uint32(10).string(message.peerId);
    }
    for (const v of message.availableModules) {
      writer.uint32(18).string(v!);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): WelcomePeerInformation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWelcomePeerInformation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.peerId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.availableModules.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): WelcomePeerInformation {
    return {
      peerId: isSet(object.peerId) ? String(object.peerId) : "",
      availableModules: Array.isArray(object?.availableModules)
        ? object.availableModules.map((e: any) => String(e))
        : [],
    };
  }

  export function toJSON(message: WelcomePeerInformation): unknown {
    const obj: any = {};
    message.peerId !== undefined && (obj.peerId = message.peerId);
    if (message.availableModules) {
      obj.availableModules = message.availableModules.map((e) => e);
    } else {
      obj.availableModules = [];
    }
    return obj;
  }

  export function create<I extends Exact<DeepPartial<WelcomePeerInformation>, I>>(base?: I): WelcomePeerInformation {
    return WelcomePeerInformation.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<WelcomePeerInformation>, I>>(
    object: I,
  ): WelcomePeerInformation {
    const message = createBaseWelcomePeerInformation();
    message.peerId = object.peerId ?? "";
    message.availableModules = object.availableModules?.map((e) => e) || [];
    return message;
  }
}

function createBaseDisconnectionMessage(): DisconnectionMessage {
  return { reason: 0 };
}

export namespace DisconnectionMessage {
  export function encode(message: DisconnectionMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.reason !== 0) {
      writer.uint32(8).int32(message.reason);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): DisconnectionMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisconnectionMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): DisconnectionMessage {
    return { reason: isSet(object.reason) ? disconnectionReasonFromJSON(object.reason) : 0 };
  }

  export function toJSON(message: DisconnectionMessage): unknown {
    const obj: any = {};
    message.reason !== undefined && (obj.reason = disconnectionReasonToJSON(message.reason));
    return obj;
  }

  export function create<I extends Exact<DeepPartial<DisconnectionMessage>, I>>(base?: I): DisconnectionMessage {
    return DisconnectionMessage.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<DisconnectionMessage>, I>>(object: I): DisconnectionMessage {
    const message = createBaseDisconnectionMessage();
    message.reason = object.reason ?? 0;
    return message;
  }
}

export type BffAuthenticationServiceDefinition = typeof BffAuthenticationServiceDefinition;
export const BffAuthenticationServiceDefinition = {
  name: "BffAuthenticationService",
  fullName: "decentraland.bff.BffAuthenticationService",
  methods: {
    getChallenge: {
      name: "GetChallenge",
      requestType: GetChallengeRequest,
      requestStream: false,
      responseType: GetChallengeResponse,
      responseStream: false,
      options: {},
    },
    authenticate: {
      name: "Authenticate",
      requestType: SignedChallenge,
      requestStream: false,
      responseType: WelcomePeerInformation,
      responseStream: false,
      options: {},
    },
    getDisconnectionMessage: {
      name: "GetDisconnectionMessage",
      requestType: Empty,
      requestStream: false,
      responseType: DisconnectionMessage,
      responseStream: false,
      options: {},
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
