/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Empty } from "../../google/protobuf/empty.gen";

export const protobufPackage = "decentraland.bff";

export interface AboutResponse {
  healthy: boolean;
  configurations: AboutResponse_AboutConfiguration | undefined;
  content: AboutResponse_ContentInfo | undefined;
  comms: AboutResponse_CommsInfo | undefined;
  lambdas: AboutResponse_LambdasInfo | undefined;
  bff?: AboutResponse_BffInfo | undefined;
  acceptingUsers: boolean;
}

export interface AboutResponse_MinimapConfiguration {
  enabled: boolean;
  dataImage?: string | undefined;
  estateImage?: string | undefined;
}

export interface AboutResponse_SkyboxConfiguration {
  /** only one value at a time */
  fixedHour?: number | undefined;
  textures: string[];
}

export interface AboutResponse_AboutConfiguration {
  realmName?: string | undefined;
  networkId: number;
  globalScenesUrn: string[];
  scenesUrn: string[];
  minimap?: AboutResponse_MinimapConfiguration | undefined;
  skybox?:
    | AboutResponse_SkyboxConfiguration
    | undefined;
  /**
   * A content server to be used to load the parcels around the user. Uses the POST /entities/active endpoint
   * to continously fetch the parcels around the users. if null, then the default content server will be used
   * if == "" then the city_loader will be disabled and the scenes_urn will be used to load the world
   */
  cityLoaderContentServer?: string | undefined;
}

export interface AboutResponse_ContentInfo {
  /** common properties */
  healthy: boolean;
  version?: string | undefined;
  commitHash?: string | undefined;
  publicUrl: string;
}

export interface AboutResponse_LambdasInfo {
  /** common properties */
  healthy: boolean;
  version?: string | undefined;
  commitHash?: string | undefined;
  publicUrl: string;
}

export interface AboutResponse_CommsInfo {
  /** common properties */
  healthy: boolean;
  version?: string | undefined;
  commitHash?: string | undefined;
  publicUrl?:
    | string
    | undefined;
  /** specific properties */
  protocol: string;
  usersCount?: number | undefined;
  fixedAdapter?: string | undefined;
}

export interface AboutResponse_BffInfo {
  /** common properties */
  healthy: boolean;
  version?: string | undefined;
  commitHash?: string | undefined;
  publicUrl: string;
  /** specific properties */
  userCount?: number | undefined;
  protocolVersion?: string | undefined;
}

function createBaseAboutResponse(): AboutResponse {
  return {
    healthy: false,
    configurations: undefined,
    content: undefined,
    comms: undefined,
    lambdas: undefined,
    bff: undefined,
    acceptingUsers: false,
  };
}

export namespace AboutResponse {
  export function encode(message: AboutResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.healthy === true) {
      writer.uint32(8).bool(message.healthy);
    }
    if (message.configurations !== undefined) {
      AboutResponse_AboutConfiguration.encode(message.configurations, writer.uint32(18).fork()).ldelim();
    }
    if (message.content !== undefined) {
      AboutResponse_ContentInfo.encode(message.content, writer.uint32(26).fork()).ldelim();
    }
    if (message.comms !== undefined) {
      AboutResponse_CommsInfo.encode(message.comms, writer.uint32(34).fork()).ldelim();
    }
    if (message.lambdas !== undefined) {
      AboutResponse_LambdasInfo.encode(message.lambdas, writer.uint32(42).fork()).ldelim();
    }
    if (message.bff !== undefined) {
      AboutResponse_BffInfo.encode(message.bff, writer.uint32(50).fork()).ldelim();
    }
    if (message.acceptingUsers === true) {
      writer.uint32(56).bool(message.acceptingUsers);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): AboutResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAboutResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.healthy = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.configurations = AboutResponse_AboutConfiguration.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.content = AboutResponse_ContentInfo.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.comms = AboutResponse_CommsInfo.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.lambdas = AboutResponse_LambdasInfo.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.bff = AboutResponse_BffInfo.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.acceptingUsers = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): AboutResponse {
    return {
      healthy: isSet(object.healthy) ? Boolean(object.healthy) : false,
      configurations: isSet(object.configurations)
        ? AboutResponse_AboutConfiguration.fromJSON(object.configurations)
        : undefined,
      content: isSet(object.content) ? AboutResponse_ContentInfo.fromJSON(object.content) : undefined,
      comms: isSet(object.comms) ? AboutResponse_CommsInfo.fromJSON(object.comms) : undefined,
      lambdas: isSet(object.lambdas) ? AboutResponse_LambdasInfo.fromJSON(object.lambdas) : undefined,
      bff: isSet(object.bff) ? AboutResponse_BffInfo.fromJSON(object.bff) : undefined,
      acceptingUsers: isSet(object.acceptingUsers) ? Boolean(object.acceptingUsers) : false,
    };
  }

  export function toJSON(message: AboutResponse): unknown {
    const obj: any = {};
    message.healthy !== undefined && (obj.healthy = message.healthy);
    message.configurations !== undefined &&
      (obj.configurations = message.configurations
        ? AboutResponse_AboutConfiguration.toJSON(message.configurations)
        : undefined);
    message.content !== undefined &&
      (obj.content = message.content ? AboutResponse_ContentInfo.toJSON(message.content) : undefined);
    message.comms !== undefined &&
      (obj.comms = message.comms ? AboutResponse_CommsInfo.toJSON(message.comms) : undefined);
    message.lambdas !== undefined &&
      (obj.lambdas = message.lambdas ? AboutResponse_LambdasInfo.toJSON(message.lambdas) : undefined);
    message.bff !== undefined && (obj.bff = message.bff ? AboutResponse_BffInfo.toJSON(message.bff) : undefined);
    message.acceptingUsers !== undefined && (obj.acceptingUsers = message.acceptingUsers);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<AboutResponse>, I>>(base?: I): AboutResponse {
    return AboutResponse.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<AboutResponse>, I>>(object: I): AboutResponse {
    const message = createBaseAboutResponse();
    message.healthy = object.healthy ?? false;
    message.configurations = (object.configurations !== undefined && object.configurations !== null)
      ? AboutResponse_AboutConfiguration.fromPartial(object.configurations)
      : undefined;
    message.content = (object.content !== undefined && object.content !== null)
      ? AboutResponse_ContentInfo.fromPartial(object.content)
      : undefined;
    message.comms = (object.comms !== undefined && object.comms !== null)
      ? AboutResponse_CommsInfo.fromPartial(object.comms)
      : undefined;
    message.lambdas = (object.lambdas !== undefined && object.lambdas !== null)
      ? AboutResponse_LambdasInfo.fromPartial(object.lambdas)
      : undefined;
    message.bff = (object.bff !== undefined && object.bff !== null)
      ? AboutResponse_BffInfo.fromPartial(object.bff)
      : undefined;
    message.acceptingUsers = object.acceptingUsers ?? false;
    return message;
  }
}

function createBaseAboutResponse_MinimapConfiguration(): AboutResponse_MinimapConfiguration {
  return { enabled: false, dataImage: undefined, estateImage: undefined };
}

export namespace AboutResponse_MinimapConfiguration {
  export function encode(
    message: AboutResponse_MinimapConfiguration,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.enabled === true) {
      writer.uint32(8).bool(message.enabled);
    }
    if (message.dataImage !== undefined) {
      writer.uint32(18).string(message.dataImage);
    }
    if (message.estateImage !== undefined) {
      writer.uint32(26).string(message.estateImage);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): AboutResponse_MinimapConfiguration {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAboutResponse_MinimapConfiguration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataImage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.estateImage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): AboutResponse_MinimapConfiguration {
    return {
      enabled: isSet(object.enabled) ? Boolean(object.enabled) : false,
      dataImage: isSet(object.dataImage) ? String(object.dataImage) : undefined,
      estateImage: isSet(object.estateImage) ? String(object.estateImage) : undefined,
    };
  }

  export function toJSON(message: AboutResponse_MinimapConfiguration): unknown {
    const obj: any = {};
    message.enabled !== undefined && (obj.enabled = message.enabled);
    message.dataImage !== undefined && (obj.dataImage = message.dataImage);
    message.estateImage !== undefined && (obj.estateImage = message.estateImage);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<AboutResponse_MinimapConfiguration>, I>>(
    base?: I,
  ): AboutResponse_MinimapConfiguration {
    return AboutResponse_MinimapConfiguration.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<AboutResponse_MinimapConfiguration>, I>>(
    object: I,
  ): AboutResponse_MinimapConfiguration {
    const message = createBaseAboutResponse_MinimapConfiguration();
    message.enabled = object.enabled ?? false;
    message.dataImage = object.dataImage ?? undefined;
    message.estateImage = object.estateImage ?? undefined;
    return message;
  }
}

function createBaseAboutResponse_SkyboxConfiguration(): AboutResponse_SkyboxConfiguration {
  return { fixedHour: undefined, textures: [] };
}

export namespace AboutResponse_SkyboxConfiguration {
  export function encode(
    message: AboutResponse_SkyboxConfiguration,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.fixedHour !== undefined) {
      writer.uint32(13).float(message.fixedHour);
    }
    for (const v of message.textures) {
      writer.uint32(18).string(v!);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): AboutResponse_SkyboxConfiguration {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAboutResponse_SkyboxConfiguration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.fixedHour = reader.float();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.textures.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): AboutResponse_SkyboxConfiguration {
    return {
      fixedHour: isSet(object.fixedHour) ? Number(object.fixedHour) : undefined,
      textures: Array.isArray(object?.textures) ? object.textures.map((e: any) => String(e)) : [],
    };
  }

  export function toJSON(message: AboutResponse_SkyboxConfiguration): unknown {
    const obj: any = {};
    message.fixedHour !== undefined && (obj.fixedHour = message.fixedHour);
    if (message.textures) {
      obj.textures = message.textures.map((e) => e);
    } else {
      obj.textures = [];
    }
    return obj;
  }

  export function create<I extends Exact<DeepPartial<AboutResponse_SkyboxConfiguration>, I>>(
    base?: I,
  ): AboutResponse_SkyboxConfiguration {
    return AboutResponse_SkyboxConfiguration.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<AboutResponse_SkyboxConfiguration>, I>>(
    object: I,
  ): AboutResponse_SkyboxConfiguration {
    const message = createBaseAboutResponse_SkyboxConfiguration();
    message.fixedHour = object.fixedHour ?? undefined;
    message.textures = object.textures?.map((e) => e) || [];
    return message;
  }
}

function createBaseAboutResponse_AboutConfiguration(): AboutResponse_AboutConfiguration {
  return {
    realmName: undefined,
    networkId: 0,
    globalScenesUrn: [],
    scenesUrn: [],
    minimap: undefined,
    skybox: undefined,
    cityLoaderContentServer: undefined,
  };
}

export namespace AboutResponse_AboutConfiguration {
  export function encode(
    message: AboutResponse_AboutConfiguration,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.realmName !== undefined) {
      writer.uint32(10).string(message.realmName);
    }
    if (message.networkId !== 0) {
      writer.uint32(16).uint32(message.networkId);
    }
    for (const v of message.globalScenesUrn) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.scenesUrn) {
      writer.uint32(34).string(v!);
    }
    if (message.minimap !== undefined) {
      AboutResponse_MinimapConfiguration.encode(message.minimap, writer.uint32(42).fork()).ldelim();
    }
    if (message.skybox !== undefined) {
      AboutResponse_SkyboxConfiguration.encode(message.skybox, writer.uint32(50).fork()).ldelim();
    }
    if (message.cityLoaderContentServer !== undefined) {
      writer.uint32(58).string(message.cityLoaderContentServer);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): AboutResponse_AboutConfiguration {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAboutResponse_AboutConfiguration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.realmName = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.networkId = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.globalScenesUrn.push(reader.string());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.scenesUrn.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.minimap = AboutResponse_MinimapConfiguration.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.skybox = AboutResponse_SkyboxConfiguration.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.cityLoaderContentServer = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): AboutResponse_AboutConfiguration {
    return {
      realmName: isSet(object.realmName) ? String(object.realmName) : undefined,
      networkId: isSet(object.networkId) ? Number(object.networkId) : 0,
      globalScenesUrn: Array.isArray(object?.globalScenesUrn) ? object.globalScenesUrn.map((e: any) => String(e)) : [],
      scenesUrn: Array.isArray(object?.scenesUrn) ? object.scenesUrn.map((e: any) => String(e)) : [],
      minimap: isSet(object.minimap) ? AboutResponse_MinimapConfiguration.fromJSON(object.minimap) : undefined,
      skybox: isSet(object.skybox) ? AboutResponse_SkyboxConfiguration.fromJSON(object.skybox) : undefined,
      cityLoaderContentServer: isSet(object.cityLoaderContentServer)
        ? String(object.cityLoaderContentServer)
        : undefined,
    };
  }

  export function toJSON(message: AboutResponse_AboutConfiguration): unknown {
    const obj: any = {};
    message.realmName !== undefined && (obj.realmName = message.realmName);
    message.networkId !== undefined && (obj.networkId = Math.round(message.networkId));
    if (message.globalScenesUrn) {
      obj.globalScenesUrn = message.globalScenesUrn.map((e) => e);
    } else {
      obj.globalScenesUrn = [];
    }
    if (message.scenesUrn) {
      obj.scenesUrn = message.scenesUrn.map((e) => e);
    } else {
      obj.scenesUrn = [];
    }
    message.minimap !== undefined &&
      (obj.minimap = message.minimap ? AboutResponse_MinimapConfiguration.toJSON(message.minimap) : undefined);
    message.skybox !== undefined &&
      (obj.skybox = message.skybox ? AboutResponse_SkyboxConfiguration.toJSON(message.skybox) : undefined);
    message.cityLoaderContentServer !== undefined && (obj.cityLoaderContentServer = message.cityLoaderContentServer);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<AboutResponse_AboutConfiguration>, I>>(
    base?: I,
  ): AboutResponse_AboutConfiguration {
    return AboutResponse_AboutConfiguration.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<AboutResponse_AboutConfiguration>, I>>(
    object: I,
  ): AboutResponse_AboutConfiguration {
    const message = createBaseAboutResponse_AboutConfiguration();
    message.realmName = object.realmName ?? undefined;
    message.networkId = object.networkId ?? 0;
    message.globalScenesUrn = object.globalScenesUrn?.map((e) => e) || [];
    message.scenesUrn = object.scenesUrn?.map((e) => e) || [];
    message.minimap = (object.minimap !== undefined && object.minimap !== null)
      ? AboutResponse_MinimapConfiguration.fromPartial(object.minimap)
      : undefined;
    message.skybox = (object.skybox !== undefined && object.skybox !== null)
      ? AboutResponse_SkyboxConfiguration.fromPartial(object.skybox)
      : undefined;
    message.cityLoaderContentServer = object.cityLoaderContentServer ?? undefined;
    return message;
  }
}

function createBaseAboutResponse_ContentInfo(): AboutResponse_ContentInfo {
  return { healthy: false, version: undefined, commitHash: undefined, publicUrl: "" };
}

export namespace AboutResponse_ContentInfo {
  export function encode(message: AboutResponse_ContentInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.healthy === true) {
      writer.uint32(8).bool(message.healthy);
    }
    if (message.version !== undefined) {
      writer.uint32(18).string(message.version);
    }
    if (message.commitHash !== undefined) {
      writer.uint32(26).string(message.commitHash);
    }
    if (message.publicUrl !== "") {
      writer.uint32(34).string(message.publicUrl);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): AboutResponse_ContentInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAboutResponse_ContentInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.healthy = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.commitHash = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.publicUrl = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): AboutResponse_ContentInfo {
    return {
      healthy: isSet(object.healthy) ? Boolean(object.healthy) : false,
      version: isSet(object.version) ? String(object.version) : undefined,
      commitHash: isSet(object.commitHash) ? String(object.commitHash) : undefined,
      publicUrl: isSet(object.publicUrl) ? String(object.publicUrl) : "",
    };
  }

  export function toJSON(message: AboutResponse_ContentInfo): unknown {
    const obj: any = {};
    message.healthy !== undefined && (obj.healthy = message.healthy);
    message.version !== undefined && (obj.version = message.version);
    message.commitHash !== undefined && (obj.commitHash = message.commitHash);
    message.publicUrl !== undefined && (obj.publicUrl = message.publicUrl);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<AboutResponse_ContentInfo>, I>>(
    base?: I,
  ): AboutResponse_ContentInfo {
    return AboutResponse_ContentInfo.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<AboutResponse_ContentInfo>, I>>(
    object: I,
  ): AboutResponse_ContentInfo {
    const message = createBaseAboutResponse_ContentInfo();
    message.healthy = object.healthy ?? false;
    message.version = object.version ?? undefined;
    message.commitHash = object.commitHash ?? undefined;
    message.publicUrl = object.publicUrl ?? "";
    return message;
  }
}

function createBaseAboutResponse_LambdasInfo(): AboutResponse_LambdasInfo {
  return { healthy: false, version: undefined, commitHash: undefined, publicUrl: "" };
}

export namespace AboutResponse_LambdasInfo {
  export function encode(message: AboutResponse_LambdasInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.healthy === true) {
      writer.uint32(8).bool(message.healthy);
    }
    if (message.version !== undefined) {
      writer.uint32(18).string(message.version);
    }
    if (message.commitHash !== undefined) {
      writer.uint32(26).string(message.commitHash);
    }
    if (message.publicUrl !== "") {
      writer.uint32(34).string(message.publicUrl);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): AboutResponse_LambdasInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAboutResponse_LambdasInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.healthy = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.commitHash = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.publicUrl = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): AboutResponse_LambdasInfo {
    return {
      healthy: isSet(object.healthy) ? Boolean(object.healthy) : false,
      version: isSet(object.version) ? String(object.version) : undefined,
      commitHash: isSet(object.commitHash) ? String(object.commitHash) : undefined,
      publicUrl: isSet(object.publicUrl) ? String(object.publicUrl) : "",
    };
  }

  export function toJSON(message: AboutResponse_LambdasInfo): unknown {
    const obj: any = {};
    message.healthy !== undefined && (obj.healthy = message.healthy);
    message.version !== undefined && (obj.version = message.version);
    message.commitHash !== undefined && (obj.commitHash = message.commitHash);
    message.publicUrl !== undefined && (obj.publicUrl = message.publicUrl);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<AboutResponse_LambdasInfo>, I>>(
    base?: I,
  ): AboutResponse_LambdasInfo {
    return AboutResponse_LambdasInfo.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<AboutResponse_LambdasInfo>, I>>(
    object: I,
  ): AboutResponse_LambdasInfo {
    const message = createBaseAboutResponse_LambdasInfo();
    message.healthy = object.healthy ?? false;
    message.version = object.version ?? undefined;
    message.commitHash = object.commitHash ?? undefined;
    message.publicUrl = object.publicUrl ?? "";
    return message;
  }
}

function createBaseAboutResponse_CommsInfo(): AboutResponse_CommsInfo {
  return {
    healthy: false,
    version: undefined,
    commitHash: undefined,
    publicUrl: undefined,
    protocol: "",
    usersCount: undefined,
    fixedAdapter: undefined,
  };
}

export namespace AboutResponse_CommsInfo {
  export function encode(message: AboutResponse_CommsInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.healthy === true) {
      writer.uint32(8).bool(message.healthy);
    }
    if (message.version !== undefined) {
      writer.uint32(18).string(message.version);
    }
    if (message.commitHash !== undefined) {
      writer.uint32(26).string(message.commitHash);
    }
    if (message.publicUrl !== undefined) {
      writer.uint32(34).string(message.publicUrl);
    }
    if (message.protocol !== "") {
      writer.uint32(402).string(message.protocol);
    }
    if (message.usersCount !== undefined) {
      writer.uint32(408).int32(message.usersCount);
    }
    if (message.fixedAdapter !== undefined) {
      writer.uint32(418).string(message.fixedAdapter);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): AboutResponse_CommsInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAboutResponse_CommsInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.healthy = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.commitHash = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.publicUrl = reader.string();
          continue;
        case 50:
          if (tag !== 402) {
            break;
          }

          message.protocol = reader.string();
          continue;
        case 51:
          if (tag !== 408) {
            break;
          }

          message.usersCount = reader.int32();
          continue;
        case 52:
          if (tag !== 418) {
            break;
          }

          message.fixedAdapter = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): AboutResponse_CommsInfo {
    return {
      healthy: isSet(object.healthy) ? Boolean(object.healthy) : false,
      version: isSet(object.version) ? String(object.version) : undefined,
      commitHash: isSet(object.commitHash) ? String(object.commitHash) : undefined,
      publicUrl: isSet(object.publicUrl) ? String(object.publicUrl) : undefined,
      protocol: isSet(object.protocol) ? String(object.protocol) : "",
      usersCount: isSet(object.usersCount) ? Number(object.usersCount) : undefined,
      fixedAdapter: isSet(object.fixedAdapter) ? String(object.fixedAdapter) : undefined,
    };
  }

  export function toJSON(message: AboutResponse_CommsInfo): unknown {
    const obj: any = {};
    message.healthy !== undefined && (obj.healthy = message.healthy);
    message.version !== undefined && (obj.version = message.version);
    message.commitHash !== undefined && (obj.commitHash = message.commitHash);
    message.publicUrl !== undefined && (obj.publicUrl = message.publicUrl);
    message.protocol !== undefined && (obj.protocol = message.protocol);
    message.usersCount !== undefined && (obj.usersCount = Math.round(message.usersCount));
    message.fixedAdapter !== undefined && (obj.fixedAdapter = message.fixedAdapter);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<AboutResponse_CommsInfo>, I>>(base?: I): AboutResponse_CommsInfo {
    return AboutResponse_CommsInfo.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<AboutResponse_CommsInfo>, I>>(
    object: I,
  ): AboutResponse_CommsInfo {
    const message = createBaseAboutResponse_CommsInfo();
    message.healthy = object.healthy ?? false;
    message.version = object.version ?? undefined;
    message.commitHash = object.commitHash ?? undefined;
    message.publicUrl = object.publicUrl ?? undefined;
    message.protocol = object.protocol ?? "";
    message.usersCount = object.usersCount ?? undefined;
    message.fixedAdapter = object.fixedAdapter ?? undefined;
    return message;
  }
}

function createBaseAboutResponse_BffInfo(): AboutResponse_BffInfo {
  return {
    healthy: false,
    version: undefined,
    commitHash: undefined,
    publicUrl: "",
    userCount: undefined,
    protocolVersion: undefined,
  };
}

export namespace AboutResponse_BffInfo {
  export function encode(message: AboutResponse_BffInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.healthy === true) {
      writer.uint32(8).bool(message.healthy);
    }
    if (message.version !== undefined) {
      writer.uint32(18).string(message.version);
    }
    if (message.commitHash !== undefined) {
      writer.uint32(26).string(message.commitHash);
    }
    if (message.publicUrl !== "") {
      writer.uint32(34).string(message.publicUrl);
    }
    if (message.userCount !== undefined) {
      writer.uint32(408).int32(message.userCount);
    }
    if (message.protocolVersion !== undefined) {
      writer.uint32(418).string(message.protocolVersion);
    }
    return writer;
  }

  export function decode(input: _m0.Reader | Uint8Array, length?: number): AboutResponse_BffInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAboutResponse_BffInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.healthy = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.commitHash = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.publicUrl = reader.string();
          continue;
        case 51:
          if (tag !== 408) {
            break;
          }

          message.userCount = reader.int32();
          continue;
        case 52:
          if (tag !== 418) {
            break;
          }

          message.protocolVersion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  }

  export function fromJSON(object: any): AboutResponse_BffInfo {
    return {
      healthy: isSet(object.healthy) ? Boolean(object.healthy) : false,
      version: isSet(object.version) ? String(object.version) : undefined,
      commitHash: isSet(object.commitHash) ? String(object.commitHash) : undefined,
      publicUrl: isSet(object.publicUrl) ? String(object.publicUrl) : "",
      userCount: isSet(object.userCount) ? Number(object.userCount) : undefined,
      protocolVersion: isSet(object.protocolVersion) ? String(object.protocolVersion) : undefined,
    };
  }

  export function toJSON(message: AboutResponse_BffInfo): unknown {
    const obj: any = {};
    message.healthy !== undefined && (obj.healthy = message.healthy);
    message.version !== undefined && (obj.version = message.version);
    message.commitHash !== undefined && (obj.commitHash = message.commitHash);
    message.publicUrl !== undefined && (obj.publicUrl = message.publicUrl);
    message.userCount !== undefined && (obj.userCount = Math.round(message.userCount));
    message.protocolVersion !== undefined && (obj.protocolVersion = message.protocolVersion);
    return obj;
  }

  export function create<I extends Exact<DeepPartial<AboutResponse_BffInfo>, I>>(base?: I): AboutResponse_BffInfo {
    return AboutResponse_BffInfo.fromPartial(base ?? {});
  }

  export function fromPartial<I extends Exact<DeepPartial<AboutResponse_BffInfo>, I>>(
    object: I,
  ): AboutResponse_BffInfo {
    const message = createBaseAboutResponse_BffInfo();
    message.healthy = object.healthy ?? false;
    message.version = object.version ?? undefined;
    message.commitHash = object.commitHash ?? undefined;
    message.publicUrl = object.publicUrl ?? "";
    message.userCount = object.userCount ?? undefined;
    message.protocolVersion = object.protocolVersion ?? undefined;
    return message;
  }
}

export type HttpEndpointsDefinition = typeof HttpEndpointsDefinition;
export const HttpEndpointsDefinition = {
  name: "HttpEndpoints",
  fullName: "decentraland.bff.HttpEndpoints",
  methods: {
    /** Returns the status and configuration of the bff microservice */
    about: {
      name: "About",
      requestType: Empty,
      requestStream: false,
      responseType: AboutResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
