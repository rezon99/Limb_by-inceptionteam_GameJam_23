import { Lifecycle } from '@well-known-components/interfaces';
import { ChainId, Scene } from '@dcl/schemas';
import { IFile } from '../../../logic/scene-validations';
import { CliComponents } from '../../../components';
export interface LinkerResponse {
    address: string;
    signature: string;
    chainId?: ChainId;
}
export interface SceneInfo {
    baseParcel: string;
    parcels: string[];
    rootCID: string;
    landRegistry?: string;
    estateRegistry?: string;
    debug: boolean;
    title?: string;
    description?: string;
    skipValidations: boolean;
}
export declare function runLinkerApp(cliComponents: Pick<CliComponents, 'fs' | 'logger' | 'fetch' | 'config'>, scene: Scene, files: IFile[], port: number, rootCID: string, { isHttps, skipValidations, openBrowser }: {
    isHttps: boolean;
    skipValidations: boolean;
    openBrowser: boolean;
}): Promise<{
    program: Lifecycle.ComponentBasedProgram<{
        config: import("@well-known-components/interfaces").IConfigComponent;
        logs: import("@well-known-components/interfaces").ILoggerComponent;
        server: import("@well-known-components/http-server").FullHttpServerComponent<object>;
        fs: import("../../../components/fs").IFileSystemComponent;
        fetch: import("../../../components/fetch").IFetchComponent;
        logger: import("@well-known-components/interfaces").ILoggerComponent.ILogger;
    }>;
    linkerResponse: import("fp-future").IFuture<LinkerResponse>;
}>;
