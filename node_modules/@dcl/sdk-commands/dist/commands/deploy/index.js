"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = exports.help = exports.args = void 0;
const path_1 = require("path");
const schemas_1 = require("@dcl/schemas");
const crypto_1 = require("@dcl/crypto");
const scene_validations_1 = require("../../logic/scene-validations");
const args_1 = require("../../logic/args");
const project_validations_1 = require("../../logic/project-validations");
const error_1 = require("../../logic/error");
const beautiful_logs_1 = require("../../logic/beautiful-logs");
const project_files_1 = require("../../logic/project-files");
const utils_1 = require("./utils");
const dcl_catalyst_client_1 = require("dcl-catalyst-client");
exports.args = (0, args_1.declareArgs)({
    '--dir': String,
    '--help': Boolean,
    '-h': '--help',
    '--target': String,
    '-t': '--target',
    '--target-content': String,
    '-tc': '--target-content',
    '--skip-validations': Boolean,
    '--skip-version-checks': Boolean,
    '--skip-build': Boolean,
    '--https': Boolean,
    '--force-upload': Boolean,
    '--yes': Boolean,
    '--no-browser': Boolean,
    '-b': '--no-browser',
    '--port': Number,
    '-p': '--port'
});
function help(options) {
    options.components.logger.log(`
  Usage: 'sdk-commands build [options]'
    Options:
      -h, --help                Displays complete help
      -p, --port        [port]  Select a custom port for the development server
      -t, --target              Specifies the address and port for the target catalyst server. Defaults to peer.decentraland.org
      -t, --target-content      Specifies the address and port for the target content server. Example: 'peer.decentraland.org/content'. Can't be set together with --target
      -b, --no-browser          Do not open a new browser window
      --skip-version-checks     Skip the ECS and CLI version checks, avoid the warning message and launch anyway
      --skip-build              Skip build before deploy
      --skip-validations        Skip permissions verifications on the client side when deploying content

    Example:
    - Deploy your scene:
      $ sdk-commands deploy
    - Deploy your scene to a specific content server:
      $ sdk-commands deploy --target my-favorite-catalyst-server.org:2323
`);
}
exports.help = help;
async function main(options) {
    const projectRoot = (0, path_1.resolve)(process.cwd(), options.args['--dir'] || '.');
    const openBrowser = !options.args['--no-browser'];
    const skipBuild = options.args['--skip-build'];
    const linkerPort = options.args['--port'];
    if (options.args['--target'] && options.args['--target-content']) {
        throw new error_1.CliError(`You can't set both the 'target' and 'target-content' arguments.`);
    }
    const sceneJson = await (0, scene_validations_1.getValidSceneJson)(options.components, projectRoot);
    const coords = (0, scene_validations_1.getBaseCoords)(sceneJson);
    const isWorld = !!Object.keys(sceneJson.worldConfiguration || {}).length;
    const trackProps = {
        projectHash: await (0, project_files_1.b64HashingFunction)(projectRoot),
        coords,
        isWorld
    };
    const packageJson = await (0, project_files_1.getPackageJson)(options.components, projectRoot);
    const dependencies = Array.from(new Set([...Object.keys(packageJson.dependencies || {}), ...Object.keys(packageJson.devDependencies || {})]));
    options.components.analytics.track('Scene deploy started', trackProps);
    if (!skipBuild) {
        await (0, project_validations_1.npmRun)(options.components, projectRoot, 'build');
    }
    // Obtain list of files to deploy
    const files = await (0, scene_validations_1.getFiles)(options.components, projectRoot);
    (0, scene_validations_1.validateFilesSizes)(files);
    const contentFiles = new Map(files.map((file) => [file.path, file.content]));
    const { entityId, files: entityFiles } = await dcl_catalyst_client_1.DeploymentBuilder.buildEntity({
        type: schemas_1.EntityType.SCENE,
        pointers: sceneJson.scene.parcels,
        files: contentFiles,
        metadata: sceneJson
    });
    // Signing message
    const messageToSign = entityId;
    const { linkerResponse, program } = await (0, utils_1.getAddressAndSignature)(options.components, messageToSign, sceneJson, files, {
        openBrowser,
        linkerPort,
        isHttps: !!options.args['--https'],
        skipValidations: !!options.args['--skip-validations'] || !!options.args['--target'] || !!options.args['--target-content']
    });
    const { address, signature, chainId } = await linkerResponse;
    const authChain = crypto_1.Authenticator.createSimpleAuthChain(entityId, address, signature);
    // Uploading data
    const catalyst = await (0, utils_1.getCatalyst)(options.args['--target'], options.args['--target-content']);
    (0, beautiful_logs_1.printProgressInfo)(options.components.logger, `Uploading data to: ${catalyst.getContentUrl()}...`);
    const deployData = { entityId, files: entityFiles, authChain };
    const position = sceneJson.scene.base;
    const network = chainId === schemas_1.ChainId.ETHEREUM_GOERLI ? 'goerli' : 'mainnet';
    const sceneUrl = `https://play.decentraland.org/?NETWORK=${network}&position=${position}`;
    try {
        const response = (await catalyst.deploy(deployData, {
            timeout: '10m'
        }));
        if (response.message) {
            (0, beautiful_logs_1.printProgressInfo)(options.components.logger, response.message);
        }
        (0, beautiful_logs_1.printSuccess)(options.components.logger, 'Content uploaded', sceneUrl);
    }
    catch (e) {
        options.components.logger.error('Could not upload content:');
        options.components.logger.error(e);
        options.components.analytics.track('Scene deploy failure', { ...trackProps, error: e.message ?? '' });
    }
    finally {
        await program?.stop();
    }
    options.components.analytics.track('Scene deploy success', {
        ...trackProps,
        sceneId: entityId,
        targetContentServer: catalyst.getContentUrl(),
        worldName: sceneJson.worldConfiguration?.name,
        dependencies
    });
}
exports.main = main;
//# sourceMappingURL=index.js.map