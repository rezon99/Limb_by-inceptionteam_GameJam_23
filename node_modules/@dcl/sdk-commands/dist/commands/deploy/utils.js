"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAddressAndSignature = exports.getCatalyst = void 0;
const dcl_catalyst_client_1 = require("dcl-catalyst-client");
const eth_connect_1 = require("eth-connect");
const crypto_1 = require("@dcl/crypto/dist/crypto");
const api_1 = require("./linker-dapp/api");
const account_1 = require("../../logic/account");
async function getCatalyst(target, targetContent) {
    if (target) {
        return new dcl_catalyst_client_1.CatalystClient({ catalystUrl: target.endsWith('/') ? target.slice(0, -1) : target });
    }
    if (targetContent) {
        return new dcl_catalyst_client_1.ContentClient({ contentUrl: targetContent });
    }
    return dcl_catalyst_client_1.CatalystClient.connectedToCatalystIn({ network: 'mainnet' });
}
exports.getCatalyst = getCatalyst;
async function getAddressAndSignature(components, messageToSign, scene, files, linkOptions) {
    if (process.env.DCL_PRIVATE_KEY) {
        const wallet = (0, account_1.createWallet)(process.env.DCL_PRIVATE_KEY);
        const signature = (0, crypto_1.ethSign)((0, eth_connect_1.hexToBytes)(wallet.privateKey), messageToSign);
        const linkerResponse = Promise.resolve({ signature, address: wallet.address });
        return { linkerResponse };
    }
    const { linkerPort, ...opts } = linkOptions;
    return (0, api_1.runLinkerApp)(components, scene, files, linkerPort, messageToSign, opts);
}
exports.getAddressAndSignature = getAddressAndSignature;
//# sourceMappingURL=utils.js.map