"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.wireFileWatcherToWebSockets = void 0;
const schemas_1 = require("@dcl/schemas");
const path_1 = __importDefault(require("path"));
const ws_1 = require("ws");
const chokidar_1 = __importDefault(require("chokidar"));
const dcl_ignore_1 = require("../../../logic/dcl-ignore");
const routes_1 = require("./routes");
function debounce(callback, delay) {
    let debounceTimer;
    return (...args) => {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => callback(...args), delay);
    };
}
/**
 * This function gets file modification events and sends them to all the connected
 * websockets, it is used to hot-reload assets of the scene.
 *
 * IMPORTANT: this is a legacy protocol and needs to be revisited for SDK7
 */
async function wireFileWatcherToWebSockets(components, projectRoot) {
    const ignored = await (0, dcl_ignore_1.getDCLIgnorePatterns)(components, projectRoot);
    chokidar_1.default
        .watch(path_1.default.resolve(projectRoot), {
        ignored,
        ignoreInitial: false,
        cwd: projectRoot
    })
        .on('all', debounce(async (_, _file) => {
        // TODO: accumulate changes in an array and debounce
        return updateScene(projectRoot, routes_1.sceneUpdateClients);
    }, 500));
}
exports.wireFileWatcherToWebSockets = wireFileWatcherToWebSockets;
/*
 * IMPORTANT: this is a legacy protocol and needs to be revisited for SDK7
 */
function updateScene(dir, clients) {
    for (const client of clients) {
        if (client.readyState === ws_1.WebSocket.OPEN) {
            const message = {
                type: schemas_1.sdk.SCENE_UPDATE,
                payload: { sceneId: 'b64-' + Buffer.from(dir).toString('base64'), sceneType: schemas_1.sdk.ProjectType.SCENE }
            };
            client.send(schemas_1.sdk.UPDATE);
            client.send(JSON.stringify(message));
        }
    }
}
//# sourceMappingURL=file-watch-notifier.js.map