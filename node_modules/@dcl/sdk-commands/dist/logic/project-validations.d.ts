import { Scene } from '@dcl/schemas';
import { CliComponents } from '../components';
export type BaseProject = {
    workingDirectory: string;
};
export type SceneProject = {
    kind: 'scene';
    scene: Scene;
} & BaseProject;
export type WearableProject = {
    kind: 'wearable';
    wearable: any;
} & BaseProject;
export type ProjectUnion = SceneProject | WearableProject;
/**
 * Asserts that the workingDirectory is a valid project
 */
export declare function assertValidProjectFolder(components: Pick<CliComponents, 'fs' | 'logger'>, workingDirectory: string): Promise<ProjectUnion>;
export declare function needsDependencies(components: Pick<CliComponents, 'fs'>, workingDirectory: string): Promise<boolean>;
export declare function installDependencies(components: Pick<CliComponents, 'logger' | 'spawner' | 'fs'>, workingDirectory: string): Promise<void>;
/**
 * Run NPM commands
 */
export declare function npmRun(components: Pick<CliComponents, 'spawner'>, cwd: string, command: string, ...args: string[]): Promise<void>;
/**
 * NPM commands
 */
export declare function npmCommand(components: Pick<CliComponents, 'spawner'>, cwd: string, command: string, ...args: string[]): Promise<void>;
/**
 * Start validations to make the scene work.
 */
export declare function startValidations(components: Pick<CliComponents, 'spawner' | 'fs' | 'logger'>, cwd: string): Promise<void>;
