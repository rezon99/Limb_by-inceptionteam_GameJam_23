export function getEthereumProvider(sendAsync) {
    async function request(message) {
        const response = await sendAsync({
            id: message.id,
            method: message.method,
            jsonParams: JSON.stringify(message.params)
        });
        return JSON.parse(response.jsonAnyResponse);
    }
    return {
        send(message, callback) {
            if (message && callback && callback instanceof Function) {
                request(message)
                    .then((x) => callback(null, x))
                    .catch(callback);
            }
            else {
                throw new Error('Decentraland provider only allows async calls');
            }
        },
        sendAsync(message, callback) {
            request(message)
                .then((x) => callback(null, x))
                .catch(callback);
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW50ZXJuYWwvcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBdUJBLE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxTQUF3QjtJQUMxRCxLQUFLLFVBQVUsT0FBTyxDQUFDLE9BQTJCO1FBQ2hELE1BQU0sUUFBUSxHQUFHLE1BQU0sU0FBUyxDQUFDO1lBQy9CLEVBQUUsRUFBRSxPQUFPLENBQUMsRUFBRTtZQUNkLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTTtZQUN0QixVQUFVLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO1NBQzNDLENBQUMsQ0FBQTtRQUNGLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUE7SUFDN0MsQ0FBQztJQUVELE9BQU87UUFFTCxJQUFJLENBQUMsT0FBMkIsRUFBRSxRQUFzRDtZQUN0RixJQUFJLE9BQU8sSUFBSSxRQUFRLElBQUksUUFBUSxZQUFZLFFBQVEsRUFBRTtnQkFDdkQsT0FBTyxDQUFDLE9BQU8sQ0FBQztxQkFDYixJQUFJLENBQUMsQ0FBQyxDQUFNLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7cUJBQ25DLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQTthQUNuQjtpQkFBTTtnQkFDTCxNQUFNLElBQUksS0FBSyxDQUFDLCtDQUErQyxDQUFDLENBQUE7YUFDakU7UUFDSCxDQUFDO1FBQ0QsU0FBUyxDQUFDLE9BQTJCLEVBQUUsUUFBcUQ7WUFDMUYsT0FBTyxDQUFDLE9BQU8sQ0FBQztpQkFDYixJQUFJLENBQUMsQ0FBQyxDQUFNLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7aUJBQ25DLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUNwQixDQUFDO0tBQ0YsQ0FBQTtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIFNlbmRBc3luY1Jlc3BvbnNlIHtcbiAganNvbkFueVJlc3BvbnNlOiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZW5kQXN5bmNSZXF1ZXN0IHtcbiAgaWQ6IG51bWJlclxuICBtZXRob2Q6IHN0cmluZ1xuICBqc29uUGFyYW1zOiBzdHJpbmdcbn1cblxuZXhwb3J0IHR5cGUgUlBDU2VuZGFibGVNZXNzYWdlID0ge1xuICBqc29ucnBjOiAnMi4wJ1xuICBpZDogbnVtYmVyXG4gIG1ldGhvZDogc3RyaW5nXG4gIHBhcmFtczogYW55W11cbn1cblxuZXhwb3J0IGludGVyZmFjZSBNZXNzYWdlRGljdCB7XG4gIFtrZXk6IHN0cmluZ106IHN0cmluZ1xufVxuXG5leHBvcnQgdHlwZSBTZW5kQXN5bmNUeXBlID0gKHBhcmFtczogU2VuZEFzeW5jUmVxdWVzdCkgPT4gUHJvbWlzZTxTZW5kQXN5bmNSZXNwb25zZT5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEV0aGVyZXVtUHJvdmlkZXIoc2VuZEFzeW5jOiBTZW5kQXN5bmNUeXBlKSB7XG4gIGFzeW5jIGZ1bmN0aW9uIHJlcXVlc3QobWVzc2FnZTogUlBDU2VuZGFibGVNZXNzYWdlKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzZW5kQXN5bmMoe1xuICAgICAgaWQ6IG1lc3NhZ2UuaWQsXG4gICAgICBtZXRob2Q6IG1lc3NhZ2UubWV0aG9kLFxuICAgICAganNvblBhcmFtczogSlNPTi5zdHJpbmdpZnkobWVzc2FnZS5wYXJhbXMpXG4gICAgfSlcbiAgICByZXR1cm4gSlNPTi5wYXJzZShyZXNwb25zZS5qc29uQW55UmVzcG9uc2UpXG4gIH1cblxuICByZXR1cm4ge1xuICAgIC8vIEBpbnRlcm5hbFxuICAgIHNlbmQobWVzc2FnZTogUlBDU2VuZGFibGVNZXNzYWdlLCBjYWxsYmFjaz86IChlcnJvcjogRXJyb3IgfCBudWxsLCByZXN1bHQ/OiBhbnkpID0+IHZvaWQpOiB2b2lkIHtcbiAgICAgIGlmIChtZXNzYWdlICYmIGNhbGxiYWNrICYmIGNhbGxiYWNrIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICAgICAgcmVxdWVzdChtZXNzYWdlKVxuICAgICAgICAgIC50aGVuKCh4OiBhbnkpID0+IGNhbGxiYWNrKG51bGwsIHgpKVxuICAgICAgICAgIC5jYXRjaChjYWxsYmFjaylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRGVjZW50cmFsYW5kIHByb3ZpZGVyIG9ubHkgYWxsb3dzIGFzeW5jIGNhbGxzJylcbiAgICAgIH1cbiAgICB9LFxuICAgIHNlbmRBc3luYyhtZXNzYWdlOiBSUENTZW5kYWJsZU1lc3NhZ2UsIGNhbGxiYWNrOiAoZXJyb3I6IEVycm9yIHwgbnVsbCwgcmVzdWx0PzogYW55KSA9PiB2b2lkKTogdm9pZCB7XG4gICAgICByZXF1ZXN0KG1lc3NhZ2UpXG4gICAgICAgIC50aGVuKCh4OiBhbnkpID0+IGNhbGxiYWNrKG51bGwsIHgpKVxuICAgICAgICAuY2F0Y2goY2FsbGJhY2spXG4gICAgfVxuICB9XG59XG4iXX0=