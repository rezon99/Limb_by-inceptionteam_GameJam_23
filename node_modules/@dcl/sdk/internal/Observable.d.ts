export declare class ObserverEventState {
    skipNextObservers: boolean;
    mask: number;
    target?: any;
    currentTarget?: any;
    lastReturnValue?: any;
    constructor(mask: number, skipNextObservers?: boolean, target?: any, currentTarget?: any);
    initalize(mask: number, skipNextObservers?: boolean, target?: any, currentTarget?: any): ObserverEventState;
}
export declare class Observer<T> {
    callback: (eventData: T, eventState: ObserverEventState) => void;
    mask: number;
    scope: any;
    unregisterOnNextCall: boolean;
    _willBeUnregistered: boolean;
    constructor(callback: (eventData: T, eventState: ObserverEventState) => void, mask: number, scope?: any);
}
export declare class Observable<T> {
    private _observers;
    private _eventState;
    private _onObserverAdded;
    constructor(onObserverAdded?: (observer: Observer<T>) => void);
    add(callback: (eventData: T, eventState: ObserverEventState) => void, mask?: number, insertFirst?: boolean, scope?: any, unregisterOnFirstCall?: boolean): null | Observer<T>;
    addOnce(callback: (eventData: T, eventState: ObserverEventState) => void): null | Observer<T>;
    remove(observer: null | Observer<T>): boolean;
    removeCallback(callback: (eventData: T, eventState: ObserverEventState) => void, scope?: any): boolean;
    notifyObservers(eventData: T, mask?: number, target?: any, currentTarget?: any): boolean;
    notifyObserversWithPromise(eventData: T, mask?: number, target?: any, currentTarget?: any): Promise<T>;
    notifyObserver(observer: Observer<T>, eventData: T, mask?: number): void;
    hasObservers(): boolean;
    clear(): void;
    clone(): Observable<T>;
    hasSpecificMask(mask?: number): boolean;
    private _deferUnregister;
    private _remove;
}
