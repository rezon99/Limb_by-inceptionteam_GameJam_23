import { onCommsMessage } from './observables';
import * as communicationsController from '~system/CommunicationsController';
export class MessageBus {
    constructor() {
        this.messageQueue = [];
        this.flushing = false;
    }
    on(message, callback) {
        return onCommsMessage.add((e) => {
            const m = JSON.parse(e.message);
            if (m.message === message) {
                callback(m.payload, e.sender);
            }
        });
    }
    sendRaw(message) {
        this.messageQueue.push(message);
        this.flush();
    }
    emit(message, payload) {
        const messageToSend = JSON.stringify({ message, payload });
        this.sendRaw(messageToSend);
        onCommsMessage.notifyObservers({ message: messageToSend, sender: 'self' });
    }
    flush() {
        if (this.messageQueue.length === 0)
            return;
        if (this.flushing)
            return;
        const message = this.messageQueue.shift();
        this.flushing = true;
        communicationsController.send({ message }).then((_) => {
            this.flushing = false;
            this.flush();
        }, (_) => {
            this.flushing = false;
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS1idXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzcmMvbWVzc2FnZS1idXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFXLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUN2RCxPQUFPLEtBQUssd0JBQXdCLE1BQU0sa0NBQWtDLENBQUE7QUFNNUUsTUFBTSxPQUFPLFVBQVU7SUFJckI7UUFIUSxpQkFBWSxHQUFhLEVBQUUsQ0FBQTtRQUMzQixhQUFRLEdBQUcsS0FBSyxDQUFBO0lBRVQsQ0FBQztJQUVoQixFQUFFLENBQUMsT0FBZSxFQUFFLFFBQThDO1FBQ2hFLE9BQU8sY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQzlCLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1lBRS9CLElBQUksQ0FBQyxDQUFDLE9BQU8sS0FBSyxPQUFPLEVBQUU7Z0JBQ3pCLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQTthQUM5QjtRQUNILENBQUMsQ0FBRSxDQUFBO0lBQ0wsQ0FBQztJQUdELE9BQU8sQ0FBQyxPQUFlO1FBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBRS9CLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUNkLENBQUM7SUFFRCxJQUFJLENBQUMsT0FBZSxFQUFFLE9BQXlCO1FBQzdDLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQTtRQUMxRCxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFBO1FBQzNCLGNBQWMsQ0FBQyxlQUFlLENBQUMsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFBO0lBQzVFLENBQUM7SUFFTyxLQUFLO1FBQ1gsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sS0FBSyxDQUFDO1lBQUUsT0FBTTtRQUMxQyxJQUFJLElBQUksQ0FBQyxRQUFRO1lBQUUsT0FBTTtRQUV6QixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRyxDQUFBO1FBRTFDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFBO1FBRXBCLHdCQUF3QixDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUM3QyxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQ0osSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUE7WUFDckIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ2QsQ0FBQyxFQUNELENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDSixJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQTtRQUN2QixDQUFDLENBQ0YsQ0FBQTtJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmVyIH0gZnJvbSAnLi9pbnRlcm5hbC9PYnNlcnZhYmxlJ1xuaW1wb3J0IHsgSUV2ZW50cywgb25Db21tc01lc3NhZ2UgfSBmcm9tICcuL29ic2VydmFibGVzJ1xuaW1wb3J0ICogYXMgY29tbXVuaWNhdGlvbnNDb250cm9sbGVyIGZyb20gJ35zeXN0ZW0vQ29tbXVuaWNhdGlvbnNDb250cm9sbGVyJ1xuXG4vKipcbiAqIEBhbHBoYVxuICogQGRlcHJlY2F0ZWQgdGhpcyB3aWxsIG9ubHkgZXhpc3QgZm9yIGEgZmV3IHJlbGVhc2VzIGluIEVDUzdcbiAqL1xuZXhwb3J0IGNsYXNzIE1lc3NhZ2VCdXMge1xuICBwcml2YXRlIG1lc3NhZ2VRdWV1ZTogc3RyaW5nW10gPSBbXVxuICBwcml2YXRlIGZsdXNoaW5nID0gZmFsc2VcblxuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgb24obWVzc2FnZTogc3RyaW5nLCBjYWxsYmFjazogKHZhbHVlOiBhbnksIHNlbmRlcjogc3RyaW5nKSA9PiB2b2lkKTogT2JzZXJ2ZXI8SUV2ZW50c1snY29tbXMnXT4ge1xuICAgIHJldHVybiBvbkNvbW1zTWVzc2FnZS5hZGQoKGUpID0+IHtcbiAgICAgIGNvbnN0IG0gPSBKU09OLnBhcnNlKGUubWVzc2FnZSlcblxuICAgICAgaWYgKG0ubWVzc2FnZSA9PT0gbWVzc2FnZSkge1xuICAgICAgICBjYWxsYmFjayhtLnBheWxvYWQsIGUuc2VuZGVyKVxuICAgICAgfVxuICAgIH0pIVxuICB9XG5cbiAgLy8gQGludGVybmFsXG4gIHNlbmRSYXcobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgdGhpcy5tZXNzYWdlUXVldWUucHVzaChtZXNzYWdlKVxuXG4gICAgdGhpcy5mbHVzaCgpXG4gIH1cblxuICBlbWl0KG1lc3NhZ2U6IHN0cmluZywgcGF5bG9hZDogUmVjb3JkPGFueSwgYW55Pikge1xuICAgIGNvbnN0IG1lc3NhZ2VUb1NlbmQgPSBKU09OLnN0cmluZ2lmeSh7IG1lc3NhZ2UsIHBheWxvYWQgfSlcbiAgICB0aGlzLnNlbmRSYXcobWVzc2FnZVRvU2VuZClcbiAgICBvbkNvbW1zTWVzc2FnZS5ub3RpZnlPYnNlcnZlcnMoeyBtZXNzYWdlOiBtZXNzYWdlVG9TZW5kLCBzZW5kZXI6ICdzZWxmJyB9KVxuICB9XG5cbiAgcHJpdmF0ZSBmbHVzaCgpIHtcbiAgICBpZiAodGhpcy5tZXNzYWdlUXVldWUubGVuZ3RoID09PSAwKSByZXR1cm5cbiAgICBpZiAodGhpcy5mbHVzaGluZykgcmV0dXJuXG5cbiAgICBjb25zdCBtZXNzYWdlID0gdGhpcy5tZXNzYWdlUXVldWUuc2hpZnQoKSFcblxuICAgIHRoaXMuZmx1c2hpbmcgPSB0cnVlXG5cbiAgICBjb21tdW5pY2F0aW9uc0NvbnRyb2xsZXIuc2VuZCh7IG1lc3NhZ2UgfSkudGhlbihcbiAgICAgIChfKSA9PiB7XG4gICAgICAgIHRoaXMuZmx1c2hpbmcgPSBmYWxzZVxuICAgICAgICB0aGlzLmZsdXNoKClcbiAgICAgIH0sXG4gICAgICAoXykgPT4ge1xuICAgICAgICB0aGlzLmZsdXNoaW5nID0gZmFsc2VcbiAgICAgIH1cbiAgICApXG4gIH1cbn1cbiJdfQ==