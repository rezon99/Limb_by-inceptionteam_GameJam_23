import { Observable } from './internal/Observable';
import { QuaternionType, Vector3Type } from '@dcl/ecs';
export type InputEventResult = {
    origin: Vector3Type;
    direction: Vector3Type;
    buttonId: number;
    hit?: {
        length: number;
        hitPoint: Vector3Type;
        meshName: string;
        normal: Vector3Type;
        worldNormal: Vector3Type;
        entityId: unknown;
    };
};
export type GlobalInputEventResult = InputEventResult & {
    type: 0 | 1;
};
export type RaycastResponsePayload<T> = {
    queryId: string;
    queryType: string;
    payload: T;
};
export type GizmoDragEndEvent = {
    type: 'gizmoDragEnded';
    transforms: Array<{
        position: Vector3Type;
        rotation: QuaternionType;
        scale: Vector3Type;
        entityId: unknown;
    }>;
};
export type GizmoSelectedEvent = {
    type: 'gizmoSelected';
    gizmoType: 'MOVE' | 'ROTATE' | 'SCALE' | 'NONE';
    entities: string[];
};
export type IEventNames = keyof IEvents;
export type EngineEvent<T extends IEventNames = IEventNames, V = IEvents[T]> = {
    type: T;
    data: Readonly<V>;
};
export interface IEvents {
    positionChanged: {
        position: Vector3Type;
        cameraPosition: Vector3Type;
        playerHeight: number;
    };
    rotationChanged: {
        rotation: Vector3Type;
        quaternion: QuaternionType;
    };
    cameraModeChanged: {
        cameraMode: 0 | 1 | 2;
    };
    idleStateChanged: {
        isIdle: boolean;
    };
    playerExpression: {
        expressionId: string;
    };
    pointerUp: InputEventResult;
    pointerDown: InputEventResult;
    pointerEvent: GlobalInputEventResult;
    actionButtonEvent: GlobalInputEventResult;
    raycastResponse: RaycastResponsePayload<any>;
    chatMessage: {
        id: string;
        sender: string;
        message: string;
        isCommand: boolean;
    };
    onChange: {
        value?: any;
        pointerId?: number;
    };
    onEnter: unknown;
    onPointerLock: {
        locked?: boolean;
    };
    onAnimationEnd: {
        clipName: string;
    };
    onFocus: {
        entityId: unknown;
        pointerId: number;
    };
    onBlur: {
        entityId: unknown;
        pointerId: number;
    };
    onClick: {
        entityId: unknown;
    };
    entityOutOfScene: {
        entityId: unknown;
    };
    entityBackInScene: {
        entityId: unknown;
    };
    onEnterScene: {
        userId: string;
    };
    onLeaveScene: {
        userId: string;
    };
    comms: {
        sender: string;
        message: string;
    };
    sceneStart: unknown;
    builderSceneStart: unknown;
    builderSceneUnloaded: unknown;
    entitiesOutOfBoundaries: {
        entities: string[];
    };
    uuidEvent: {
        uuid: string;
        payload: any;
    };
    onTextSubmit: {
        text: string;
    };
    metricsUpdate: {
        given: Record<string, number>;
        limit: Record<string, number>;
    };
    limitsExceeded: {
        given: Record<string, number>;
        limit: Record<string, number>;
    };
    gizmoEvent: GizmoDragEndEvent | GizmoSelectedEvent;
    externalAction: {
        type: string;
        [key: string]: any;
    };
    stateEvent: {
        type: string;
        payload: any;
    };
    videoEvent: {
        componentId: string;
        videoClipId: string;
        videoStatus: number;
        currentOffset: number;
        totalVideoLength: number;
    };
    profileChanged: {
        ethAddress: string;
        version: number;
    };
    playerConnected: {
        userId: string;
    };
    playerDisconnected: {
        userId: string;
    };
    onRealmChanged: {
        domain: string;
        room: string;
        serverName: string;
        displayName: string;
    };
    playerClicked: {
        userId: string;
        ray: {
            origin: Vector3Type;
            direction: Vector3Type;
            distance: number;
        };
    };
    pointerHoverEnter: unknown;
    pointerHoverExit: unknown;
}
export declare const onEnterSceneObservable: Observable<{
    userId: string;
}>;
export declare const onEnterScene: Observable<{
    userId: string;
}>;
export declare const onLeaveSceneObservable: Observable<{
    userId: string;
}>;
export declare const onLeaveScene: Observable<{
    userId: string;
}>;
export declare const onSceneReadyObservable: Observable<unknown>;
export declare const onPlayerExpressionObservable: Observable<{
    expressionId: string;
}>;
export declare const onVideoEvent: Observable<{
    componentId: string;
    videoClipId: string;
    videoStatus: number;
    currentOffset: number;
    totalVideoLength: number;
}>;
export declare const onProfileChanged: Observable<{
    ethAddress: string;
    version: number;
}>;
export declare const onPlayerConnectedObservable: Observable<{
    userId: string;
}>;
export declare const onPlayerDisconnectedObservable: Observable<{
    userId: string;
}>;
export declare const onRealmChangedObservable: Observable<{
    domain: string;
    room: string;
    serverName: string;
    displayName: string;
}>;
export declare const onPlayerClickedObservable: Observable<{
    userId: string;
    ray: {
        origin: Vector3Type;
        direction: Vector3Type;
        distance: number;
    };
}>;
