import { Transform } from '@dcl/ecs';
import { assertEquals } from './assert';
export function createTestRuntime(testingModule, engine) {
    let runtimeFrozen = false;
    let currentFrameCounter = 0;
    let currentFrameTime = 0;
    const scheduledTests = [];
    const nextTickFuture = [];
    async function nextTick() {
        return new Promise((resolve) => {
            nextTickFuture.push(resolve);
        });
    }
    engine.addSystem(function TestingFrameworkCoroutineRunner(dt) {
        currentFrameCounter++;
        currentFrameTime += dt;
        nextTickFuture.splice(0, nextTickFuture.length).forEach((_) => _(dt));
    });
    function scheduleValue(value, env) {
        if (value && typeof value === 'object' && typeof value.then === 'function') {
            console.log('⏱️ yield promise');
            nextTickFuture.push(async () => {
                try {
                    scheduleValue(await value, env);
                }
                catch (err) {
                    env.reject(err);
                }
            });
        }
        else if (typeof value === 'function') {
            console.log('⏱️ yield function');
            nextTickFuture.push(() => {
                scheduleValue(value(), env);
            });
            return;
        }
        else if (typeof value === 'undefined' || value === null) {
            console.log('⏱️ yield');
            nextTickFuture.push(() => {
                consumeGenerator(env);
            });
        }
        else
            throw new Error(`Unexpected value from test generator: ${value}`);
    }
    function consumeGenerator(env) {
        try {
            const ret = env.generator.next();
            if (!ret.done) {
                scheduleValue(ret.value, env);
            }
            else {
                env.resolve();
            }
        }
        catch (err) {
            env.reject(err);
        }
    }
    function scheduleNextRun() {
        if (scheduledTests.length) {
            nextTickFuture.push(runTests);
        }
    }
    function runTests() {
        if (scheduledTests.length) {
            const entry = scheduledTests.shift();
            const initialFrame = currentFrameCounter;
            const startTime = currentFrameTime;
            let resolved = false;
            const resolve = () => {
                if (resolved)
                    throw new Error('resolved twice');
                resolved = true;
                console.log(`🟢 Test passed ${entry.name}`);
                testingModule
                    .logTestResult({
                    name: entry.name,
                    ok: true,
                    totalFrames: currentFrameCounter - initialFrame,
                    totalTime: currentFrameTime - startTime
                })
                    .finally(scheduleNextRun);
            };
            const reject = (err) => {
                if (resolved)
                    throw new Error('resolved twice');
                resolved = true;
                console.log(`🔴 Test failed ${entry.name}`);
                console.error(err);
                testingModule
                    .logTestResult({
                    name: entry.name,
                    ok: false,
                    error: err.toString(),
                    stack: err && typeof err === 'object' && err.stack,
                    totalFrames: currentFrameCounter - initialFrame,
                    totalTime: currentFrameTime - startTime
                })
                    .finally(scheduleNextRun);
            };
            try {
                console.log(`🧪 Running test ${entry.name}`);
                const testHelpers = {
                    async setCameraTransform(transform) {
                        await testingModule.setCameraTransform(transform);
                        await nextTick();
                        const TransformComponent = engine.getComponent(Transform.componentId);
                        const actualTransform = TransformComponent.get(engine.CameraEntity);
                        assertEquals(actualTransform.position, transform.position, "positions don't match");
                        assertEquals(actualTransform.rotation, transform.rotation, "rotations don't match");
                    }
                };
                const returnValue = entry.fn(testHelpers);
                if (returnValue && typeof returnValue === 'object') {
                    if (isGenerator(returnValue)) {
                        const env = {
                            generator: returnValue,
                            helpers: testHelpers,
                            resolve,
                            reject
                        };
                        consumeGenerator(env);
                    }
                    else if (isPromise(returnValue)) {
                        returnValue.then(resolve).catch(reject);
                    }
                    else {
                        throw new Error(`Unknown test result type: ${returnValue}`);
                    }
                }
                else {
                    resolve();
                }
            }
            catch (err) {
                reject(err);
            }
        }
    }
    nextTickFuture.push(() => {
        runtimeFrozen = true;
        if (!scheduledTests.length)
            return;
        testingModule.plan({ tests: scheduledTests }).then(scheduleNextRun).catch(globalFail);
    });
    function test(name, fn) {
        if (runtimeFrozen)
            throw new Error("New tests can't be added at this stage.");
        if (scheduledTests.some(($) => $.name === name))
            throw new Error(`Test with name ${name} already exists`);
        scheduledTests.push({ fn, name });
    }
    return {
        test
    };
}
function isGenerator(t) {
    return t && typeof t === 'object' && typeof t[Symbol.iterator] === 'function';
}
function isPromise(t) {
    return t && typeof t === 'object' && typeof t.then === 'function';
}
function globalFail(error) {
    console.error(error);
}
//# sourceMappingURL=data:application/json;base64,