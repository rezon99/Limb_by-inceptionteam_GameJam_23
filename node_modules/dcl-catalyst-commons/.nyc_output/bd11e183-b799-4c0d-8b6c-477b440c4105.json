{"/home/runner/work/catalyst-commons/catalyst-commons/src/utils/index.ts":{"path":"/home/runner/work/catalyst-commons/catalyst-commons/src/utils/index.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":8,"column":3}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"2":{"start":{"line":3,"column":26},"end":{"line":3,"column":33}},"3":{"start":{"line":4,"column":4},"end":{"line":4,"column":89}},"4":{"start":{"line":4,"column":71},"end":{"line":4,"column":83}},"5":{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},"6":{"start":{"line":6,"column":26},"end":{"line":6,"column":33}},"7":{"start":{"line":7,"column":4},"end":{"line":7,"column":17}},"8":{"start":{"line":9,"column":19},"end":{"line":11,"column":1}},"9":{"start":{"line":10,"column":4},"end":{"line":10,"column":126}},"10":{"start":{"line":10,"column":21},"end":{"line":10,"column":126}},"11":{"start":{"line":10,"column":95},"end":{"line":10,"column":126}},"12":{"start":{"line":12,"column":0},"end":{"line":12,"column":62}},"13":{"start":{"line":13,"column":0},"end":{"line":13,"column":44}},"14":{"start":{"line":14,"column":0},"end":{"line":14,"column":43}},"15":{"start":{"line":15,"column":0},"end":{"line":15,"column":57}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":74},"end":{"line":2,"column":75}},"loc":{"start":{"line":2,"column":96},"end":{"line":5,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":58},"end":{"line":4,"column":59}},"loc":{"start":{"line":4,"column":69},"end":{"line":4,"column":85}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":5,"column":6},"end":{"line":5,"column":7}},"loc":{"start":{"line":5,"column":28},"end":{"line":8,"column":1}},"line":5},"3":{"name":"(anonymous_3)","decl":{"start":{"line":9,"column":50},"end":{"line":9,"column":51}},"loc":{"start":{"line":9,"column":71},"end":{"line":11,"column":1}},"line":9}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":8,"column":3}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":57},"end":{"line":8,"column":2}}],"line":2},"1":{"loc":{"start":{"line":2,"column":57},"end":{"line":8,"column":2}},"type":"cond-expr","locations":[{"start":{"line":2,"column":74},"end":{"line":5,"column":1}},{"start":{"line":5,"column":6},"end":{"line":8,"column":1}}],"line":2},"2":{"loc":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"type":"if","locations":[{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},{"start":{"line":3,"column":4},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},"type":"if","locations":[{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},{"start":{"line":6,"column":4},"end":{"line":6,"column":33}}],"line":6},"4":{"loc":{"start":{"line":9,"column":19},"end":{"line":11,"column":1}},"type":"binary-expr","locations":[{"start":{"line":9,"column":20},"end":{"line":9,"column":24}},{"start":{"line":9,"column":28},"end":{"line":9,"column":45}},{"start":{"line":9,"column":50},"end":{"line":11,"column":1}}],"line":9},"5":{"loc":{"start":{"line":10,"column":21},"end":{"line":10,"column":126}},"type":"if","locations":[{"start":{"line":10,"column":21},"end":{"line":10,"column":126}},{"start":{"line":10,"column":21},"end":{"line":10,"column":126}}],"line":10},"6":{"loc":{"start":{"line":10,"column":25},"end":{"line":10,"column":93}},"type":"binary-expr","locations":[{"start":{"line":10,"column":25},"end":{"line":10,"column":40}},{"start":{"line":10,"column":44},"end":{"line":10,"column":93}}],"line":10}},"s":{"0":1,"1":17,"2":17,"3":17,"4":14,"5":0,"6":0,"7":0,"8":1,"9":3,"10":17,"11":17,"12":1,"13":1,"14":1,"15":1},"f":{"0":17,"1":14,"2":0,"3":3},"b":{"0":[1,1,1],"1":[1,0],"2":[17,0],"3":[0,0],"4":[1,1,1],"5":[17,0],"6":[17,17]},"inputSourceMap":{"version":3,"file":"/home/runner/work/catalyst-commons/catalyst-commons/src/utils/index.ts","sources":["/home/runner/work/catalyst-commons/catalyst-commons/src/utils/index.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,4CAAyB;AACzB,2CAAwB;AACxB,yDAAsC","sourcesContent":["export * from './Fetcher'\nexport * from './Helper'\nexport * from './FetcherConfiguration'\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"1abcda60bd81e15d90f1c38b558e1c9d35478289","contentHash":"10ea1912ee6035b5b93cce4a03f668b0fc1dd07f0db444b3c3b6ab6da420611a"},"/home/runner/work/catalyst-commons/catalyst-commons/src/utils/Fetcher.ts":{"path":"/home/runner/work/catalyst-commons/catalyst-commons/src/utils/Fetcher.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":154}},"4":{"start":{"line":7,"column":13},"end":{"line":7,"column":43}},"5":{"start":{"line":8,"column":27},"end":{"line":8,"column":71}},"6":{"start":{"line":9,"column":17},"end":{"line":9,"column":36}},"7":{"start":{"line":10,"column":22},"end":{"line":10,"column":61}},"8":{"start":{"line":11,"column":31},"end":{"line":11,"column":64}},"9":{"start":{"line":15,"column":8},"end":{"line":15,"column":67}},"10":{"start":{"line":18,"column":8},"end":{"line":18,"column":103}},"11":{"start":{"line":21,"column":8},"end":{"line":30,"column":11}},"12":{"start":{"line":36,"column":8},"end":{"line":36,"column":95}},"13":{"start":{"line":42,"column":8},"end":{"line":42,"column":97}},"14":{"start":{"line":54,"column":8},"end":{"line":54,"column":104}},"15":{"start":{"line":60,"column":8},"end":{"line":60,"column":94}},"16":{"start":{"line":63,"column":8},"end":{"line":63,"column":114}},"17":{"start":{"line":67,"column":8},"end":{"line":67,"column":48}},"18":{"start":{"line":70,"column":0},"end":{"line":70,"column":26}},"19":{"start":{"line":73,"column":21},"end":{"line":73,"column":133}},"20":{"start":{"line":74,"column":4},"end":{"line":74,"column":27}},"21":{"start":{"line":76,"column":0},"end":{"line":76,"column":30}},"22":{"start":{"line":79,"column":21},"end":{"line":79,"column":135}},"23":{"start":{"line":80,"column":4},"end":{"line":80,"column":56}},"24":{"start":{"line":82,"column":0},"end":{"line":82,"column":44}},"25":{"start":{"line":87,"column":21},"end":{"line":87,"column":135}},"26":{"start":{"line":88,"column":4},"end":{"line":88,"column":53}},"27":{"start":{"line":90,"column":0},"end":{"line":90,"column":34}},"28":{"start":{"line":101,"column":21},"end":{"line":101,"column":135}},"29":{"start":{"line":102,"column":4},"end":{"line":103,"column":95}},"30":{"start":{"line":103,"column":8},"end":{"line":103,"column":95}},"31":{"start":{"line":104,"column":4},"end":{"line":108,"column":5}},"32":{"start":{"line":106,"column":8},"end":{"line":106,"column":36}},"33":{"start":{"line":107,"column":8},"end":{"line":107,"column":32}},"34":{"start":{"line":109,"column":4},"end":{"line":109,"column":91}},"35":{"start":{"line":111,"column":0},"end":{"line":111,"column":30}},"36":{"start":{"line":113,"column":16},"end":{"line":113,"column":122}},"37":{"start":{"line":114,"column":4},"end":{"line":114,"column":22}},"38":{"start":{"line":116,"column":0},"end":{"line":116,"column":28}},"39":{"start":{"line":119,"column":22},"end":{"line":123,"column":6}},"40":{"start":{"line":124,"column":4},"end":{"line":126,"column":5}},"41":{"start":{"line":125,"column":8},"end":{"line":125,"column":93}},"42":{"start":{"line":127,"column":4},"end":{"line":127,"column":25}},"43":{"start":{"line":129,"column":0},"end":{"line":129,"column":32}},"44":{"start":{"line":131,"column":4},"end":{"line":131,"column":13}},"45":{"start":{"line":138,"column":4},"end":{"line":172,"column":43}},"46":{"start":{"line":139,"column":27},"end":{"line":139,"column":59}},"47":{"start":{"line":140,"column":33},"end":{"line":140,"column":70}},"48":{"start":{"line":141,"column":34},"end":{"line":141,"column":72}},"49":{"start":{"line":142,"column":24},"end":{"line":150,"column":10}},"50":{"start":{"line":152,"column":28},"end":{"line":152,"column":62}},"51":{"start":{"line":153,"column":24},"end":{"line":157,"column":15}},"52":{"start":{"line":155,"column":16},"end":{"line":155,"column":35}},"53":{"start":{"line":158,"column":8},"end":{"line":171,"column":9}},"54":{"start":{"line":159,"column":29},"end":{"line":159,"column":103}},"55":{"start":{"line":160,"column":12},"end":{"line":166,"column":13}},"56":{"start":{"line":161,"column":16},"end":{"line":161,"column":57}},"57":{"start":{"line":164,"column":37},"end":{"line":164,"column":58}},"58":{"start":{"line":165,"column":16},"end":{"line":165,"column":121}},"59":{"start":{"line":169,"column":12},"end":{"line":170,"column":38}},"60":{"start":{"line":170,"column":16},"end":{"line":170,"column":38}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":14,"column":4},"end":{"line":14,"column":5}},"loc":{"start":{"line":14,"column":32},"end":{"line":16,"column":5}},"line":14},"2":{"name":"(anonymous_2)","decl":{"start":{"line":17,"column":4},"end":{"line":17,"column":5}},"loc":{"start":{"line":17,"column":39},"end":{"line":19,"column":5}},"line":17},"3":{"name":"(anonymous_3)","decl":{"start":{"line":20,"column":4},"end":{"line":20,"column":5}},"loc":{"start":{"line":20,"column":24},"end":{"line":31,"column":5}},"line":20},"4":{"name":"(anonymous_4)","decl":{"start":{"line":35,"column":4},"end":{"line":35,"column":5}},"loc":{"start":{"line":35,"column":28},"end":{"line":37,"column":5}},"line":35},"5":{"name":"(anonymous_5)","decl":{"start":{"line":41,"column":4},"end":{"line":41,"column":5}},"loc":{"start":{"line":41,"column":30},"end":{"line":43,"column":5}},"line":41},"6":{"name":"(anonymous_6)","decl":{"start":{"line":53,"column":4},"end":{"line":53,"column":5}},"loc":{"start":{"line":53,"column":37},"end":{"line":55,"column":5}},"line":53},"7":{"name":"(anonymous_7)","decl":{"start":{"line":59,"column":4},"end":{"line":59,"column":5}},"loc":{"start":{"line":59,"column":27},"end":{"line":61,"column":5}},"line":59},"8":{"name":"(anonymous_8)","decl":{"start":{"line":62,"column":4},"end":{"line":62,"column":5}},"loc":{"start":{"line":62,"column":47},"end":{"line":64,"column":5}},"line":62},"9":{"name":"(anonymous_9)","decl":{"start":{"line":66,"column":4},"end":{"line":66,"column":5}},"loc":{"start":{"line":66,"column":12},"end":{"line":68,"column":5}},"line":66},"10":{"name":"fetchJson","decl":{"start":{"line":72,"column":15},"end":{"line":72,"column":24}},"loc":{"start":{"line":72,"column":39},"end":{"line":75,"column":1}},"line":72},"11":{"name":"fetchArrayBuffer","decl":{"start":{"line":78,"column":15},"end":{"line":78,"column":31}},"loc":{"start":{"line":78,"column":46},"end":{"line":81,"column":1}},"line":78},"12":{"name":"fetchBuffer","decl":{"start":{"line":86,"column":15},"end":{"line":86,"column":26}},"loc":{"start":{"line":86,"column":41},"end":{"line":89,"column":1}},"line":86},"13":{"name":"fetchPipe","decl":{"start":{"line":100,"column":15},"end":{"line":100,"column":24}},"loc":{"start":{"line":100,"column":48},"end":{"line":110,"column":1}},"line":100},"14":{"name":"postForm","decl":{"start":{"line":112,"column":15},"end":{"line":112,"column":23}},"loc":{"start":{"line":112,"column":38},"end":{"line":115,"column":1}},"line":112},"15":{"name":"queryGraph","decl":{"start":{"line":118,"column":15},"end":{"line":118,"column":25}},"loc":{"start":{"line":118,"column":58},"end":{"line":128,"column":1}},"line":118},"16":{"name":"identity","decl":{"start":{"line":130,"column":15},"end":{"line":130,"column":23}},"loc":{"start":{"line":130,"column":27},"end":{"line":132,"column":1}},"line":130},"17":{"name":"fetchInternal","decl":{"start":{"line":137,"column":15},"end":{"line":137,"column":28}},"loc":{"start":{"line":137,"column":43},"end":{"line":173,"column":1}},"line":137},"18":{"name":"(anonymous_18)","decl":{"start":{"line":138,"column":31},"end":{"line":138,"column":32}},"loc":{"start":{"line":138,"column":43},"end":{"line":172,"column":5}},"line":138},"19":{"name":"(anonymous_19)","decl":{"start":{"line":154,"column":25},"end":{"line":154,"column":26}},"loc":{"start":{"line":154,"column":31},"end":{"line":156,"column":13}},"line":154}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":15,"column":30},"end":{"line":15,"column":66}},"type":"cond-expr","locations":[{"start":{"line":15,"column":47},"end":{"line":15,"column":61}},{"start":{"line":15,"column":64},"end":{"line":15,"column":66}}],"line":15},"4":{"loc":{"start":{"line":102,"column":4},"end":{"line":103,"column":95}},"type":"if","locations":[{"start":{"line":102,"column":4},"end":{"line":103,"column":95}},{"start":{"line":102,"column":4},"end":{"line":103,"column":95}}],"line":102},"5":{"loc":{"start":{"line":104,"column":4},"end":{"line":108,"column":5}},"type":"if","locations":[{"start":{"line":104,"column":4},"end":{"line":108,"column":5}},{"start":{"line":104,"column":4},"end":{"line":108,"column":5}}],"line":104},"6":{"loc":{"start":{"line":124,"column":4},"end":{"line":126,"column":5}},"type":"if","locations":[{"start":{"line":124,"column":4},"end":{"line":126,"column":5}},{"start":{"line":124,"column":4},"end":{"line":126,"column":5}}],"line":124},"7":{"loc":{"start":{"line":140,"column":33},"end":{"line":140,"column":70}},"type":"binary-expr","locations":[{"start":{"line":140,"column":33},"end":{"line":140,"column":58}},{"start":{"line":140,"column":62},"end":{"line":140,"column":70}}],"line":140},"8":{"loc":{"start":{"line":141,"column":34},"end":{"line":141,"column":72}},"type":"binary-expr","locations":[{"start":{"line":141,"column":34},"end":{"line":141,"column":60}},{"start":{"line":141,"column":64},"end":{"line":141,"column":72}}],"line":141},"9":{"loc":{"start":{"line":153,"column":24},"end":{"line":157,"column":15}},"type":"cond-expr","locations":[{"start":{"line":154,"column":14},"end":{"line":156,"column":27}},{"start":{"line":157,"column":14},"end":{"line":157,"column":15}}],"line":153},"10":{"loc":{"start":{"line":160,"column":12},"end":{"line":166,"column":13}},"type":"if","locations":[{"start":{"line":160,"column":12},"end":{"line":166,"column":13}},{"start":{"line":160,"column":12},"end":{"line":166,"column":13}}],"line":160},"11":{"loc":{"start":{"line":169,"column":12},"end":{"line":170,"column":38}},"type":"if","locations":[{"start":{"line":169,"column":12},"end":{"line":170,"column":38}},{"start":{"line":169,"column":12},"end":{"line":170,"column":38}}],"line":169}},"s":{"0":1,"1":3,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":10,"10":0,"11":0,"12":5,"13":3,"14":1,"15":1,"16":0,"17":0,"18":1,"19":5,"20":5,"21":1,"22":0,"23":0,"24":1,"25":3,"26":2,"27":1,"28":1,"29":1,"30":0,"31":1,"32":1,"33":1,"34":0,"35":1,"36":1,"37":1,"38":1,"39":0,"40":0,"41":0,"42":0,"43":1,"44":19,"45":10,"46":10,"47":10,"48":10,"49":10,"50":10,"51":10,"52":1,"53":10,"54":10,"55":9,"56":9,"57":0,"58":0,"59":10,"60":10},"f":{"0":3,"1":10,"2":0,"3":0,"4":5,"5":3,"6":1,"7":1,"8":0,"9":0,"10":5,"11":0,"12":3,"13":1,"14":1,"15":0,"16":19,"17":10,"18":10,"19":1},"b":{"0":[1,1,1],"1":[0,3],"2":[3,3],"3":[4,6],"4":[0,1],"5":[1,0],"6":[0,0],"7":[10,10],"8":[10,10],"9":[10,0],"10":[9,0],"11":[10,0]},"inputSourceMap":{"version":3,"file":"/home/runner/work/catalyst-commons/catalyst-commons/src/utils/Fetcher.ts","sources":["/home/runner/work/catalyst-commons/catalyst-commons/src/utils/Fetcher.ts"],"names":[],"mappings":"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","sourcesContent":["import ms from 'ms'\nimport AbortController from 'abort-controller'\nimport { mergeRequestOptions, retry } from './Helper'\nimport crossFetch from 'cross-fetch'\n\nimport {\n  CompleteRequestOptions,\n  FETCH_BUFFER_DEFAULTS,\n  FETCH_JSON_DEFAULTS,\n  getAllHeaders,\n  POST_DEFAULTS,\n  RequestOptions\n} from './FetcherConfiguration'\n\n/** @deprecated use well-known-components fetcher instead */\nexport class Fetcher {\n  customDefaults: Omit<RequestOptions, 'body'>\n\n  constructor(customDefaults?: Omit<RequestOptions, 'body'>) {\n    this.customDefaults = customDefaults ? customDefaults : {}\n  }\n\n  overrideDefaults(overrideDefaults: Omit<RequestOptions, 'body'>): void {\n    this.customDefaults = mergeRequestOptions(this.customDefaults, overrideDefaults)\n  }\n\n  fetch(url: string, options?: Partial<CompleteRequestOptions>): Promise<Response> {\n    return fetchInternal(url, {\n      method: 'get',\n      // it is better to not assume how this generic fetch will be used, not sending retries\n      attempts: 1,\n      // no timeout by default\n      timeout: '0s',\n      // no wait-time by default\n      waitTime: '0s',\n      ...mergeRequestOptions(this.customDefaults, options)\n    })\n  }\n\n  /**\n   * @deprecated please use Fetcher.fetch instead\n   */\n  fetchJson(url: string, options?: RequestOptions): Promise<unknown> {\n    return fetchJson(url, mergeRequestOptions(this.customDefaults, options))\n  }\n\n  /**\n   * @deprecated please use Fetcher.fetch instead\n   */\n  fetchBuffer(url: string, options?: RequestOptions): Promise<Buffer> {\n    return fetchBuffer(url, mergeRequestOptions(this.customDefaults, options))\n  }\n\n  /**\n   * Fetches the url and pipes the response obtained from the upstream to the `writeTo` Stream and\n   * returns the headers from the upstream request.\n   * IMPORTANT: THIS METHOD DOES NOT AWAIT THE PIPE TO FINISH. THE PROMISE FULFILLS RIGHT AFTER WE RECEIVE THE HEADERS.\n   * @param url to request\n   * @param writeTo the stream to pipe the response to\n   * @param options config for the request\n   * @deprecated please use Fetcher.fetch instead\n   */\n  fetchPipe(url: string, writeTo: any, options?: RequestOptions): Promise<Headers> {\n    return fetchPipe(url, writeTo, mergeRequestOptions(this.customDefaults, options))\n  }\n\n  /**\n   * @deprecated please use Fetcher.fetch instead\n   */\n  postForm(url: string, options?: RequestOptions): Promise<unknown> {\n    return postForm(url, mergeRequestOptions(this.customDefaults, options))\n  }\n\n  queryGraph<T = any>(\n    url: string,\n    query: string,\n    variables: Record<string, any>,\n    options?: RequestOptions\n  ): Promise<T> {\n    return queryGraph(url, query, variables, mergeRequestOptions(this.customDefaults, options))\n  }\n\n  // Clones the fetcher and creates a new one\n  clone(): Fetcher {\n    return new Fetcher(this.customDefaults)\n  }\n}\n\n/** @deprecated use well-known-components fetcher instead */\nexport async function fetchJson(url: string, options?: RequestOptions): Promise<unknown> {\n  const response = await fetchInternal(url, mergeRequestOptions(FETCH_JSON_DEFAULTS, options))\n  return response.json()\n}\n\n/** @deprecated use well-known-components fetcher instead */\nexport async function fetchArrayBuffer(url: string, options?: RequestOptions): Promise<Uint8Array> {\n  const response = await fetchInternal(url, mergeRequestOptions(FETCH_BUFFER_DEFAULTS, options))\n  return new Uint8Array(await response.arrayBuffer())\n}\n\n/**\n * @deprecated use fetchArrayBuffer instead\n */\nexport async function fetchBuffer(url: string, options?: RequestOptions): Promise<Buffer> {\n  const response = await fetchInternal(url, mergeRequestOptions(FETCH_BUFFER_DEFAULTS, options))\n  return Buffer.from(await response.arrayBuffer())\n}\n\n/**\n * Fetches the url and pipes the response obtained from the upstream to the `writeTo` Stream and\n * returns the headers from the upstream request.\n * IMPORTANT: THIS METHOD DOES NOT AWAIT THE PIPE TO FINISH. THE PROMISE FULFILLS RIGHT AFTER WE RECEIVE THE HEADERS.\n * @param url to request\n * @param writeTo the stream to pipe the response to\n * @param options config for the request\n * @deprecated\n */\nexport async function fetchPipe(url: string, writeTo: any, options?: RequestOptions): Promise<Headers> {\n  const response = await fetchInternal(url, mergeRequestOptions(FETCH_BUFFER_DEFAULTS, options))\n\n  if (!response.body) throw new Error('The function fetchPipe only works in Node.js compatible enviroments')\n\n  if ('pipe' in response.body) {\n    ;(response.body as any).pipe(writeTo)\n    return response.headers\n  }\n\n  throw new Error('The function fetchPipe only works in Node.js compatible enviroments')\n}\n\nexport async function postForm(url: string, options?: RequestOptions): Promise<unknown> {\n  const res = await fetchInternal(url, mergeRequestOptions(POST_DEFAULTS, options))\n  return res.json()\n}\n\nexport type GraphQLResponse = {\n  errors: any[]\n  data: any\n}\n/** @deprecated use well-known-components thegraph-component instead */\nexport async function queryGraph<T = any>(\n  url: string,\n  query: string,\n  variables: Record<string, any>,\n  options?: RequestOptions\n): Promise<T> {\n  const response = (await postForm(url, {\n    body: JSON.stringify({ query, variables }),\n    headers: { 'Content-Type': 'application/json' },\n    ...options\n  })) as GraphQLResponse\n  if (response.errors) {\n    throw new Error(`Error querying graph. Reasons: ${JSON.stringify(response.errors)}`)\n  }\n  return response.data\n}\n\nasync function identity<T>(a: T): Promise<T> {\n  return a\n}\n\n/**\n * This is the method where everything happens, all of the methods in this file call internally fetchInternal.\n * If you need to modify something for all requests, do it here.\n */\nasync function fetchInternal(url: string, options: CompleteRequestOptions): Promise<Response> {\n  return retry(\n    async () => {\n      const controller = new AbortController()\n      const transformRequest = options.requestMiddleware || identity\n      const transformResponse = options.responseMiddleware || identity\n\n      const request = await transformRequest({\n        requestInfo: url,\n        requestInit: {\n          signal: controller.signal,\n          body: options.body,\n          method: options.method,\n          headers: getAllHeaders(options)\n        }\n      })\n\n      // schedule timeout right after transforming Request\n      const timeoutTime = ms(options.timeout)\n      const timeout = timeoutTime\n        ? setTimeout(() => {\n            controller.abort()\n          }, timeoutTime)\n        : 0\n\n      try {\n        const response: Response = await crossFetch(request.requestInfo, request.requestInit)\n        if (response.ok) {\n          return await transformResponse(response)\n        } else {\n          const responseText = await response.text()\n          throw new Error(`Failed to fetch ${url}. Got status ${response.status}. Response was '${responseText}'`)\n        }\n      } finally {\n        if (timeout) clearTimeout(timeout)\n      }\n    },\n    options.attempts,\n    options.waitTime\n  )\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"2525625a8b56ad8990ba4ceeb5d463a27f402f25","contentHash":"6ff3cef013dcfe673d2b8036ef2e903d4581d52a96cfa44abd424bbb74584f37"},"/home/runner/work/catalyst-commons/catalyst-commons/src/utils/Helper.ts":{"path":"/home/runner/work/catalyst-commons/catalyst-commons/src/utils/Helper.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":121}},"4":{"start":{"line":7,"column":13},"end":{"line":7,"column":43}},"5":{"start":{"line":10,"column":4},"end":{"line":10,"column":82}},"6":{"start":{"line":10,"column":36},"end":{"line":10,"column":80}},"7":{"start":{"line":12,"column":0},"end":{"line":12,"column":22}},"8":{"start":{"line":15,"column":4},"end":{"line":33,"column":5}},"9":{"start":{"line":16,"column":8},"end":{"line":32,"column":9}},"10":{"start":{"line":17,"column":12},"end":{"line":17,"column":37}},"11":{"start":{"line":22,"column":12},"end":{"line":22,"column":23}},"12":{"start":{"line":23,"column":12},"end":{"line":31,"column":13}},"13":{"start":{"line":24,"column":16},"end":{"line":26,"column":17}},"14":{"start":{"line":25,"column":20},"end":{"line":25,"column":52}},"15":{"start":{"line":27,"column":16},"end":{"line":27,"column":38}},"16":{"start":{"line":30,"column":16},"end":{"line":30,"column":28}},"17":{"start":{"line":34,"column":4},"end":{"line":34,"column":83}},"18":{"start":{"line":36,"column":0},"end":{"line":36,"column":22}},"19":{"start":{"line":39,"column":4},"end":{"line":39,"column":39}},"20":{"start":{"line":41,"column":0},"end":{"line":41,"column":38}},"21":{"start":{"line":44,"column":4},"end":{"line":44,"column":39}},"22":{"start":{"line":46,"column":0},"end":{"line":46,"column":46}},"23":{"start":{"line":52,"column":28},"end":{"line":55,"column":5}},"24":{"start":{"line":56,"column":28},"end":{"line":59,"column":5}},"25":{"start":{"line":60,"column":4},"end":{"line":65,"column":6}},"26":{"start":{"line":67,"column":0},"end":{"line":67,"column":50}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"delay","decl":{"start":{"line":9,"column":9},"end":{"line":9,"column":14}},"loc":{"start":{"line":9,"column":21},"end":{"line":11,"column":1}},"line":9},"2":{"name":"(anonymous_2)","decl":{"start":{"line":10,"column":23},"end":{"line":10,"column":24}},"loc":{"start":{"line":10,"column":36},"end":{"line":10,"column":80}},"line":10},"3":{"name":"retry","decl":{"start":{"line":14,"column":15},"end":{"line":14,"column":20}},"loc":{"start":{"line":14,"column":82},"end":{"line":35,"column":1}},"line":14},"4":{"name":"applyDefaults","decl":{"start":{"line":38,"column":9},"end":{"line":38,"column":22}},"loc":{"start":{"line":38,"column":42},"end":{"line":40,"column":1}},"line":38},"5":{"name":"applySomeDefaults","decl":{"start":{"line":43,"column":9},"end":{"line":43,"column":26}},"loc":{"start":{"line":43,"column":46},"end":{"line":45,"column":1}},"line":43},"6":{"name":"mergeRequestOptions","decl":{"start":{"line":50,"column":9},"end":{"line":50,"column":28}},"loc":{"start":{"line":50,"column":45},"end":{"line":66,"column":1}},"line":50}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":14,"column":42},"end":{"line":14,"column":57}},"type":"default-arg","locations":[{"start":{"line":14,"column":53},"end":{"line":14,"column":57}}],"line":14},"4":{"loc":{"start":{"line":23,"column":12},"end":{"line":31,"column":13}},"type":"if","locations":[{"start":{"line":23,"column":12},"end":{"line":31,"column":13}},{"start":{"line":23,"column":12},"end":{"line":31,"column":13}}],"line":23},"5":{"loc":{"start":{"line":24,"column":16},"end":{"line":26,"column":17}},"type":"if","locations":[{"start":{"line":24,"column":16},"end":{"line":26,"column":17}},{"start":{"line":24,"column":16},"end":{"line":26,"column":17}}],"line":24},"6":{"loc":{"start":{"line":53,"column":11},"end":{"line":53,"column":72}},"type":"cond-expr","locations":[{"start":{"line":53,"column":53},"end":{"line":53,"column":59}},{"start":{"line":53,"column":62},"end":{"line":53,"column":72}}],"line":53},"7":{"loc":{"start":{"line":53,"column":11},"end":{"line":53,"column":50}},"type":"binary-expr","locations":[{"start":{"line":53,"column":11},"end":{"line":53,"column":33}},{"start":{"line":53,"column":37},"end":{"line":53,"column":50}}],"line":53},"8":{"loc":{"start":{"line":54,"column":11},"end":{"line":54,"column":73}},"type":"cond-expr","locations":[{"start":{"line":54,"column":50},"end":{"line":54,"column":56}},{"start":{"line":54,"column":59},"end":{"line":54,"column":73}}],"line":54},"9":{"loc":{"start":{"line":54,"column":11},"end":{"line":54,"column":47}},"type":"binary-expr","locations":[{"start":{"line":54,"column":11},"end":{"line":54,"column":26}},{"start":{"line":54,"column":30},"end":{"line":54,"column":47}}],"line":54},"10":{"loc":{"start":{"line":57,"column":11},"end":{"line":57,"column":72}},"type":"cond-expr","locations":[{"start":{"line":57,"column":53},"end":{"line":57,"column":59}},{"start":{"line":57,"column":62},"end":{"line":57,"column":72}}],"line":57},"11":{"loc":{"start":{"line":57,"column":11},"end":{"line":57,"column":50}},"type":"binary-expr","locations":[{"start":{"line":57,"column":11},"end":{"line":57,"column":33}},{"start":{"line":57,"column":37},"end":{"line":57,"column":50}}],"line":57},"12":{"loc":{"start":{"line":58,"column":11},"end":{"line":58,"column":73}},"type":"cond-expr","locations":[{"start":{"line":58,"column":50},"end":{"line":58,"column":56}},{"start":{"line":58,"column":59},"end":{"line":58,"column":73}}],"line":58},"13":{"loc":{"start":{"line":58,"column":11},"end":{"line":58,"column":47}},"type":"binary-expr","locations":[{"start":{"line":58,"column":11},"end":{"line":58,"column":26}},{"start":{"line":58,"column":30},"end":{"line":58,"column":47}}],"line":58}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":4,"6":4,"7":1,"8":12,"9":15,"10":15,"11":5,"12":5,"13":3,"14":3,"15":3,"16":2,"17":0,"18":1,"19":1,"20":1,"21":1,"22":1,"23":20,"24":20,"25":20,"26":1},"f":{"0":1,"1":4,"2":4,"3":12,"4":1,"5":1,"6":20},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1],"3":[0],"4":[3,2],"5":[3,0],"6":[0,20],"7":[20,20],"8":[1,19],"9":[20,20],"10":[0,20],"11":[20,20],"12":[1,19],"13":[20,20]},"inputSourceMap":{"version":3,"file":"/home/runner/work/catalyst-commons/catalyst-commons/src/utils/Helper.ts","sources":["/home/runner/work/catalyst-commons/catalyst-commons/src/utils/Helper.ts"],"names":[],"mappings":";;;;;;AAAA,4CAAmB;AAGnB,wDAAwD;AACxD,SAAgB,KAAK,CAAC,IAAY;IAChC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,IAAA,YAAE,EAAC,IAAI,CAAC,CAAC,CAAC,CAAA;AAChE,CAAC;AAFD,sBAEC;AAED,wDAAwD;AACjD,KAAK,UAAU,KAAK,CACzB,SAA2B,EAC3B,QAAgB,EAChB,WAAmB,IAAI,EACvB,qBAAsD;IAEtD,OAAO,QAAQ,GAAG,CAAC,EAAE;QACnB,IAAI;YACF,OAAO,MAAM,SAAS,EAAE,CAAA;YACxB,6EAA6E;YAC7E,wDAAwD;SACzD;QAAC,OAAO,KAAK,EAAE;YACd,QAAQ,EAAE,CAAA;YACV,IAAI,QAAQ,GAAG,CAAC,EAAE;gBAChB,IAAI,qBAAqB,EAAE;oBACzB,qBAAqB,CAAC,QAAQ,CAAC,CAAA;iBAChC;gBACD,MAAM,KAAK,CAAC,QAAQ,CAAC,CAAA;aACtB;iBAAM;gBACL,MAAM,KAAK,CAAA;aACZ;SACF;KACF;IACD,MAAM,IAAI,KAAK,CAAC,6DAA6D,CAAC,CAAA;AAChF,CAAC;AAxBD,sBAwBC;AAED,+DAA+D;AAC/D,SAAgB,aAAa,CAAwB,QAAW,EAAE,OAAoB;IACpF,OAAO,EAAE,GAAG,QAAQ,EAAE,GAAG,OAAO,EAAE,CAAA;AACpC,CAAC;AAFD,sCAEC;AAED,oHAAoH;AACpH,SAAgB,iBAAiB,CAAI,QAAoB,EAAE,OAAoB;IAC7E,OAAO,EAAE,GAAG,QAAQ,EAAE,GAAG,OAAO,EAAE,CAAA;AACpC,CAAC;AAFD,8CAEC;AAED;;uFAEuF;AACvF,SAAgB,mBAAmB,CACjC,MAAS,EACT,MAAuB;;IAEvB,MAAM,eAAe,GAA2B;QAC9C,GAAG,MAAC,MAAyB,0CAAE,OAAO;QACtC,GAAG,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,OAAO;KACnB,CAAA;IACD,MAAM,eAAe,GAA2B;QAC9C,GAAG,MAAC,MAAyB,0CAAE,OAAO;QACtC,GAAG,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,OAAO;KACnB,CAAA;IACD,OAAO;QACL,GAAG,MAAM;QACT,GAAG,MAAM;QACT,OAAO,EAAE,eAAe;QACxB,OAAO,EAAE,eAAe;KACzB,CAAA;AACH,CAAC;AAlBD,kDAkBC","sourcesContent":["import ms from 'ms'\nimport { CompleteRequestOptions, RequestOptions } from './FetcherConfiguration'\n\n/** @deprecated migrate this function to your project */\nexport function delay(time: string): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms(time)))\n}\n\n/** @deprecated migrate this function to your project */\nexport async function retry<T>(\n  execution: () => Promise<T>,\n  attempts: number,\n  waitTime: string = '1s',\n  failedAttemptCallback?: (attemptsLeft: number) => void\n): Promise<T> {\n  while (attempts > 0) {\n    try {\n      return await execution()\n      //     ^^^^^ never remove this \"await\" keyword, otherwise this function won't\n      //           catch the exception and perform the retries\n    } catch (error) {\n      attempts--\n      if (attempts > 0) {\n        if (failedAttemptCallback) {\n          failedAttemptCallback(attempts)\n        }\n        await delay(waitTime)\n      } else {\n        throw error\n      }\n    }\n  }\n  throw new Error('Please specify more than one attempt for the retry function')\n}\n\n/** Add defaults to missing properties in the partial object */\nexport function applyDefaults<T, K = T | Partial<T>>(defaults: K, partial?: Partial<T>): K {\n  return { ...defaults, ...partial }\n}\n\n/** Add some defaults to missing properties in the partial object. This means that the object is not yet complete */\nexport function applySomeDefaults<T>(defaults: Partial<T>, partial?: Partial<T>): Partial<T> {\n  return { ...defaults, ...partial }\n}\n\n/** @deprecated migrate this function to your project\n     As headers field is Record<string, string> type, then when merging request Options\n     it's needed to merge the array instead of just applying the defaults.           */\nexport function mergeRequestOptions<T = CompleteRequestOptions | RequestOptions>(\n  target: T,\n  source?: RequestOptions\n): T {\n  const combinedHeaders: Record<string, string> = {\n    ...(target as RequestOptions)?.headers,\n    ...source?.headers\n  }\n  const combinedCookies: Record<string, string> = {\n    ...(target as RequestOptions)?.cookies,\n    ...source?.cookies\n  }\n  return {\n    ...target,\n    ...source,\n    headers: combinedHeaders,\n    cookies: combinedCookies\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"e8e353898a9019648fa9f7c70f4ca74f002fbc4c","contentHash":"d828d362567f00ac98420d11eeb818a7b1f0cd24653d17e59fdb1b3a3aa84ffe"},"/home/runner/work/catalyst-commons/catalyst-commons/src/utils/FetcherConfiguration.ts":{"path":"/home/runner/work/catalyst-commons/catalyst-commons/src/utils/FetcherConfiguration.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":144}},"4":{"start":{"line":7,"column":17},"end":{"line":7,"column":51}},"5":{"start":{"line":9,"column":20},"end":{"line":9,"column":41}},"6":{"start":{"line":10,"column":4},"end":{"line":14,"column":5}},"7":{"start":{"line":11,"column":8},"end":{"line":13,"column":44}},"8":{"start":{"line":12,"column":28},"end":{"line":12,"column":74}},"9":{"start":{"line":13,"column":30},"end":{"line":13,"column":42}},"10":{"start":{"line":15,"column":4},"end":{"line":15,"column":19}},"11":{"start":{"line":17,"column":0},"end":{"line":17,"column":38}},"12":{"start":{"line":18,"column":0},"end":{"line":23,"column":2}},"13":{"start":{"line":24,"column":0},"end":{"line":28,"column":2}},"14":{"start":{"line":29,"column":0},"end":{"line":32,"column":2}},"15":{"start":{"line":33,"column":0},"end":{"line":36,"column":2}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"getAllHeaders","decl":{"start":{"line":8,"column":9},"end":{"line":8,"column":22}},"loc":{"start":{"line":8,"column":32},"end":{"line":16,"column":1}},"line":8},"2":{"name":"(anonymous_2)","decl":{"start":{"line":12,"column":17},"end":{"line":12,"column":18}},"loc":{"start":{"line":12,"column":28},"end":{"line":12,"column":74}},"line":12},"3":{"name":"(anonymous_3)","decl":{"start":{"line":13,"column":20},"end":{"line":13,"column":21}},"loc":{"start":{"line":13,"column":30},"end":{"line":13,"column":42}},"line":13}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":9,"column":20},"end":{"line":9,"column":41}},"type":"binary-expr","locations":[{"start":{"line":9,"column":20},"end":{"line":9,"column":35}},{"start":{"line":9,"column":39},"end":{"line":9,"column":41}}],"line":9},"4":{"loc":{"start":{"line":10,"column":4},"end":{"line":14,"column":5}},"type":"if","locations":[{"start":{"line":10,"column":4},"end":{"line":14,"column":5}},{"start":{"line":10,"column":4},"end":{"line":14,"column":5}}],"line":10},"5":{"loc":{"start":{"line":10,"column":8},"end":{"line":10,"column":69}},"type":"binary-expr","locations":[{"start":{"line":10,"column":8},"end":{"line":10,"column":23}},{"start":{"line":10,"column":27},"end":{"line":10,"column":69}}],"line":10}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":13,"6":13,"7":2,"8":3,"9":1,"10":13,"11":1,"12":1,"13":1,"14":1,"15":1},"f":{"0":1,"1":13,"2":3,"3":1},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1],"3":[13,0],"4":[2,11],"5":[13,12]},"inputSourceMap":{"version":3,"file":"/home/runner/work/catalyst-commons/catalyst-commons/src/utils/FetcherConfiguration.ts","sources":["/home/runner/work/catalyst-commons/catalyst-commons/src/utils/FetcherConfiguration.ts"],"names":[],"mappings":";;;;;;AACA,oDAA2B;AAuB3B,SAAgB,aAAa,CAAC,OAA+B;IAC3D,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,EAAE,CAAA;IACrC,IAAI,OAAO,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;QACjE,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC;aAChD,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,gBAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;aACpD,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAA;KAClC;IACD,OAAO,OAAO,CAAA;AAChB,CAAC;AARD,sCAQC;AAEY,QAAA,gBAAgB,GAAG;IAC9B,MAAM,EAAE,KAAK;IACb,QAAQ,EAAE,CAAC;IACX,QAAQ,EAAE,IAAI;IACd,OAAO,EAAE,IAAI;CACd,CAAA;AAEY,QAAA,mBAAmB,GAAG;IACjC,GAAG,wBAAgB;IACnB,OAAO,EAAE,KAAK;IACd,QAAQ,EAAE,MAAM;CACjB,CAAA;AACY,QAAA,qBAAqB,GAAG;IACnC,GAAG,wBAAgB;IACnB,OAAO,EAAE,IAAI;CACd,CAAA;AACY,QAAA,aAAa,GAAG;IAC3B,GAAG,wBAAgB;IACnB,MAAM,EAAE,MAAM;CACf,CAAA","sourcesContent":["export type RequestOptions = Partial<CompleteRequestOptions>\nimport cookie from 'cookie'\n\nexport type CrossFetchRequest = {\n  requestInfo: string | RequestInfo\n  requestInit?: RequestInit\n}\n\nexport type CompleteRequestOptions = {\n  method: string\n  attempts: number // Number of attempts to perform the request\n  timeout: string // Time to abort the request. Time format accepted by ms: Examples: '0.5s', '2m', '3h', '100' (assumed to be milliseconds)\n  waitTime: string // Time to wait between attempts. Time format accepted by ms: Examples: '0.5s', '2m', '3h', '100' (assumed to be milliseconds)\n  body?: FormData | string\n  headers?: Record<string, string>\n  cookies?: Record<string, string>\n  // Configure a lambda to execute with the request, before executing it.\n  // This is used when you need to configure something of the fetcher according to the generated request.\n  requestMiddleware?: (request: CrossFetchRequest) => Promise<CrossFetchRequest>\n  // Configure a lambda to execute with the response if it was okay.\n  // This is used when you need to configure something of the fetcher according to the response obtained.\n  responseMiddleware?: (response: Response) => Promise<Response>\n}\n\nexport function getAllHeaders(options: CompleteRequestOptions): Record<string, string> {\n  const headers = options.headers || {}\n  if (options.cookies && Object.entries(options.cookies).length > 0) {\n    headers['Cookie'] = Object.entries(options.cookies)\n      .map((entry) => cookie.serialize(entry[0], entry[1]))\n      .reduce((a, b) => `${a}; ${b}`)\n  }\n  return headers\n}\n\nexport const FETCHER_DEFAULTS = {\n  method: 'GET',\n  attempts: 1,\n  waitTime: '1s',\n  timeout: '5m'\n}\n\nexport const FETCH_JSON_DEFAULTS = {\n  ...FETCHER_DEFAULTS,\n  timeout: '30s',\n  waitTime: '0.5s'\n}\nexport const FETCH_BUFFER_DEFAULTS = {\n  ...FETCHER_DEFAULTS,\n  timeout: '1m'\n}\nexport const POST_DEFAULTS = {\n  ...FETCHER_DEFAULTS,\n  method: 'POST'\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"bea1b764bbc694aee2bcbc30900b468f473bd5b1","contentHash":"1e3f0c743adae1ecc5f0c8a79caa187b583f017becb85d3b4469913992025562"}}