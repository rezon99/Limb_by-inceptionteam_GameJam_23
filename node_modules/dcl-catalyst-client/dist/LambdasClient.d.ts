import { Fetcher, HealthStatus, RequestOptions } from 'dcl-catalyst-commons';
import { EmotesFilters, LambdasAPI, OwnedItems, ServerMetadata, WearablesFilters } from './LambdasAPI';
export declare type LambdasClientOptions = {
    lambdasUrl: string;
    fetcher?: Fetcher;
};
export declare class LambdasClient implements LambdasAPI {
    private readonly lambdasUrl;
    private readonly fetcher;
    constructor(options: LambdasClientOptions);
    fetchProfiles(ethAddresses: string[], options?: RequestOptions): Promise<any[]>;
    fetchWearables(filters: WearablesFilters, options?: RequestOptions): Promise<any[]>;
    fetchOwnedWearables<B extends boolean>(ethAddress: string, includeDefinitions: B, options?: RequestOptions): Promise<OwnedItems<B>>;
    fetchOwnedThirdPartyWearables<B extends boolean>(ethAddress: string, thirdPartyId: string, includeDefinitions: B, options?: RequestOptions): Promise<OwnedItems<B>>;
    fetchEmotes(filters: EmotesFilters, options?: RequestOptions): Promise<any[]>;
    fetchOwnedEmotes<B extends boolean>(ethAddress: string, includeDefinitions: B, options?: RequestOptions): Promise<OwnedItems<B>>;
    fetchOwnedThirdPartyEmotes<B extends boolean>(ethAddress: string, thirdPartyId: string, includeDefinitions: B, options?: RequestOptions): Promise<OwnedItems<B>>;
    fetchCatalystsApprovedByDAO(options?: RequestOptions): Promise<ServerMetadata[]>;
    fetchLambdasStatus(options?: RequestOptions): Promise<{
        contentServerUrl: string;
    }>;
    fetchPeerHealth(options?: RequestOptions): Promise<Record<string, HealthStatus>>;
    getLambdasUrl(): string;
}
