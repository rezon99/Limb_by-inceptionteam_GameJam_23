"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.clientConnectedToCatalystIn = void 0;
const catalyst_contracts_1 = require("@dcl/catalyst-contracts");
const dcl_catalyst_commons_1 = require("dcl-catalyst-commons");
const eth_connect_1 = require("eth-connect");
const CatalystClient_1 = require("../CatalystClient");
const catalystList_1 = require("./catalystList");
const common_1 = require("./common");
const FETCH_HEALTH_TIMEOUT = '10s';
function getApprovedListFromContract(network) {
    const provider = new eth_connect_1.HTTPProvider(`https://rpc.decentraland.org/${encodeURIComponent(network)}?project=catalyst-client`);
    return (0, catalyst_contracts_1.getAllCatalystFromProvider)(provider);
}
/**
 * Returns a CatalystClient connected to one of the catalysts in the given network
 */
async function clientConnectedToCatalystIn(options) {
    const noContractList = await (0, catalystList_1.getUpdatedApprovedListWithoutQueryingContract)({
        preKnownServers: { network: options.network }
    });
    let list;
    if (noContractList) {
        list = noContractList;
    }
    else {
        console.warn('Falling back to the smart contract to get an updated list of active servers');
        list = (await getApprovedListFromContract(options.network)).map(($) => $.domain);
    }
    const shuffled = (0, common_1.shuffleArray)(list);
    for (const catalystUrl of shuffled) {
        const client = new CatalystClient_1.CatalystClient({
            catalystUrl: catalystUrl
        });
        const isUp = await isServerUp(client);
        if (isUp) {
            return client;
        }
    }
    throw new Error(`Couldn't find a server on the ${options.network} network that was up`);
}
exports.clientConnectedToCatalystIn = clientConnectedToCatalystIn;
async function isServerUp(client) {
    try {
        const result = await client.fetchPeerHealth({ timeout: FETCH_HEALTH_TIMEOUT });
        const isSomeServerDown = Object.keys(result).some((service) => result[service] !== dcl_catalyst_commons_1.HealthStatus.HEALTHY);
        return !isSomeServerDown;
    }
    catch (_a) {
        return false;
    }
}
//# sourceMappingURL=CatalystClientBuilder.js.map